/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Invokers.ApiException;
import Model.InlineResponse400;
import Model.PatchPaymentInstrumentRequest;
import Model.PostPaymentInstrumentRequest;
import Model.Tmsv2customersEmbeddedDefaultPaymentInstrument;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentInstrumentApi
 */
@Ignore
public class PaymentInstrumentApiTest {

    private final PaymentInstrumentApi api = new PaymentInstrumentApi();

    
    /**
     * Delete a Payment Instrument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePaymentInstrumentTest() throws ApiException {
        String paymentInstrumentTokenId = null;
        String profileId = null;
        api.deletePaymentInstrument(paymentInstrumentTokenId, profileId);

        // TODO: test validations
    }
    
    /**
     * Retrieve a Payment Instrument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPaymentInstrumentTest() throws ApiException {
        String paymentInstrumentTokenId = null;
        String profileId = null;
        Tmsv2customersEmbeddedDefaultPaymentInstrument response = api.getPaymentInstrument(paymentInstrumentTokenId, profileId);

        // TODO: test validations
    }
    
    /**
     * Update a Payment Instrument
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchPaymentInstrumentTest() throws ApiException {
        String paymentInstrumentTokenId = null;
        PatchPaymentInstrumentRequest patchPaymentInstrumentRequest = null;
        String profileId = null;
        String ifMatch = null;
        Tmsv2customersEmbeddedDefaultPaymentInstrument response = api.patchPaymentInstrument(paymentInstrumentTokenId, patchPaymentInstrumentRequest, profileId, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Create a Payment Instrument
     *
     * Include an existing TMS Instrument Identifier id in the request body. * An Instrument Identifier token can be created by calling: **POST *_/tms/v1/instrumentidentifiers*** 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postPaymentInstrumentTest() throws ApiException {
        PostPaymentInstrumentRequest postPaymentInstrumentRequest = null;
        String profileId = null;
        Tmsv2customersEmbeddedDefaultPaymentInstrument response = api.postPaymentInstrument(postPaymentInstrumentRequest, profileId);

        // TODO: test validations
    }
    
}
