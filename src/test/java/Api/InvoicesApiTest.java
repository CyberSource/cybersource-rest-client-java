/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Model.CreateInvoiceRequest;
import Model.InvoicingV2InvoicesAllGet200Response;
import Model.InvoicingV2InvoicesAllGet400Response;
import Model.InvoicingV2InvoicesAllGet404Response;
import Model.InvoicingV2InvoicesAllGet502Response;
import Model.InvoicingV2InvoicesGet200Response;
import Model.InvoicingV2InvoicesPost201Response;
import Model.InvoicingV2InvoicesPost202Response;
import Model.UpdateInvoiceRequest;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InvoicesApi
 */
@Ignore
public class InvoicesApiTest {

    private final InvoicesApi api = new InvoicesApi();

    
    /**
     * Create a New Invoice
     *
     * The invoicing product enables you to bill any customer with an email address and accept digital payments securely from any connected device. You can either use the system generated email or use the invoice payment link in your own communication. You can add discounts and taxes for the entire invoice or for each line item. To customize the invoice to match your brand see [Invoice Settings](https://developer.cybersource.com/api-reference-assets/index.html#invoicing_invoice-settings_update-invoice-settings). The invoice payment page uses Unified Checkout to process the payments.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createInvoiceTest() throws Exception {
        CreateInvoiceRequest createInvoiceRequest = null;
        InvoicingV2InvoicesPost201Response response = api.createInvoice(createInvoiceRequest);

        // TODO: test validations
    }
    
    /**
     * Get a List of Invoices
     *
     * Provides a (filtered) list of invoices that have been created in your account. You can filter the list based on Invoice Status by setting the status query parameter to one of DRAFT, CREATED, SENT, PARTIAL, PAID or CANCELED.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAllInvoicesTest() throws Exception {
        Integer offset = null;
        Integer limit = null;
        String status = null;
        InvoicingV2InvoicesAllGet200Response response = api.getAllInvoices(offset, limit, status);

        // TODO: test validations
    }
    
    /**
     * Get Invoice Details
     *
     * You can retrieve details of a specific invoice. This can be used to check the Invoice status and get a list of invoice payments in the invoice history section of the response. For each payment transaction you can use the Transaction Details API to get more details on the payment transaction.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getInvoiceTest() throws Exception {
        String id = null;
        InvoicingV2InvoicesGet200Response response = api.getInvoice(id);

        // TODO: test validations
    }
    
    /**
     * Cancel an Invoice
     *
     * You can cancel an invoice if no payment is made to it. You cannot cancel partially or fully paid invoices.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void performCancelActionTest() throws Exception {
        String id = null;
        InvoicingV2InvoicesPost201Response response = api.performCancelAction(id);

        // TODO: test validations
    }
    
    /**
     * Send an Invoice
     *
     * You can send an invoice in draft or created state or resend a sent or partially paid invoice. Fully paid or canceled invoices cannot be resent.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void performSendActionTest() throws Exception {
        String id = null;
        InvoicingV2InvoicesPost201Response response = api.performSendAction(id);

        // TODO: test validations
    }
    
    /**
     * Update an Invoice
     *
     * You can update all information except the invoice number till any payment is received for an invoice. Invoices that are partially or fully paid or cancelled cannot be updated.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateInvoiceTest() throws Exception {
        String id = null;
        UpdateInvoiceRequest updateInvoiceRequest = null;
        InvoicingV2InvoicesPost201Response response = api.updateInvoice(id, updateInvoiceRequest);

        // TODO: test validations
    }
    
}
