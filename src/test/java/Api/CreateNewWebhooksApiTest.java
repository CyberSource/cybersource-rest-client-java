/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Model.CreateWebhook;
import Model.InlineResponse2003;
import Model.InlineResponse2013;
import Model.InlineResponse2014;
import Model.SaveSymEgressKey;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CreateNewWebhooksApi
 */
@Ignore
public class CreateNewWebhooksApiTest {

    private final CreateNewWebhooksApi api = new CreateNewWebhooksApi();

    
    /**
     * Find Products You Can Subscribe To
     *
     * Retrieve a list of products and event types that your account is eligible for. These products and events are the ones that you may subscribe to in the next step of creating webhooks.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void findProductsToSubscribeTest() throws Exception {
        String organizationId = null;
        List<InlineResponse2003> response = api.findProductsToSubscribe(organizationId);

        // TODO: test validations
    }
    
    /**
     * Create a New Webhook Subscription
     *
     * Create a new webhook subscription. Before creating a webhook, ensure that a signature key has been created.  For the example \&quot;Create Webhook using oAuth with Client Credentials\&quot; - for clients who have more than one oAuth Provider and have different client secrets that they would like to config for a given webhook, they may do so by overriding the keyId inside security config of webhook subscription. See the Developer Center examples section titled \&quot;Webhook Security - Create or Store Egress Symmetric Key - Store oAuth Credentials For Symmetric Key\&quot; to store these oAuth credentials that CYBS will need for oAuth.  For JWT authentication, attach your oAuth details to the webhook subscription. See the example \&quot;Create Webhook using oAuth with JWT\&quot; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void notificationSubscriptionsV2WebhooksPostTest() throws Exception {
        CreateWebhook createWebhook = null;
        InlineResponse2014 response = api.notificationSubscriptionsV2WebhooksPost(createWebhook);

        // TODO: test validations
    }
    
    /**
     * Create Webhook Security Keys
     *
     * Create security keys that CyberSource will use internally to connect to your servers and validate messages using a digital signature.  Select the CREATE example for CyberSource to generate the key on our server and maintain it for you as well. Remember to save the key in the API response, so that you can use it to validate messages later. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void saveSymEgressKeyTest() throws Exception {
        String vCSenderOrganizationId = null;
        String vCPermissions = null;
        String vCCorrelationId = null;
        SaveSymEgressKey saveSymEgressKey = null;
        InlineResponse2013 response = api.saveSymEgressKey(vCSenderOrganizationId, vCPermissions, vCCorrelationId, saveSymEgressKey);

        // TODO: test validations
    }
    
}
