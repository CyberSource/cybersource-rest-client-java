/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Model.InlineResponse2002;
import Model.InlineResponse2013;
import Model.InlineResponse4007;
import Model.InlineResponse4041;
import Model.InlineResponse4221;
import Model.InlineResponse5002;
import Model.PostRegistrationBody;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MerchantBoardingApi
 */
@Ignore
public class MerchantBoardingApiTest {

    private final MerchantBoardingApi api = new MerchantBoardingApi();

    
    /**
     * Gets all the information on a boarding registration
     *
     * This end point will get all information of a boarding registration 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getRegistrationTest() throws Exception {
        String registrationId = null;
        InlineResponse2002 response = api.getRegistration(registrationId);

        // TODO: test validations
    }
    
    /**
     * Create a boarding registration
     *
     * Boarding Product is specifically for resellers who onboard merchants to resell their services to merchants and help integrate REST API into their systems.  The Boarding API is designed to simplify and streamline the onboarding process of merchants by enabling administrators and developers to: 1. Enable and Configure Products: The API helps in adding new products to an existing organization and configuring them to suit specific needs. 2. Update Merchant Information: The API allows for updating an organization&#39;s information efficiently. 3. Manage Payment Integration: It provides templates for secure payment integration and management. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postRegistrationTest() throws Exception {
        PostRegistrationBody postRegistrationBody = null;
        String vCIdempotencyId = null;
        InlineResponse2013 response = api.postRegistration(postRegistrationBody, vCIdempotencyId);

        // TODO: test validations
    }
    
}
