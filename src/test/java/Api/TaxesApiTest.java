/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Model.PtsV2PaymentsPost502Response;
import Model.TaxRequest;
import Model.VasV2PaymentsPost201Response;
import Model.VasV2PaymentsPost400Response;
import Model.VasV2TaxVoid200Response;
import Model.VasV2TaxVoidsPost400Response;
import Model.VoidTaxRequest;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaxesApi
 */
@Ignore
public class TaxesApiTest {

    private final TaxesApi api = new TaxesApi();

    
    /**
     * Calculate Taxes
     *
     * The tax calculation service provides real-time sales tax and VAT calculations for orders placed with your business worldwide.  It enhances your ability to conduct business globally and enables you to avoid the risk and complexity of managing online tax calculation.  The service supports product-based tax rules and exemptions for goods and services.  The tax rates are updated twice a month and calculations include sub-level detail (rates per taxing jurisdiction, names and types of jurisdictions). Implementation guidance, list of supported countries, and information on tax reporting are in the [Tax User Guide](https://developer.cybersource.com/docs/cybs/en-us/tax-calculation/developer/all/rest/tax-calculation/tax-overview.html). The availability of API features for a merchant can depend on the portfolio configuration and may need to be enabled at the portfolio level before they can be added to merchant accounts. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void calculateTaxTest() throws Exception {
        TaxRequest taxRequest = null;
        VasV2PaymentsPost201Response response = api.calculateTax(taxRequest);

        // TODO: test validations
    }
    
    /**
     * Void Taxes
     *
     * Pass the Tax Request ID in the PATCH request to void the committed tax calculation.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void voidTaxTest() throws Exception {
        VoidTaxRequest voidTaxRequest = null;
        String id = null;
        VasV2TaxVoid200Response response = api.voidTax(voidTaxRequest, id);

        // TODO: test validations
    }
    
}
