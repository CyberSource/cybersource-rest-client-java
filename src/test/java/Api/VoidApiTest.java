/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Invokers.ApiException;
import Model.MitVoidRequest;
import Model.PtsV2PaymentsPost502Response;
import Model.PtsV2PaymentsVoidsPost201Response;
import Model.PtsV2PaymentsVoidsPost400Response;
import Model.VoidCaptureRequest;
import Model.VoidCreditRequest;
import Model.VoidPaymentRequest;
import Model.VoidRefundRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VoidApi
 */
@Ignore
public class VoidApiTest {

    private final VoidApi api = new VoidApi();

    
    /**
     * Timeout Void
     *
     * This is to void a previous payment, capture, refund, or credit that merchant does not receive a reply(Mostly due to timeout). This is to void a previous payment, capture, refund, or credit that merchant does not receive a reply(Mostly due to Timeout). To use this feature/API, make sure to pass unique value to field - clientReferenceInformation -&gt; transactionId in your payment, capture, refund, or credit API call and use same transactionId in this API request payload to reverse the payment.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mitVoidTest() throws ApiException {
        MitVoidRequest mitVoidRequest = null;
        PtsV2PaymentsVoidsPost201Response response = api.mitVoid(mitVoidRequest);

        // TODO: test validations
    }
    
    /**
     * Void a Capture
     *
     * Refund a capture API is only used, if you have requested Capture independenlty using [/pts/v2/payments/{id}/captures](https://developer.cybersource.com/api-reference-assets/index.html#payments_capture) API call. Include the capture ID in the POST request to cancel the capture. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voidCaptureTest() throws ApiException {
        VoidCaptureRequest voidCaptureRequest = null;
        String id = null;
        PtsV2PaymentsVoidsPost201Response response = api.voidCapture(voidCaptureRequest, id);

        // TODO: test validations
    }
    
    /**
     * Void a Credit
     *
     * Include the credit ID in the POST request to cancel the credit.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voidCreditTest() throws ApiException {
        VoidCreditRequest voidCreditRequest = null;
        String id = null;
        PtsV2PaymentsVoidsPost201Response response = api.voidCredit(voidCreditRequest, id);

        // TODO: test validations
    }
    
    /**
     * Void a Payment
     *
     * Void a Payment API is only used, if you have requested Authorization and Capture together in [/pts/v2/payments](https://developer.cybersource.com/api-reference-assets/index.html#payments_payments) API call. Include the payment ID in the POST request to cancel the payment. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voidPaymentTest() throws ApiException {
        VoidPaymentRequest voidPaymentRequest = null;
        String id = null;
        PtsV2PaymentsVoidsPost201Response response = api.voidPayment(voidPaymentRequest, id);

        // TODO: test validations
    }
    
    /**
     * Void a Refund
     *
     * Include the refund ID in the POST request to cancel the refund.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voidRefundTest() throws ApiException {
        VoidRefundRequest voidRefundRequest = null;
        String id = null;
        PtsV2PaymentsVoidsPost201Response response = api.voidRefund(voidRefundRequest, id);

        // TODO: test validations
    }
    
}
