/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Model.InlineResponse200;
import Model.InlineResponse400;
import Model.InlineResponse403;
import Model.InlineResponse410;
import Model.InlineResponse424;
import Model.InlineResponse500;
import Model.PostPaymentCredentialsRequest;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TokenApi
 */
@Ignore
public class TokenApiTest {

    private final TokenApi api = new TokenApi();

    
    /**
     * Retrieve Card Art
     *
     * Retrieves Card Art for a specific Instrument Identifier. The Card Art is a visual representation of the cardholder&#39;s payment card. Card Art is only available if a Network Token is successfully provisioned. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCardArtAssetTest() throws Exception {
        String instrumentIdentifierId = null;
        String tokenProvider = null;
        String assetType = null;
        InlineResponse200 response = api.getCardArtAsset(instrumentIdentifierId, tokenProvider, assetType);

        // TODO: test validations
    }
    
    /**
     * Generate Payment Credentials for a TMS Token
     *
     * |  |  |  |     | --- | --- | --- |     |**Token**&lt;br&gt;A Token can represent your tokenized Customer, Payment Instrument, Instrument Identifier or Tokenized Card information.|&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;|**Payment Credentials**&lt;br&gt;Contains payment information such as the network token, generated cryptogram for Visa &amp; MasterCard or dynamic CVV for Amex in a JSON Web Encryption (JWE) response.&lt;br&gt;Your system can use this API to retrieve the Payment Credentials for an existing Customer, Payment Instrument, Instrument Identifier or Tokenized Card.&lt;br&gt;Optionally, **authenticated identities** information from Passkey authentication can be provided to potentially achieve liability shift, which may result in the return of an e-commerce indicator of 5 if successful. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postTokenPaymentCredentialsTest() throws Exception {
        String tokenId = null;
        PostPaymentCredentialsRequest postPaymentCredentialsRequest = null;
        String profileId = null;
        String response = api.postTokenPaymentCredentials(tokenId, postPaymentCredentialsRequest, profileId);

        // TODO: test validations
    }
    
}
