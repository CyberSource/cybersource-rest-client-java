/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Invokers.ApiException;
import Model.InlineResponse400;
import Model.PatchInstrumentIdentifierRequest;
import Model.PaymentInstrumentListForCustomer;
import Model.PostInstrumentIdentifierEnrollmentRequest;
import Model.PostInstrumentIdentifierRequest;
import Model.Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InstrumentIdentifierApi
 */
@Ignore
public class InstrumentIdentifierApiTest {

    private final InstrumentIdentifierApi api = new InstrumentIdentifierApi();

    
    /**
     * Delete an Instrument Identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInstrumentIdentifierTest() throws ApiException {
        String instrumentIdentifierTokenId = null;
        String profileId = null;
        api.deleteInstrumentIdentifier(instrumentIdentifierTokenId, profileId);

        // TODO: test validations
    }
    
    /**
     * Retrieve an Instrument Identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstrumentIdentifierTest() throws ApiException {
        String instrumentIdentifierTokenId = null;
        String profileId = null;
        Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier response = api.getInstrumentIdentifier(instrumentIdentifierTokenId, profileId);

        // TODO: test validations
    }
    
    /**
     * List Payment Instruments for an Instrument Identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstrumentIdentifierPaymentInstrumentsListTest() throws ApiException {
        String instrumentIdentifierTokenId = null;
        String profileId = null;
        Long offset = null;
        Long limit = null;
        PaymentInstrumentListForCustomer response = api.getInstrumentIdentifierPaymentInstrumentsList(instrumentIdentifierTokenId, profileId, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Update an Instrument Identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchInstrumentIdentifierTest() throws ApiException {
        String instrumentIdentifierTokenId = null;
        PatchInstrumentIdentifierRequest patchInstrumentIdentifierRequest = null;
        String profileId = null;
        String ifMatch = null;
        Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier response = api.patchInstrumentIdentifier(instrumentIdentifierTokenId, patchInstrumentIdentifierRequest, profileId, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Create an Instrument Identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postInstrumentIdentifierTest() throws ApiException {
        PostInstrumentIdentifierRequest postInstrumentIdentifierRequest = null;
        String profileId = null;
        Tmsv2customersEmbeddedDefaultPaymentInstrumentEmbeddedInstrumentIdentifier response = api.postInstrumentIdentifier(postInstrumentIdentifierRequest, profileId);

        // TODO: test validations
    }
    
    /**
     * Enroll an Instrument Identifier for Network Tokenization
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void postInstrumentIdentifierEnrollmentTest() throws ApiException {
        String instrumentIdentifierTokenId = null;
        PostInstrumentIdentifierEnrollmentRequest postInstrumentIdentifierEnrollmentRequest = null;
        String profileId = null;
        api.postInstrumentIdentifierEnrollment(instrumentIdentifierTokenId, postInstrumentIdentifierEnrollmentRequest, profileId);

        // TODO: test validations
    }
    
}
