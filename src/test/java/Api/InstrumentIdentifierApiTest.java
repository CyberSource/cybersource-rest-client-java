/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Invokers.ApiException;
import Model.CreateInstrumentIdentifierRequest;
import Model.InlineResponse400;
import Model.TmsV1InstrumentIdentifiersDelete409Response;
import Model.TmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response;
import Model.TmsV1InstrumentIdentifiersPost200Response;
import Model.UpdateInstrumentIdentifierRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InstrumentIdentifierApi
 */
@Ignore
public class InstrumentIdentifierApiTest {

    private final InstrumentIdentifierApi api = new InstrumentIdentifierApi();

    
    /**
     * Create an Instrument Identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInstrumentIdentifierTest() throws ApiException {
        String profileId = null;
        CreateInstrumentIdentifierRequest createInstrumentIdentifierRequest = null;
        TmsV1InstrumentIdentifiersPost200Response response = api.createInstrumentIdentifier(profileId, createInstrumentIdentifierRequest);

        // TODO: test validations
    }
    
    /**
     * Delete an Instrument Identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInstrumentIdentifierTest() throws ApiException {
        String profileId = null;
        String tokenId = null;
        api.deleteInstrumentIdentifier(profileId, tokenId);

        // TODO: test validations
    }
    
    /**
     * Retrieve all Payment Instruments
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllPaymentInstrumentsTest() throws ApiException {
        String profileId = null;
        String tokenId = null;
        Long offset = null;
        Long limit = null;
        TmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response response = api.getAllPaymentInstruments(profileId, tokenId, offset, limit);

        // TODO: test validations
    }
    
    /**
     * Retrieve an Instrument Identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInstrumentIdentifierTest() throws ApiException {
        String profileId = null;
        String tokenId = null;
        TmsV1InstrumentIdentifiersPost200Response response = api.getInstrumentIdentifier(profileId, tokenId);

        // TODO: test validations
    }
    
    /**
     * Update a Instrument Identifier
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInstrumentIdentifierTest() throws ApiException {
        String profileId = null;
        String tokenId = null;
        UpdateInstrumentIdentifierRequest updateInstrumentIdentifierRequest = null;
        TmsV1InstrumentIdentifiersPost200Response response = api.updateInstrumentIdentifier(profileId, tokenId, updateInstrumentIdentifierRequest);

        // TODO: test validations
    }
    
}
