/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Invokers.ApiException;
import Model.CreatePlanRequest;
import Model.InlineResponse200;
import Model.InlineResponse2001;
import Model.InlineResponse2002;
import Model.InlineResponse2003;
import Model.InlineResponse2004;
import Model.InlineResponse2005;
import Model.InlineResponse201;
import Model.InlineResponse4001;
import Model.InlineResponse404;
import Model.PtsV2PaymentsPost502Response;
import Model.UpdatePlanRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlansApi
 */
@Ignore
public class PlansApiTest {

    private final PlansApi api = new PlansApi();

    
    /**
     * Activate a Plan
     *
     * Activate a Plan
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activatePlanTest() throws ApiException {
        String id = null;
        InlineResponse2004 response = api.activatePlan(id);

        // TODO: test validations
    }
    
    /**
     * Create a Plan
     *
     * The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer&#39;s payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPlanTest() throws ApiException {
        CreatePlanRequest createPlanRequest = null;
        InlineResponse201 response = api.createPlan(createPlanRequest);

        // TODO: test validations
    }
    
    /**
     * Deactivate a Plan
     *
     * Deactivate a Plan
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deactivatePlanTest() throws ApiException {
        String id = null;
        InlineResponse2004 response = api.deactivatePlan(id);

        // TODO: test validations
    }
    
    /**
     * Delete a Plan
     *
     * Delete a Plan is only allowed: - plan status is in &#x60;DRAFT&#x60; - plan status is in &#x60;ACTIVE&#x60;, and &#x60;INACTIVE&#x60; only allowed when no subscriptions attached to a plan in the lifetime of a plan 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePlanTest() throws ApiException {
        String id = null;
        InlineResponse2002 response = api.deletePlan(id);

        // TODO: test validations
    }
    
    /**
     * Get a Plan
     *
     * Retrieve a Plan details by Plan Id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlanTest() throws ApiException {
        String id = null;
        InlineResponse2001 response = api.getPlan(id);

        // TODO: test validations
    }
    
    /**
     * Get a Plan Code
     *
     * Get a Unique Plan Code
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlanCodeTest() throws ApiException {
        InlineResponse2005 response = api.getPlanCode();

        // TODO: test validations
    }
    
    /**
     * Get a List of Plans
     *
     * Retrieve Plans by Plan Code &amp; Plan Status. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlansTest() throws ApiException {
        Integer offset = null;
        Integer limit = null;
        String code = null;
        String status = null;
        String name = null;
        InlineResponse200 response = api.getPlans(offset, limit, code, status, name);

        // TODO: test validations
    }
    
    /**
     * Update a Plan
     *
     * Update a Plan  Plan in &#x60;DRAFT&#x60; status - All updates are allowed on Plan with &#x60;DRAFT&#x60; status  Plan in &#x60;ACTIVE&#x60; status [Following fields are **Not Updatable**] - &#x60;planInformation.billingPeriod&#x60; - &#x60;planInformation.billingCycles&#x60; [Update is only allowed to **increase** billingCycles] - &#x60;orderInformation.amountDetails.currency&#x60; 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePlanTest() throws ApiException {
        String id = null;
        UpdatePlanRequest updatePlanRequest = null;
        InlineResponse2003 response = api.updatePlan(id, updatePlanRequest);

        // TODO: test validations
    }
    
}
