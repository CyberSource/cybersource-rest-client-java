/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Model.ActivateDeactivatePlanResponse;
import Model.CreatePlanRequest;
import Model.CreatePlanResponse;
import Model.DeletePlanResponse;
import Model.GetAllPlansResponse;
import Model.GetPlanCodeResponse;
import Model.GetPlanResponse;
import Model.InlineResponse4002;
import Model.InlineResponse404;
import Model.PtsV2PaymentsPost502Response;
import Model.UpdatePlanRequest;
import Model.UpdatePlanResponse;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PlansApi
 */
@Ignore
public class PlansApiTest {

    private final PlansApi api = new PlansApi();

    
    /**
     * Activate a Plan
     *
     * Activate a Plan
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void activatePlanTest() throws Exception {
        String id = null;
        ActivateDeactivatePlanResponse response = api.activatePlan(id);

        // TODO: test validations
    }
    
    /**
     * Create a Plan
     *
     * The recurring billing service enables you to manage payment plans and subscriptions for recurring payment schedules. It securely stores your customer&#39;s payment information and personal data within secure Visa data centers, reducing storage risks and PCI DSS scope through the use of *Token Management* (*TMS*).  The three key elements of *Cybersource* Recurring Billing are:  -  **Token**: stores customer billing, shipping, and payment details.  -  **Plan**: stores the billing schedule.  -  **Subscription**: combines the token and plan, and defines the subscription start date, name, and description.  The APIs in this section demonstrate the management of the Plans and Subscriptions. For Tokens please refer to [Token Management](#token-management) 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void createPlanTest() throws Exception {
        CreatePlanRequest createPlanRequest = null;
        CreatePlanResponse response = api.createPlan(createPlanRequest);

        // TODO: test validations
    }
    
    /**
     * Deactivate a Plan
     *
     * Deactivate a Plan
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deactivatePlanTest() throws Exception {
        String id = null;
        ActivateDeactivatePlanResponse response = api.deactivatePlan(id);

        // TODO: test validations
    }
    
    /**
     * Delete a Plan
     *
     * Delete a Plan is only allowed: - plan status is in &#x60;DRAFT&#x60; - plan status is in &#x60;ACTIVE&#x60;, and &#x60;INACTIVE&#x60; only allowed when no subscriptions attached to a plan in the lifetime of a plan 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePlanTest() throws Exception {
        String id = null;
        DeletePlanResponse response = api.deletePlan(id);

        // TODO: test validations
    }
    
    /**
     * Get a Plan
     *
     * Retrieve a Plan details by Plan Id.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPlanTest() throws Exception {
        String id = null;
        GetPlanResponse response = api.getPlan(id);

        // TODO: test validations
    }
    
    /**
     * Get a Plan Code
     *
     * Get a Unique Plan Code
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPlanCodeTest() throws Exception {
        GetPlanCodeResponse response = api.getPlanCode();

        // TODO: test validations
    }
    
    /**
     * Get a List of Plans
     *
     * Retrieve Plans by Plan Code &amp; Plan Status. 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPlansTest() throws Exception {
        Integer offset = null;
        Integer limit = null;
        String code = null;
        String status = null;
        String name = null;
        GetAllPlansResponse response = api.getPlans(offset, limit, code, status, name);

        // TODO: test validations
    }
    
    /**
     * Update a Plan
     *
     * Update a Plan  Plan in &#x60;DRAFT&#x60; status - All updates are allowed on Plan with &#x60;DRAFT&#x60; status  Plan in &#x60;ACTIVE&#x60; status [Following fields are **Not Updatable**] - &#x60;planInformation.billingPeriod&#x60; - &#x60;planInformation.billingCycles&#x60; [Update is only allowed to **increase** billingCycles] - &#x60;orderInformation.amountDetails.currency&#x60; 
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updatePlanTest() throws Exception {
        String id = null;
        UpdatePlanRequest updatePlanRequest = null;
        UpdatePlanResponse response = api.updatePlan(id, updatePlanRequest);

        // TODO: test validations
    }
    
}
