/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Invokers.ApiException;
import Model.InlineResponse2004;
import Model.InlineResponse2014;
import Model.InlineResponse4042;
import Model.ReplayWebhooks;
import Model.SaveAsymEgressKey;
import Model.UpdateWebhook;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManageWebhooksApi
 */
@Ignore
public class ManageWebhooksApiTest {

    private final ManageWebhooksApi api = new ManageWebhooksApi();

    
    /**
     * Get Details On All Created Webhooks
     *
     * Retrieve a list of all previously created webhooks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationSubscriptionsV1WebhooksGetTest() throws ApiException {
        String organizationId = null;
        String productId = null;
        String eventType = null;
        List<InlineResponse2004> response = api.notificationSubscriptionsV1WebhooksGet(organizationId, productId, eventType);

        // TODO: test validations
    }
    
    /**
     * Delete a Webhook Subscription
     *
     * Delete the webhook. Please note that deleting a particular webhook does not delete the history of the webhook notifications.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationSubscriptionsV1WebhooksWebhookIdDeleteTest() throws ApiException {
        String webhookId = null;
        api.notificationSubscriptionsV1WebhooksWebhookIdDelete(webhookId);

        // TODO: test validations
    }
    
    /**
     * Get Details On a Single Webhook
     *
     * Retrieve the details of a specific webhook by supplying the webhook ID in the path.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationSubscriptionsV1WebhooksWebhookIdGetTest() throws ApiException {
        String webhookId = null;
        InlineResponse2004 response = api.notificationSubscriptionsV1WebhooksWebhookIdGet(webhookId);

        // TODO: test validations
    }
    
    /**
     * Update a Webhook Subscription
     *
     * Update the webhook subscription using PATCH.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void notificationSubscriptionsV1WebhooksWebhookIdPatchTest() throws ApiException {
        String webhookId = null;
        UpdateWebhook updateWebhook = null;
        api.notificationSubscriptionsV1WebhooksWebhookIdPatch(webhookId, updateWebhook);

        // TODO: test validations
    }
    
    /**
     * Replay Previous Webhooks
     *
     * Initiate a webhook replay request to replay transactions that happened in the past.  Cannot execute more than 1 replay request at a time. While one request is processing, you will not be allowed to execute another replay.  The difference between Start and End time cannot exceed a 24 hour window, and 1 month is the farthest date back that is eligible for replay. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void nrtfV1WebhooksWebhookIdReplaysPostTest() throws ApiException {
        String webhookId = null;
        ReplayWebhooks replayWebhooks = null;
        api.nrtfV1WebhooksWebhookIdReplaysPost(webhookId, replayWebhooks);

        // TODO: test validations
    }
    
    /**
     * Message Level Encryption
     *
     * Store and manage certificates that will be used to preform Message Level Encryption (MLE). Each new webhook will need its own unique asymmetric certificate. You can either use a digital certificate issued/signed by a CA or self-sign your own using the documentation available on the Developer Guide. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveAsymEgressKeyTest() throws ApiException {
        String vCSenderOrganizationId = null;
        String vCPermissions = null;
        SaveAsymEgressKey saveAsymEgressKey = null;
        String vCCorrelationId = null;
        InlineResponse2014 response = api.saveAsymEgressKey(vCSenderOrganizationId, vCPermissions, saveAsymEgressKey, vCCorrelationId);

        // TODO: test validations
    }
    
}
