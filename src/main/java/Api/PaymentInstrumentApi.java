/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Invokers.ApiCallback;
import Invokers.ApiClient;
import Invokers.ApiException;
import Invokers.ApiResponse;
import Invokers.Configuration;
import Invokers.Pair;
import Invokers.ProgressRequestBody;
import Invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import Model.CreatePaymentInstrumentRequest;
import Model.InlineResponse4001;
import Model.TmsV1PaymentinstrumentsPatch200Response;
import Model.UpdatePaymentInstrumentRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentInstrumentApi {
    private ApiClient apiClient;

    public PaymentInstrumentApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentInstrumentApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createPaymentInstrument
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param createPaymentInstrumentRequest Specify the customer&#39;s payment details for card or bank account. (required)
     * @param clientApplication Client application name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call createPaymentInstrumentCall(String profileId, String vCMerchantId, String vCCorrelationId, CreatePaymentInstrumentRequest createPaymentInstrumentRequest, String clientApplication, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createPaymentInstrumentRequest;
        
        // create path and map variables
        String localVarPath = "/tms/v1/paymentinstruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));
        if (vCMerchantId != null)
        localVarHeaderParams.put("v-c-merchant-id", apiClient.parameterToString(vCMerchantId));
        if (vCCorrelationId != null)
        localVarHeaderParams.put("v-c-correlation-id", apiClient.parameterToString(vCCorrelationId));
        if (clientApplication != null)
        localVarHeaderParams.put("Client-Application", apiClient.parameterToString(clientApplication));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createPaymentInstrumentValidateBeforeCall(String profileId, String vCMerchantId, String vCCorrelationId, CreatePaymentInstrumentRequest createPaymentInstrumentRequest, String clientApplication, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling createPaymentInstrument(Async)");
        }
        
        // verify the required parameter 'vCMerchantId' is set
        if (vCMerchantId == null) {
            throw new ApiException("Missing the required parameter 'vCMerchantId' when calling createPaymentInstrument(Async)");
        }
        
        // verify the required parameter 'vCCorrelationId' is set
        if (vCCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'vCCorrelationId' when calling createPaymentInstrument(Async)");
        }
        
        // verify the required parameter 'createPaymentInstrumentRequest' is set
        if (createPaymentInstrumentRequest == null) {
            throw new ApiException("Missing the required parameter 'createPaymentInstrumentRequest' when calling createPaymentInstrument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createPaymentInstrumentCall(profileId, vCMerchantId, vCCorrelationId, createPaymentInstrumentRequest, clientApplication, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param createPaymentInstrumentRequest Specify the customer&#39;s payment details for card or bank account. (required)
     * @param clientApplication Client application name (optional)
     * @return TmsV1PaymentinstrumentsPatch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TmsV1PaymentinstrumentsPatch200Response createPaymentInstrument(String profileId, String vCMerchantId, String vCCorrelationId, CreatePaymentInstrumentRequest createPaymentInstrumentRequest, String clientApplication) throws ApiException {
        ApiResponse<TmsV1PaymentinstrumentsPatch200Response> resp = createPaymentInstrumentWithHttpInfo(profileId, vCMerchantId, vCCorrelationId, createPaymentInstrumentRequest, clientApplication);
        return resp.getData();
    }

    /**
     * Create a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param createPaymentInstrumentRequest Specify the customer&#39;s payment details for card or bank account. (required)
     * @param clientApplication Client application name (optional)
     * @return ApiResponse&lt;TmsV1PaymentinstrumentsPatch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TmsV1PaymentinstrumentsPatch200Response> createPaymentInstrumentWithHttpInfo(String profileId, String vCMerchantId, String vCCorrelationId, CreatePaymentInstrumentRequest createPaymentInstrumentRequest, String clientApplication) throws ApiException {
        com.squareup.okhttp.Call call = createPaymentInstrumentValidateBeforeCall(profileId, vCMerchantId, vCCorrelationId, createPaymentInstrumentRequest, clientApplication, null, null);
        Type localVarReturnType = new TypeToken<TmsV1PaymentinstrumentsPatch200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Payment Instrument (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param createPaymentInstrumentRequest Specify the customer&#39;s payment details for card or bank account. (required)
     * @param clientApplication Client application name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createPaymentInstrumentAsync(String profileId, String vCMerchantId, String vCCorrelationId, CreatePaymentInstrumentRequest createPaymentInstrumentRequest, String clientApplication, final ApiCallback<TmsV1PaymentinstrumentsPatch200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createPaymentInstrumentValidateBeforeCall(profileId, vCMerchantId, vCCorrelationId, createPaymentInstrumentRequest, clientApplication, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TmsV1PaymentinstrumentsPatch200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deletePaymentInstrument
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param clientApplication Client application name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deletePaymentInstrumentCall(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, String clientApplication, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tms/v1/paymentinstruments/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));
        if (vCMerchantId != null)
        localVarHeaderParams.put("v-c-merchant-id", apiClient.parameterToString(vCMerchantId));
        if (vCCorrelationId != null)
        localVarHeaderParams.put("v-c-correlation-id", apiClient.parameterToString(vCCorrelationId));
        if (clientApplication != null)
        localVarHeaderParams.put("Client-Application", apiClient.parameterToString(clientApplication));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deletePaymentInstrumentValidateBeforeCall(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, String clientApplication, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling deletePaymentInstrument(Async)");
        }
        
        // verify the required parameter 'vCMerchantId' is set
        if (vCMerchantId == null) {
            throw new ApiException("Missing the required parameter 'vCMerchantId' when calling deletePaymentInstrument(Async)");
        }
        
        // verify the required parameter 'vCCorrelationId' is set
        if (vCCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'vCCorrelationId' when calling deletePaymentInstrument(Async)");
        }
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling deletePaymentInstrument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deletePaymentInstrumentCall(profileId, vCMerchantId, vCCorrelationId, tokenId, clientApplication, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param clientApplication Client application name (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deletePaymentInstrument(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, String clientApplication) throws ApiException {
        deletePaymentInstrumentWithHttpInfo(profileId, vCMerchantId, vCCorrelationId, tokenId, clientApplication);
    }

    /**
     * Delete a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param clientApplication Client application name (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deletePaymentInstrumentWithHttpInfo(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, String clientApplication) throws ApiException {
        com.squareup.okhttp.Call call = deletePaymentInstrumentValidateBeforeCall(profileId, vCMerchantId, vCCorrelationId, tokenId, clientApplication, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Payment Instrument (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param clientApplication Client application name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deletePaymentInstrumentAsync(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, String clientApplication, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deletePaymentInstrumentValidateBeforeCall(profileId, vCMerchantId, vCCorrelationId, tokenId, clientApplication, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getPaymentInstrument
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param clientApplication Client application name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPaymentInstrumentCall(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, String clientApplication, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tms/v1/paymentinstruments/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));
        if (vCMerchantId != null)
        localVarHeaderParams.put("v-c-merchant-id", apiClient.parameterToString(vCMerchantId));
        if (vCCorrelationId != null)
        localVarHeaderParams.put("v-c-correlation-id", apiClient.parameterToString(vCCorrelationId));
        if (clientApplication != null)
        localVarHeaderParams.put("Client-Application", apiClient.parameterToString(clientApplication));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPaymentInstrumentValidateBeforeCall(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, String clientApplication, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getPaymentInstrument(Async)");
        }
        
        // verify the required parameter 'vCMerchantId' is set
        if (vCMerchantId == null) {
            throw new ApiException("Missing the required parameter 'vCMerchantId' when calling getPaymentInstrument(Async)");
        }
        
        // verify the required parameter 'vCCorrelationId' is set
        if (vCCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'vCCorrelationId' when calling getPaymentInstrument(Async)");
        }
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getPaymentInstrument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPaymentInstrumentCall(profileId, vCMerchantId, vCCorrelationId, tokenId, clientApplication, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param clientApplication Client application name (optional)
     * @return TmsV1PaymentinstrumentsPatch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TmsV1PaymentinstrumentsPatch200Response getPaymentInstrument(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, String clientApplication) throws ApiException {
        ApiResponse<TmsV1PaymentinstrumentsPatch200Response> resp = getPaymentInstrumentWithHttpInfo(profileId, vCMerchantId, vCCorrelationId, tokenId, clientApplication);
        return resp.getData();
    }

    /**
     * Retrieve a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param clientApplication Client application name (optional)
     * @return ApiResponse&lt;TmsV1PaymentinstrumentsPatch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TmsV1PaymentinstrumentsPatch200Response> getPaymentInstrumentWithHttpInfo(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, String clientApplication) throws ApiException {
        com.squareup.okhttp.Call call = getPaymentInstrumentValidateBeforeCall(profileId, vCMerchantId, vCCorrelationId, tokenId, clientApplication, null, null);
        Type localVarReturnType = new TypeToken<TmsV1PaymentinstrumentsPatch200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Payment Instrument (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param clientApplication Client application name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPaymentInstrumentAsync(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, String clientApplication, final ApiCallback<TmsV1PaymentinstrumentsPatch200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPaymentInstrumentValidateBeforeCall(profileId, vCMerchantId, vCCorrelationId, tokenId, clientApplication, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TmsV1PaymentinstrumentsPatch200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updatePaymentInstrument
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param updatePaymentInstrumentRequest Specify the customer&#39;s payment details. (required)
     * @param clientApplication Client application name (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call updatePaymentInstrumentCall(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, UpdatePaymentInstrumentRequest updatePaymentInstrumentRequest, String clientApplication, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updatePaymentInstrumentRequest;
        
        // create path and map variables
        String localVarPath = "/tms/v1/paymentinstruments/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));
        if (vCMerchantId != null)
        localVarHeaderParams.put("v-c-merchant-id", apiClient.parameterToString(vCMerchantId));
        if (vCCorrelationId != null)
        localVarHeaderParams.put("v-c-correlation-id", apiClient.parameterToString(vCCorrelationId));
        if (clientApplication != null)
        localVarHeaderParams.put("Client-Application", apiClient.parameterToString(clientApplication));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call updatePaymentInstrumentValidateBeforeCall(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, UpdatePaymentInstrumentRequest updatePaymentInstrumentRequest, String clientApplication, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling updatePaymentInstrument(Async)");
        }
        
        // verify the required parameter 'vCMerchantId' is set
        if (vCMerchantId == null) {
            throw new ApiException("Missing the required parameter 'vCMerchantId' when calling updatePaymentInstrument(Async)");
        }
        
        // verify the required parameter 'vCCorrelationId' is set
        if (vCCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'vCCorrelationId' when calling updatePaymentInstrument(Async)");
        }
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling updatePaymentInstrument(Async)");
        }
        
        // verify the required parameter 'updatePaymentInstrumentRequest' is set
        if (updatePaymentInstrumentRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePaymentInstrumentRequest' when calling updatePaymentInstrument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = updatePaymentInstrumentCall(profileId, vCMerchantId, vCCorrelationId, tokenId, updatePaymentInstrumentRequest, clientApplication, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param updatePaymentInstrumentRequest Specify the customer&#39;s payment details. (required)
     * @param clientApplication Client application name (optional)
     * @return TmsV1PaymentinstrumentsPatch200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TmsV1PaymentinstrumentsPatch200Response updatePaymentInstrument(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, UpdatePaymentInstrumentRequest updatePaymentInstrumentRequest, String clientApplication) throws ApiException {
        ApiResponse<TmsV1PaymentinstrumentsPatch200Response> resp = updatePaymentInstrumentWithHttpInfo(profileId, vCMerchantId, vCCorrelationId, tokenId, updatePaymentInstrumentRequest, clientApplication);
        return resp.getData();
    }

    /**
     * Update a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param updatePaymentInstrumentRequest Specify the customer&#39;s payment details. (required)
     * @param clientApplication Client application name (optional)
     * @return ApiResponse&lt;TmsV1PaymentinstrumentsPatch200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TmsV1PaymentinstrumentsPatch200Response> updatePaymentInstrumentWithHttpInfo(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, UpdatePaymentInstrumentRequest updatePaymentInstrumentRequest, String clientApplication) throws ApiException {
        com.squareup.okhttp.Call call = updatePaymentInstrumentValidateBeforeCall(profileId, vCMerchantId, vCCorrelationId, tokenId, updatePaymentInstrumentRequest, clientApplication, null, null);
        Type localVarReturnType = new TypeToken<TmsV1PaymentinstrumentsPatch200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Payment Instrument (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param vCMerchantId CyberSource merchant id. (required)
     * @param vCCorrelationId The mandatory correlation id passed by upstream (calling) system. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param updatePaymentInstrumentRequest Specify the customer&#39;s payment details. (required)
     * @param clientApplication Client application name (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updatePaymentInstrumentAsync(String profileId, String vCMerchantId, String vCCorrelationId, String tokenId, UpdatePaymentInstrumentRequest updatePaymentInstrumentRequest, String clientApplication, final ApiCallback<TmsV1PaymentinstrumentsPatch200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updatePaymentInstrumentValidateBeforeCall(profileId, vCMerchantId, vCCorrelationId, tokenId, updatePaymentInstrumentRequest, clientApplication, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TmsV1PaymentinstrumentsPatch200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
