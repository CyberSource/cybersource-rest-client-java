/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Invokers.ApiCallback;
import Invokers.ApiClient;
import Invokers.ApiException;
import Invokers.ApiResponse;
import Invokers.Configuration;
import Invokers.Pair;
import Invokers.ProgressRequestBody;
import Invokers.ProgressResponseBody;

import com.cybersource.authsdk.core.ConfigException;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.io.InputStream;


import Model.InlineResponse20014;
import Model.InlineResponse2018;
import Model.InlineResponse40010;
import Model.InlineResponse5022;
import Model.OfferRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import utilities.tracking.SdkTracker;
import com.cybersource.authsdk.util.mle.MLEUtility;
import com.cybersource.authsdk.util.mle.MLEException;

public class OffersApi {
    private static Logger logger = LogManager.getLogger(OffersApi.class);
    
    private ApiClient apiClient;

    public OffersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OffersApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createOffer
     * @param contentType  (required)
     * @param xRequestid  (required)
     * @param vCMerchantId  (required)
     * @param vCCorrelationId  (required)
     * @param vCOrganizationId  (required)
     * @param offerRequest  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public okhttp3.Call createOfferCall(String contentType, String xRequestid, String vCMerchantId, String vCCorrelationId, String vCOrganizationId, OfferRequest offerRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, ConfigException {
        SdkTracker sdkTracker = new SdkTracker();
        Object localVarPostBody = sdkTracker.insertDeveloperIdTracker(offerRequest, OfferRequest.class.getSimpleName(), apiClient.merchantConfig.getRunEnvironment(), apiClient.merchantConfig.getDefaultDeveloperId());
        
        String inboundMLEStatus = "false";

        if (MLEUtility.checkIsMLEForAPI(apiClient.merchantConfig, inboundMLEStatus, "createOffer,createOfferAsync,createOfferWithHttpInfo,createOfferCall")) {
            try {
                localVarPostBody = MLEUtility.encryptRequestPayload(apiClient.merchantConfig, localVarPostBody);
            } catch (MLEException e) {
                logger.error("Failed to encrypt request body {}", e.getMessage(), e);
                throw new ApiException("Failed to encrypt request body : " + e.getMessage());
            }
        }
        
        // create path and map variables
        String localVarPath = "/vas/v1/currencyconversion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (xRequestid != null)
        localVarHeaderParams.put("x-requestid", apiClient.parameterToString(xRequestid));
        if (vCMerchantId != null)
        localVarHeaderParams.put("v-c-merchant-id", apiClient.parameterToString(vCMerchantId));
        if (vCCorrelationId != null)
        localVarHeaderParams.put("v-c-correlation-id", apiClient.parameterToString(vCCorrelationId));
        if (vCOrganizationId != null)
        localVarHeaderParams.put("v-c-organization-id", apiClient.parameterToString(vCOrganizationId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/hal+json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOfferValidateBeforeCall(String contentType, String xRequestid, String vCMerchantId, String vCCorrelationId, String vCOrganizationId, OfferRequest offerRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, ConfigException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            logger.error("Missing the required parameter 'contentType' when calling createOffer(Async)");
            throw new ApiException("Missing the required parameter 'contentType' when calling createOffer(Async)");
        }
        
        // verify the required parameter 'xRequestid' is set
        if (xRequestid == null) {
            logger.error("Missing the required parameter 'xRequestid' when calling createOffer(Async)");
            throw new ApiException("Missing the required parameter 'xRequestid' when calling createOffer(Async)");
        }
        
        // verify the required parameter 'vCMerchantId' is set
        if (vCMerchantId == null) {
            logger.error("Missing the required parameter 'vCMerchantId' when calling createOffer(Async)");
            throw new ApiException("Missing the required parameter 'vCMerchantId' when calling createOffer(Async)");
        }
        
        // verify the required parameter 'vCCorrelationId' is set
        if (vCCorrelationId == null) {
            logger.error("Missing the required parameter 'vCCorrelationId' when calling createOffer(Async)");
            throw new ApiException("Missing the required parameter 'vCCorrelationId' when calling createOffer(Async)");
        }
        
        // verify the required parameter 'vCOrganizationId' is set
        if (vCOrganizationId == null) {
            logger.error("Missing the required parameter 'vCOrganizationId' when calling createOffer(Async)");
            throw new ApiException("Missing the required parameter 'vCOrganizationId' when calling createOffer(Async)");
        }
        
        // verify the required parameter 'offerRequest' is set
        if (offerRequest == null) {
            logger.error("Missing the required parameter 'offerRequest' when calling createOffer(Async)");
            throw new ApiException("Missing the required parameter 'offerRequest' when calling createOffer(Async)");
        }
        
        
        okhttp3.Call call = createOfferCall(contentType, xRequestid, vCMerchantId, vCCorrelationId, vCOrganizationId, offerRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an Offer
     * Creates an offer record on the provider system. 
     * @param contentType  (required)
     * @param xRequestid  (required)
     * @param vCMerchantId  (required)
     * @param vCCorrelationId  (required)
     * @param vCOrganizationId  (required)
     * @param offerRequest  (required)
     * @return InlineResponse2018
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public InlineResponse2018 createOffer(String contentType, String xRequestid, String vCMerchantId, String vCCorrelationId, String vCOrganizationId, OfferRequest offerRequest) throws ApiException, ConfigException {
        logger.info("CALL TO METHOD 'createOffer' STARTED");
        ApiResponse<InlineResponse2018> resp = createOfferWithHttpInfo(contentType, xRequestid, vCMerchantId, vCCorrelationId, vCOrganizationId, offerRequest);
        logger.info("CALL TO METHOD 'createOffer' ENDED");
        return resp.getData();
    }

    /**
     * Create an Offer
     * Creates an offer record on the provider system. 
     * @param contentType  (required)
     * @param xRequestid  (required)
     * @param vCMerchantId  (required)
     * @param vCCorrelationId  (required)
     * @param vCOrganizationId  (required)
     * @param offerRequest  (required)
     * @return ApiResponse&lt;InlineResponse2018&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public ApiResponse<InlineResponse2018> createOfferWithHttpInfo(String contentType, String xRequestid, String vCMerchantId, String vCCorrelationId, String vCOrganizationId, OfferRequest offerRequest) throws ApiException, ConfigException {
        this.apiClient.setComputationStartTime(System.nanoTime());
        okhttp3.Call call = createOfferValidateBeforeCall(contentType, xRequestid, vCMerchantId, vCCorrelationId, vCOrganizationId, offerRequest, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse2018>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an Offer (asynchronously)
     * Creates an offer record on the provider system. 
     * @param contentType  (required)
     * @param xRequestid  (required)
     * @param vCMerchantId  (required)
     * @param vCCorrelationId  (required)
     * @param vCOrganizationId  (required)
     * @param offerRequest  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public okhttp3.Call createOfferAsync(String contentType, String xRequestid, String vCMerchantId, String vCCorrelationId, String vCOrganizationId, OfferRequest offerRequest, final ApiCallback<InlineResponse2018> callback) throws ApiException, ConfigException {

        this.apiClient.setComputationStartTime(System.nanoTime());
        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = createOfferValidateBeforeCall(contentType, xRequestid, vCMerchantId, vCCorrelationId, vCOrganizationId, offerRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse2018>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOffer
     * @param contentType  (required)
     * @param xRequestid  (required)
     * @param vCMerchantId  (required)
     * @param vCCorrelationId  (required)
     * @param vCOrganizationId  (required)
     * @param id Request ID generated by Cybersource. This was sent in the header on the request. Echo value from v-c-request-id (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public okhttp3.Call getOfferCall(String contentType, String xRequestid, String vCMerchantId, String vCCorrelationId, String vCOrganizationId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, ConfigException {
        SdkTracker sdkTracker = new SdkTracker();
        Object localVarPostBody = null;
        if ("GET".equalsIgnoreCase("POST")) {
            localVarPostBody = "{}";
        }
        
        String inboundMLEStatus = "false";

        if (MLEUtility.checkIsMLEForAPI(apiClient.merchantConfig, inboundMLEStatus, "getOffer,getOfferAsync,getOfferWithHttpInfo,getOfferCall")) {
            try {
                localVarPostBody = MLEUtility.encryptRequestPayload(apiClient.merchantConfig, localVarPostBody);
            } catch (MLEException e) {
                logger.error("Failed to encrypt request body {}", e.getMessage(), e);
                throw new ApiException("Failed to encrypt request body : " + e.getMessage());
            }
        }
        
        // create path and map variables
        String localVarPath = "/vas/v1/currencyconversion/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (xRequestid != null)
        localVarHeaderParams.put("x-requestid", apiClient.parameterToString(xRequestid));
        if (vCMerchantId != null)
        localVarHeaderParams.put("v-c-merchant-id", apiClient.parameterToString(vCMerchantId));
        if (vCCorrelationId != null)
        localVarHeaderParams.put("v-c-correlation-id", apiClient.parameterToString(vCCorrelationId));
        if (vCOrganizationId != null)
        localVarHeaderParams.put("v-c-organization-id", apiClient.parameterToString(vCOrganizationId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/hal+json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOfferValidateBeforeCall(String contentType, String xRequestid, String vCMerchantId, String vCCorrelationId, String vCOrganizationId, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, ConfigException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            logger.error("Missing the required parameter 'contentType' when calling getOffer(Async)");
            throw new ApiException("Missing the required parameter 'contentType' when calling getOffer(Async)");
        }
        
        // verify the required parameter 'xRequestid' is set
        if (xRequestid == null) {
            logger.error("Missing the required parameter 'xRequestid' when calling getOffer(Async)");
            throw new ApiException("Missing the required parameter 'xRequestid' when calling getOffer(Async)");
        }
        
        // verify the required parameter 'vCMerchantId' is set
        if (vCMerchantId == null) {
            logger.error("Missing the required parameter 'vCMerchantId' when calling getOffer(Async)");
            throw new ApiException("Missing the required parameter 'vCMerchantId' when calling getOffer(Async)");
        }
        
        // verify the required parameter 'vCCorrelationId' is set
        if (vCCorrelationId == null) {
            logger.error("Missing the required parameter 'vCCorrelationId' when calling getOffer(Async)");
            throw new ApiException("Missing the required parameter 'vCCorrelationId' when calling getOffer(Async)");
        }
        
        // verify the required parameter 'vCOrganizationId' is set
        if (vCOrganizationId == null) {
            logger.error("Missing the required parameter 'vCOrganizationId' when calling getOffer(Async)");
            throw new ApiException("Missing the required parameter 'vCOrganizationId' when calling getOffer(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            logger.error("Missing the required parameter 'id' when calling getOffer(Async)");
            throw new ApiException("Missing the required parameter 'id' when calling getOffer(Async)");
        }
        
        
        okhttp3.Call call = getOfferCall(contentType, xRequestid, vCMerchantId, vCCorrelationId, vCOrganizationId, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve an Offer
     * Retrieves an offer record from the system. 
     * @param contentType  (required)
     * @param xRequestid  (required)
     * @param vCMerchantId  (required)
     * @param vCCorrelationId  (required)
     * @param vCOrganizationId  (required)
     * @param id Request ID generated by Cybersource. This was sent in the header on the request. Echo value from v-c-request-id (required)
     * @return InlineResponse20014
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public InlineResponse20014 getOffer(String contentType, String xRequestid, String vCMerchantId, String vCCorrelationId, String vCOrganizationId, String id) throws ApiException, ConfigException {
        logger.info("CALL TO METHOD 'getOffer' STARTED");
        ApiResponse<InlineResponse20014> resp = getOfferWithHttpInfo(contentType, xRequestid, vCMerchantId, vCCorrelationId, vCOrganizationId, id);
        logger.info("CALL TO METHOD 'getOffer' ENDED");
        return resp.getData();
    }

    /**
     * Retrieve an Offer
     * Retrieves an offer record from the system. 
     * @param contentType  (required)
     * @param xRequestid  (required)
     * @param vCMerchantId  (required)
     * @param vCCorrelationId  (required)
     * @param vCOrganizationId  (required)
     * @param id Request ID generated by Cybersource. This was sent in the header on the request. Echo value from v-c-request-id (required)
     * @return ApiResponse&lt;InlineResponse20014&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public ApiResponse<InlineResponse20014> getOfferWithHttpInfo(String contentType, String xRequestid, String vCMerchantId, String vCCorrelationId, String vCOrganizationId, String id) throws ApiException, ConfigException {
        this.apiClient.setComputationStartTime(System.nanoTime());
        okhttp3.Call call = getOfferValidateBeforeCall(contentType, xRequestid, vCMerchantId, vCCorrelationId, vCOrganizationId, id, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an Offer (asynchronously)
     * Retrieves an offer record from the system. 
     * @param contentType  (required)
     * @param xRequestid  (required)
     * @param vCMerchantId  (required)
     * @param vCCorrelationId  (required)
     * @param vCOrganizationId  (required)
     * @param id Request ID generated by Cybersource. This was sent in the header on the request. Echo value from v-c-request-id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public okhttp3.Call getOfferAsync(String contentType, String xRequestid, String vCMerchantId, String vCCorrelationId, String vCOrganizationId, String id, final ApiCallback<InlineResponse20014> callback) throws ApiException, ConfigException {

        this.apiClient.setComputationStartTime(System.nanoTime());
        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getOfferValidateBeforeCall(contentType, xRequestid, vCMerchantId, vCCorrelationId, vCOrganizationId, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse20014>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
