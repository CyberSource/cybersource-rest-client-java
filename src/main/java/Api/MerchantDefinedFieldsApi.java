/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Invokers.ApiCallback;
import Invokers.ApiClient;
import Invokers.ApiException;
import Invokers.ApiResponse;
import Invokers.Configuration;
import Invokers.Pair;
import Invokers.ProgressRequestBody;
import Invokers.ProgressResponseBody;

import com.cybersource.authsdk.core.ConfigException;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.io.InputStream;


import Model.InlineResponse2002;
import Model.InlineResponse4041;
import Model.MerchantDefinedFieldCore;
import Model.MerchantDefinedFieldDefinitionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import utilities.tracking.SdkTracker;
import com.cybersource.authsdk.util.mle.MLEUtility;
import com.cybersource.authsdk.util.mle.MLEException;

public class MerchantDefinedFieldsApi {
    private static Logger logger = LogManager.getLogger(MerchantDefinedFieldsApi.class);
    
    private ApiClient apiClient;

    public MerchantDefinedFieldsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantDefinedFieldsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createMerchantDefinedFieldDefinition
     * @param referenceType The reference type for which merchant defined fields are to be fetched. Available values are Invoice, Purchase, Donation (required)
     * @param merchantDefinedFieldDefinitionRequest  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public okhttp3.Call createMerchantDefinedFieldDefinitionCall(String referenceType, MerchantDefinedFieldDefinitionRequest merchantDefinedFieldDefinitionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, ConfigException {
        SdkTracker sdkTracker = new SdkTracker();
        Object localVarPostBody = sdkTracker.insertDeveloperIdTracker(merchantDefinedFieldDefinitionRequest, MerchantDefinedFieldDefinitionRequest.class.getSimpleName(), apiClient.merchantConfig.getRunEnvironment(), apiClient.merchantConfig.getDefaultDeveloperId());
        
        String inboundMLEStatus = "false";

        if (MLEUtility.checkIsMLEForAPI(apiClient.merchantConfig, inboundMLEStatus, "createMerchantDefinedFieldDefinition,createMerchantDefinedFieldDefinitionAsync,createMerchantDefinedFieldDefinitionWithHttpInfo,createMerchantDefinedFieldDefinitionCall")) {
            try {
                localVarPostBody = MLEUtility.encryptRequestPayload(apiClient.merchantConfig, localVarPostBody);
            } catch (MLEException e) {
                logger.error("Failed to encrypt request body {}", e.getMessage(), e);
                throw new ApiException("Failed to encrypt request body : " + e.getMessage());
            }
        }
        
        // create path and map variables
        String localVarPath = "/invoicing/v2/{referenceType}/merchantDefinedFields"
            .replaceAll("\\{" + "referenceType" + "\\}", apiClient.escapeString(referenceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMerchantDefinedFieldDefinitionValidateBeforeCall(String referenceType, MerchantDefinedFieldDefinitionRequest merchantDefinedFieldDefinitionRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, ConfigException {
        
        // verify the required parameter 'referenceType' is set
        if (referenceType == null) {
            logger.error("Missing the required parameter 'referenceType' when calling createMerchantDefinedFieldDefinition(Async)");
            throw new ApiException("Missing the required parameter 'referenceType' when calling createMerchantDefinedFieldDefinition(Async)");
        }
        
        // verify the required parameter 'merchantDefinedFieldDefinitionRequest' is set
        if (merchantDefinedFieldDefinitionRequest == null) {
            logger.error("Missing the required parameter 'merchantDefinedFieldDefinitionRequest' when calling createMerchantDefinedFieldDefinition(Async)");
            throw new ApiException("Missing the required parameter 'merchantDefinedFieldDefinitionRequest' when calling createMerchantDefinedFieldDefinition(Async)");
        }
        
        
        okhttp3.Call call = createMerchantDefinedFieldDefinitionCall(referenceType, merchantDefinedFieldDefinitionRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create merchant defined field for a given reference type
     * 
     * @param referenceType The reference type for which merchant defined fields are to be fetched. Available values are Invoice, Purchase, Donation (required)
     * @param merchantDefinedFieldDefinitionRequest  (required)
     * @return List&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public List<InlineResponse2002> createMerchantDefinedFieldDefinition(String referenceType, MerchantDefinedFieldDefinitionRequest merchantDefinedFieldDefinitionRequest) throws ApiException, ConfigException {
        logger.info("CALL TO METHOD 'createMerchantDefinedFieldDefinition' STARTED");
        ApiResponse<List<InlineResponse2002>> resp = createMerchantDefinedFieldDefinitionWithHttpInfo(referenceType, merchantDefinedFieldDefinitionRequest);
        logger.info("CALL TO METHOD 'createMerchantDefinedFieldDefinition' ENDED");
        return resp.getData();
    }

    /**
     * Create merchant defined field for a given reference type
     * 
     * @param referenceType The reference type for which merchant defined fields are to be fetched. Available values are Invoice, Purchase, Donation (required)
     * @param merchantDefinedFieldDefinitionRequest  (required)
     * @return ApiResponse&lt;List&lt;InlineResponse2002&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public ApiResponse<List<InlineResponse2002>> createMerchantDefinedFieldDefinitionWithHttpInfo(String referenceType, MerchantDefinedFieldDefinitionRequest merchantDefinedFieldDefinitionRequest) throws ApiException, ConfigException {
        this.apiClient.setComputationStartTime(System.nanoTime());
        okhttp3.Call call = createMerchantDefinedFieldDefinitionValidateBeforeCall(referenceType, merchantDefinedFieldDefinitionRequest, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2002>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create merchant defined field for a given reference type (asynchronously)
     * 
     * @param referenceType The reference type for which merchant defined fields are to be fetched. Available values are Invoice, Purchase, Donation (required)
     * @param merchantDefinedFieldDefinitionRequest  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public okhttp3.Call createMerchantDefinedFieldDefinitionAsync(String referenceType, MerchantDefinedFieldDefinitionRequest merchantDefinedFieldDefinitionRequest, final ApiCallback<List<InlineResponse2002>> callback) throws ApiException, ConfigException {

        this.apiClient.setComputationStartTime(System.nanoTime());
        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = createMerchantDefinedFieldDefinitionValidateBeforeCall(referenceType, merchantDefinedFieldDefinitionRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2002>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteMerchantDefinedFieldsDefinitions
     * @param referenceType  (required)
     * @param id  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public okhttp3.Call deleteMerchantDefinedFieldsDefinitionsCall(String referenceType, Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, ConfigException {
        SdkTracker sdkTracker = new SdkTracker();
        Object localVarPostBody = null;
        if ("DELETE".equalsIgnoreCase("POST")) {
            localVarPostBody = "{}";
        }
        
        String inboundMLEStatus = "false";

        if (MLEUtility.checkIsMLEForAPI(apiClient.merchantConfig, inboundMLEStatus, "deleteMerchantDefinedFieldsDefinitions,deleteMerchantDefinedFieldsDefinitionsAsync,deleteMerchantDefinedFieldsDefinitionsWithHttpInfo,deleteMerchantDefinedFieldsDefinitionsCall")) {
            try {
                localVarPostBody = MLEUtility.encryptRequestPayload(apiClient.merchantConfig, localVarPostBody);
            } catch (MLEException e) {
                logger.error("Failed to encrypt request body {}", e.getMessage(), e);
                throw new ApiException("Failed to encrypt request body : " + e.getMessage());
            }
        }
        
        // create path and map variables
        String localVarPath = "/invoicing/v2/{referenceType}/merchantDefinedFields/{id}"
            .replaceAll("\\{" + "referenceType" + "\\}", apiClient.escapeString(referenceType.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/hal+json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMerchantDefinedFieldsDefinitionsValidateBeforeCall(String referenceType, Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, ConfigException {
        
        // verify the required parameter 'referenceType' is set
        if (referenceType == null) {
            logger.error("Missing the required parameter 'referenceType' when calling deleteMerchantDefinedFieldsDefinitions(Async)");
            throw new ApiException("Missing the required parameter 'referenceType' when calling deleteMerchantDefinedFieldsDefinitions(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            logger.error("Missing the required parameter 'id' when calling deleteMerchantDefinedFieldsDefinitions(Async)");
            throw new ApiException("Missing the required parameter 'id' when calling deleteMerchantDefinedFieldsDefinitions(Async)");
        }
        
        
        okhttp3.Call call = deleteMerchantDefinedFieldsDefinitionsCall(referenceType, id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a MerchantDefinedField by ID
     * 
     * @param referenceType  (required)
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public void deleteMerchantDefinedFieldsDefinitions(String referenceType, Long id) throws ApiException, ConfigException {
        logger.info("CALL TO METHOD 'deleteMerchantDefinedFieldsDefinitions' STARTED");
        deleteMerchantDefinedFieldsDefinitionsWithHttpInfo(referenceType, id);

    }

    /**
     * Delete a MerchantDefinedField by ID
     * 
     * @param referenceType  (required)
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public ApiResponse<Void> deleteMerchantDefinedFieldsDefinitionsWithHttpInfo(String referenceType, Long id) throws ApiException, ConfigException {
        this.apiClient.setComputationStartTime(System.nanoTime());
        okhttp3.Call call = deleteMerchantDefinedFieldsDefinitionsValidateBeforeCall(referenceType, id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a MerchantDefinedField by ID (asynchronously)
     * 
     * @param referenceType  (required)
     * @param id  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public okhttp3.Call deleteMerchantDefinedFieldsDefinitionsAsync(String referenceType, Long id, final ApiCallback<Void> callback) throws ApiException, ConfigException {

        this.apiClient.setComputationStartTime(System.nanoTime());
        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = deleteMerchantDefinedFieldsDefinitionsValidateBeforeCall(referenceType, id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getMerchantDefinedFieldsDefinitions
     * @param referenceType The reference type for which merchant defined fields are to be fetched. Available values are Invoice, Purchase, Donation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public okhttp3.Call getMerchantDefinedFieldsDefinitionsCall(String referenceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, ConfigException {
        SdkTracker sdkTracker = new SdkTracker();
        Object localVarPostBody = null;
        if ("GET".equalsIgnoreCase("POST")) {
            localVarPostBody = "{}";
        }
        
        String inboundMLEStatus = "false";

        if (MLEUtility.checkIsMLEForAPI(apiClient.merchantConfig, inboundMLEStatus, "getMerchantDefinedFieldsDefinitions,getMerchantDefinedFieldsDefinitionsAsync,getMerchantDefinedFieldsDefinitionsWithHttpInfo,getMerchantDefinedFieldsDefinitionsCall")) {
            try {
                localVarPostBody = MLEUtility.encryptRequestPayload(apiClient.merchantConfig, localVarPostBody);
            } catch (MLEException e) {
                logger.error("Failed to encrypt request body {}", e.getMessage(), e);
                throw new ApiException("Failed to encrypt request body : " + e.getMessage());
            }
        }
        
        // create path and map variables
        String localVarPath = "/invoicing/v2/{referenceType}/merchantDefinedFields"
            .replaceAll("\\{" + "referenceType" + "\\}", apiClient.escapeString(referenceType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantDefinedFieldsDefinitionsValidateBeforeCall(String referenceType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, ConfigException {
        
        // verify the required parameter 'referenceType' is set
        if (referenceType == null) {
            logger.error("Missing the required parameter 'referenceType' when calling getMerchantDefinedFieldsDefinitions(Async)");
            throw new ApiException("Missing the required parameter 'referenceType' when calling getMerchantDefinedFieldsDefinitions(Async)");
        }
        
        
        okhttp3.Call call = getMerchantDefinedFieldsDefinitionsCall(referenceType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all merchant defined fields for a given reference type
     * 
     * @param referenceType The reference type for which merchant defined fields are to be fetched. Available values are Invoice, Purchase, Donation (required)
     * @return List&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public List<InlineResponse2002> getMerchantDefinedFieldsDefinitions(String referenceType) throws ApiException, ConfigException {
        logger.info("CALL TO METHOD 'getMerchantDefinedFieldsDefinitions' STARTED");
        ApiResponse<List<InlineResponse2002>> resp = getMerchantDefinedFieldsDefinitionsWithHttpInfo(referenceType);
        logger.info("CALL TO METHOD 'getMerchantDefinedFieldsDefinitions' ENDED");
        return resp.getData();
    }

    /**
     * Get all merchant defined fields for a given reference type
     * 
     * @param referenceType The reference type for which merchant defined fields are to be fetched. Available values are Invoice, Purchase, Donation (required)
     * @return ApiResponse&lt;List&lt;InlineResponse2002&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public ApiResponse<List<InlineResponse2002>> getMerchantDefinedFieldsDefinitionsWithHttpInfo(String referenceType) throws ApiException, ConfigException {
        this.apiClient.setComputationStartTime(System.nanoTime());
        okhttp3.Call call = getMerchantDefinedFieldsDefinitionsValidateBeforeCall(referenceType, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2002>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all merchant defined fields for a given reference type (asynchronously)
     * 
     * @param referenceType The reference type for which merchant defined fields are to be fetched. Available values are Invoice, Purchase, Donation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public okhttp3.Call getMerchantDefinedFieldsDefinitionsAsync(String referenceType, final ApiCallback<List<InlineResponse2002>> callback) throws ApiException, ConfigException {

        this.apiClient.setComputationStartTime(System.nanoTime());
        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getMerchantDefinedFieldsDefinitionsValidateBeforeCall(referenceType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2002>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for putMerchantDefinedFieldsDefinitions
     * @param referenceType  (required)
     * @param id  (required)
     * @param merchantDefinedFieldCore  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public okhttp3.Call putMerchantDefinedFieldsDefinitionsCall(String referenceType, Long id, MerchantDefinedFieldCore merchantDefinedFieldCore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, ConfigException {
        SdkTracker sdkTracker = new SdkTracker();
        Object localVarPostBody = sdkTracker.insertDeveloperIdTracker(merchantDefinedFieldCore, MerchantDefinedFieldCore.class.getSimpleName(), apiClient.merchantConfig.getRunEnvironment(), apiClient.merchantConfig.getDefaultDeveloperId());
        
        String inboundMLEStatus = "false";

        if (MLEUtility.checkIsMLEForAPI(apiClient.merchantConfig, inboundMLEStatus, "putMerchantDefinedFieldsDefinitions,putMerchantDefinedFieldsDefinitionsAsync,putMerchantDefinedFieldsDefinitionsWithHttpInfo,putMerchantDefinedFieldsDefinitionsCall")) {
            try {
                localVarPostBody = MLEUtility.encryptRequestPayload(apiClient.merchantConfig, localVarPostBody);
            } catch (MLEException e) {
                logger.error("Failed to encrypt request body {}", e.getMessage(), e);
                throw new ApiException("Failed to encrypt request body : " + e.getMessage());
            }
        }
        
        // create path and map variables
        String localVarPath = "/invoicing/v2/{referenceType}/merchantDefinedFields/{id}"
            .replaceAll("\\{" + "referenceType" + "\\}", apiClient.escapeString(referenceType.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/hal+json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call putMerchantDefinedFieldsDefinitionsValidateBeforeCall(String referenceType, Long id, MerchantDefinedFieldCore merchantDefinedFieldCore, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException, ConfigException {
        
        // verify the required parameter 'referenceType' is set
        if (referenceType == null) {
            logger.error("Missing the required parameter 'referenceType' when calling putMerchantDefinedFieldsDefinitions(Async)");
            throw new ApiException("Missing the required parameter 'referenceType' when calling putMerchantDefinedFieldsDefinitions(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            logger.error("Missing the required parameter 'id' when calling putMerchantDefinedFieldsDefinitions(Async)");
            throw new ApiException("Missing the required parameter 'id' when calling putMerchantDefinedFieldsDefinitions(Async)");
        }
        
        // verify the required parameter 'merchantDefinedFieldCore' is set
        if (merchantDefinedFieldCore == null) {
            logger.error("Missing the required parameter 'merchantDefinedFieldCore' when calling putMerchantDefinedFieldsDefinitions(Async)");
            throw new ApiException("Missing the required parameter 'merchantDefinedFieldCore' when calling putMerchantDefinedFieldsDefinitions(Async)");
        }
        
        
        okhttp3.Call call = putMerchantDefinedFieldsDefinitionsCall(referenceType, id, merchantDefinedFieldCore, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a MerchantDefinedField by ID
     * 
     * @param referenceType  (required)
     * @param id  (required)
     * @param merchantDefinedFieldCore  (required)
     * @return List&lt;InlineResponse2002&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public List<InlineResponse2002> putMerchantDefinedFieldsDefinitions(String referenceType, Long id, MerchantDefinedFieldCore merchantDefinedFieldCore) throws ApiException, ConfigException {
        logger.info("CALL TO METHOD 'putMerchantDefinedFieldsDefinitions' STARTED");
        ApiResponse<List<InlineResponse2002>> resp = putMerchantDefinedFieldsDefinitionsWithHttpInfo(referenceType, id, merchantDefinedFieldCore);
        logger.info("CALL TO METHOD 'putMerchantDefinedFieldsDefinitions' ENDED");
        return resp.getData();
    }

    /**
     * Update a MerchantDefinedField by ID
     * 
     * @param referenceType  (required)
     * @param id  (required)
     * @param merchantDefinedFieldCore  (required)
     * @return ApiResponse&lt;List&lt;InlineResponse2002&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public ApiResponse<List<InlineResponse2002>> putMerchantDefinedFieldsDefinitionsWithHttpInfo(String referenceType, Long id, MerchantDefinedFieldCore merchantDefinedFieldCore) throws ApiException, ConfigException {
        this.apiClient.setComputationStartTime(System.nanoTime());
        okhttp3.Call call = putMerchantDefinedFieldsDefinitionsValidateBeforeCall(referenceType, id, merchantDefinedFieldCore, null, null);
        Type localVarReturnType = new TypeToken<List<InlineResponse2002>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a MerchantDefinedField by ID (asynchronously)
     * 
     * @param referenceType  (required)
     * @param id  (required)
     * @param merchantDefinedFieldCore  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @throws ConfigException If creation of merchant configuration fails in ApiClient
     */
    public okhttp3.Call putMerchantDefinedFieldsDefinitionsAsync(String referenceType, Long id, MerchantDefinedFieldCore merchantDefinedFieldCore, final ApiCallback<List<InlineResponse2002>> callback) throws ApiException, ConfigException {

        this.apiClient.setComputationStartTime(System.nanoTime());
        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = putMerchantDefinedFieldsDefinitionsValidateBeforeCall(referenceType, id, merchantDefinedFieldCore, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<InlineResponse2002>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
