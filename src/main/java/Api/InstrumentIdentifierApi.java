/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Invokers.ApiCallback;
import Invokers.ApiClient;
import Invokers.ApiException;
import Invokers.ApiResponse;
import Invokers.Configuration;
import Invokers.Pair;
import Invokers.ProgressRequestBody;
import Invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;
import java.io.InputStream;


import Model.CreateInstrumentIdentifierRequest;
import Model.InlineResponse400;
import Model.TmsV1InstrumentIdentifiersDelete409Response;
import Model.TmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response;
import Model.TmsV1InstrumentIdentifiersPost200Response;
import Model.UpdateInstrumentIdentifierRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InstrumentIdentifierApi {
    private ApiClient apiClient;

    public InstrumentIdentifierApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InstrumentIdentifierApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createInstrumentIdentifier
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param createInstrumentIdentifierRequest Please specify either a Card, Bank Account or Enrollable Card (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createInstrumentIdentifierCall(String profileId, CreateInstrumentIdentifierRequest createInstrumentIdentifierRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createInstrumentIdentifierRequest;
        
        // create path and map variables
        String localVarPath = "/tms/v1/instrumentidentifiers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInstrumentIdentifierValidateBeforeCall(String profileId, CreateInstrumentIdentifierRequest createInstrumentIdentifierRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling createInstrumentIdentifier(Async)");
        }
        
        // verify the required parameter 'createInstrumentIdentifierRequest' is set
        if (createInstrumentIdentifierRequest == null) {
            throw new ApiException("Missing the required parameter 'createInstrumentIdentifierRequest' when calling createInstrumentIdentifier(Async)");
        }
        
        
        okhttp3.Call call = createInstrumentIdentifierCall(profileId, createInstrumentIdentifierRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create an Instrument Identifier
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param createInstrumentIdentifierRequest Please specify either a Card, Bank Account or Enrollable Card (required)
     * @return TmsV1InstrumentIdentifiersPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TmsV1InstrumentIdentifiersPost200Response createInstrumentIdentifier(String profileId, CreateInstrumentIdentifierRequest createInstrumentIdentifierRequest) throws ApiException {
        ApiResponse<TmsV1InstrumentIdentifiersPost200Response> resp = createInstrumentIdentifierWithHttpInfo(profileId, createInstrumentIdentifierRequest);
        return resp.getData();
    }

    /**
     * Create an Instrument Identifier
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param createInstrumentIdentifierRequest Please specify either a Card, Bank Account or Enrollable Card (required)
     * @return ApiResponse&lt;TmsV1InstrumentIdentifiersPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TmsV1InstrumentIdentifiersPost200Response> createInstrumentIdentifierWithHttpInfo(String profileId, CreateInstrumentIdentifierRequest createInstrumentIdentifierRequest) throws ApiException {
        okhttp3.Call call = createInstrumentIdentifierValidateBeforeCall(profileId, createInstrumentIdentifierRequest, null, null);
        Type localVarReturnType = new TypeToken<TmsV1InstrumentIdentifiersPost200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create an Instrument Identifier (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param createInstrumentIdentifierRequest Please specify either a Card, Bank Account or Enrollable Card (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createInstrumentIdentifierAsync(String profileId, CreateInstrumentIdentifierRequest createInstrumentIdentifierRequest, final ApiCallback<TmsV1InstrumentIdentifiersPost200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = createInstrumentIdentifierValidateBeforeCall(profileId, createInstrumentIdentifierRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TmsV1InstrumentIdentifiersPost200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteInstrumentIdentifier
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call deleteInstrumentIdentifierCall(String profileId, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tms/v1/instrumentidentifiers/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInstrumentIdentifierValidateBeforeCall(String profileId, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling deleteInstrumentIdentifier(Async)");
        }
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling deleteInstrumentIdentifier(Async)");
        }
        
        
        okhttp3.Call call = deleteInstrumentIdentifierCall(profileId, tokenId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete an Instrument Identifier
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteInstrumentIdentifier(String profileId, String tokenId) throws ApiException {
        deleteInstrumentIdentifierWithHttpInfo(profileId, tokenId);
    }

    /**
     * Delete an Instrument Identifier
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteInstrumentIdentifierWithHttpInfo(String profileId, String tokenId) throws ApiException {
        okhttp3.Call call = deleteInstrumentIdentifierValidateBeforeCall(profileId, tokenId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete an Instrument Identifier (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call deleteInstrumentIdentifierAsync(String profileId, String tokenId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = deleteInstrumentIdentifierValidateBeforeCall(profileId, tokenId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for getAllPaymentInstruments
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param offset Starting Payment Instrument record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)
     * @param limit The maximum number of Payment Instruments that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getAllPaymentInstrumentsCall(String profileId, String tokenId, Long offset, Long limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tms/v1/instrumentidentifiers/{tokenId}/paymentinstruments"
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPaymentInstrumentsValidateBeforeCall(String profileId, String tokenId, Long offset, Long limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getAllPaymentInstruments(Async)");
        }
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getAllPaymentInstruments(Async)");
        }
        
        
        okhttp3.Call call = getAllPaymentInstrumentsCall(profileId, tokenId, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve all Payment Instruments
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param offset Starting Payment Instrument record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)
     * @param limit The maximum number of Payment Instruments that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)
     * @return TmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response getAllPaymentInstruments(String profileId, String tokenId, Long offset, Long limit) throws ApiException {
        ApiResponse<TmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response> resp = getAllPaymentInstrumentsWithHttpInfo(profileId, tokenId, offset, limit);
        return resp.getData();
    }

    /**
     * Retrieve all Payment Instruments
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param offset Starting Payment Instrument record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)
     * @param limit The maximum number of Payment Instruments that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)
     * @return ApiResponse&lt;TmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response> getAllPaymentInstrumentsWithHttpInfo(String profileId, String tokenId, Long offset, Long limit) throws ApiException {
        okhttp3.Call call = getAllPaymentInstrumentsValidateBeforeCall(profileId, tokenId, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<TmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all Payment Instruments (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param offset Starting Payment Instrument record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional, default to 0)
     * @param limit The maximum number of Payment Instruments that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getAllPaymentInstrumentsAsync(String profileId, String tokenId, Long offset, Long limit, final ApiCallback<TmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getAllPaymentInstrumentsValidateBeforeCall(profileId, tokenId, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getInstrumentIdentifier
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getInstrumentIdentifierCall(String profileId, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tms/v1/instrumentidentifiers/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInstrumentIdentifierValidateBeforeCall(String profileId, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling getInstrumentIdentifier(Async)");
        }
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling getInstrumentIdentifier(Async)");
        }
        
        
        okhttp3.Call call = getInstrumentIdentifierCall(profileId, tokenId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve an Instrument Identifier
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @return TmsV1InstrumentIdentifiersPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TmsV1InstrumentIdentifiersPost200Response getInstrumentIdentifier(String profileId, String tokenId) throws ApiException {
        ApiResponse<TmsV1InstrumentIdentifiersPost200Response> resp = getInstrumentIdentifierWithHttpInfo(profileId, tokenId);
        return resp.getData();
    }

    /**
     * Retrieve an Instrument Identifier
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @return ApiResponse&lt;TmsV1InstrumentIdentifiersPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TmsV1InstrumentIdentifiersPost200Response> getInstrumentIdentifierWithHttpInfo(String profileId, String tokenId) throws ApiException {
        okhttp3.Call call = getInstrumentIdentifierValidateBeforeCall(profileId, tokenId, null, null);
        Type localVarReturnType = new TypeToken<TmsV1InstrumentIdentifiersPost200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve an Instrument Identifier (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getInstrumentIdentifierAsync(String profileId, String tokenId, final ApiCallback<TmsV1InstrumentIdentifiersPost200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getInstrumentIdentifierValidateBeforeCall(profileId, tokenId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TmsV1InstrumentIdentifiersPost200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateInstrumentIdentifier
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param updateInstrumentIdentifierRequest Specify the previous transaction ID to update. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateInstrumentIdentifierCall(String profileId, String tokenId, UpdateInstrumentIdentifierRequest updateInstrumentIdentifierRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateInstrumentIdentifierRequest;
        
        // create path and map variables
        String localVarPath = "/tms/v1/instrumentidentifiers/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInstrumentIdentifierValidateBeforeCall(String profileId, String tokenId, UpdateInstrumentIdentifierRequest updateInstrumentIdentifierRequest, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling updateInstrumentIdentifier(Async)");
        }
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling updateInstrumentIdentifier(Async)");
        }
        
        // verify the required parameter 'updateInstrumentIdentifierRequest' is set
        if (updateInstrumentIdentifierRequest == null) {
            throw new ApiException("Missing the required parameter 'updateInstrumentIdentifierRequest' when calling updateInstrumentIdentifier(Async)");
        }
        
        
        okhttp3.Call call = updateInstrumentIdentifierCall(profileId, tokenId, updateInstrumentIdentifierRequest, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Instrument Identifier
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param updateInstrumentIdentifierRequest Specify the previous transaction ID to update. (required)
     * @return TmsV1InstrumentIdentifiersPost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TmsV1InstrumentIdentifiersPost200Response updateInstrumentIdentifier(String profileId, String tokenId, UpdateInstrumentIdentifierRequest updateInstrumentIdentifierRequest) throws ApiException {
        ApiResponse<TmsV1InstrumentIdentifiersPost200Response> resp = updateInstrumentIdentifierWithHttpInfo(profileId, tokenId, updateInstrumentIdentifierRequest);
        return resp.getData();
    }

    /**
     * Update a Instrument Identifier
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param updateInstrumentIdentifierRequest Specify the previous transaction ID to update. (required)
     * @return ApiResponse&lt;TmsV1InstrumentIdentifiersPost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TmsV1InstrumentIdentifiersPost200Response> updateInstrumentIdentifierWithHttpInfo(String profileId, String tokenId, UpdateInstrumentIdentifierRequest updateInstrumentIdentifierRequest) throws ApiException {
        okhttp3.Call call = updateInstrumentIdentifierValidateBeforeCall(profileId, tokenId, updateInstrumentIdentifierRequest, null, null);
        Type localVarReturnType = new TypeToken<TmsV1InstrumentIdentifiersPost200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Instrument Identifier (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param updateInstrumentIdentifierRequest Specify the previous transaction ID to update. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateInstrumentIdentifierAsync(String profileId, String tokenId, UpdateInstrumentIdentifierRequest updateInstrumentIdentifierRequest, final ApiCallback<TmsV1InstrumentIdentifiersPost200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateInstrumentIdentifierValidateBeforeCall(profileId, tokenId, updateInstrumentIdentifierRequest, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TmsV1InstrumentIdentifiersPost200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
