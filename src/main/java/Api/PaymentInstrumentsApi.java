/*
 * CyberSource Flex API
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Api;

import Invokers.ApiCallback;
import Invokers.ApiClient;
import Invokers.ApiException;
import Invokers.ApiResponse;
import Invokers.Configuration;
import Invokers.Pair;
import Invokers.ProgressRequestBody;
import Invokers.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import Model.Body2;
import Model.Body3;
import Model.InlineResponse4001;
import Model.TmsV1InstrumentidentifiersPaymentinstrumentsGet200Response;
import Model.TmsV1PaymentinstrumentsGet200Response;
import Model.TmsV1PaymentinstrumentsPost201Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentInstrumentsApi {
    private ApiClient apiClient;

    public PaymentInstrumentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentInstrumentsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for tmsV1InstrumentidentifiersTokenIdPaymentinstrumentsGet
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param offset Starting Payment Instrument record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional)
     * @param limit The maximum number of Payment Instruments that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call tmsV1InstrumentidentifiersTokenIdPaymentinstrumentsGetCall(String profileId, String tokenId, String offset, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tms/v1/instrumentidentifiers/{tokenId}/paymentinstruments"
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tmsV1InstrumentidentifiersTokenIdPaymentinstrumentsGetValidateBeforeCall(String profileId, String tokenId, String offset, String limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling tmsV1InstrumentidentifiersTokenIdPaymentinstrumentsGet(Async)");
        }
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling tmsV1InstrumentidentifiersTokenIdPaymentinstrumentsGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = tmsV1InstrumentidentifiersTokenIdPaymentinstrumentsGetCall(profileId, tokenId, offset, limit, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve all Payment Instruments associated with an Instrument Identifier
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param offset Starting Payment Instrument record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional)
     * @param limit The maximum number of Payment Instruments that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)
     * @return TmsV1InstrumentidentifiersPaymentinstrumentsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TmsV1InstrumentidentifiersPaymentinstrumentsGet200Response tmsV1InstrumentidentifiersTokenIdPaymentinstrumentsGet(String profileId, String tokenId, String offset, String limit) throws ApiException {
        ApiResponse<TmsV1InstrumentidentifiersPaymentinstrumentsGet200Response> resp = tmsV1InstrumentidentifiersTokenIdPaymentinstrumentsGetWithHttpInfo(profileId, tokenId, offset, limit);
        return resp.getData();
    }

    /**
     * Retrieve all Payment Instruments associated with an Instrument Identifier
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param offset Starting Payment Instrument record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional)
     * @param limit The maximum number of Payment Instruments that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)
     * @return ApiResponse&lt;TmsV1InstrumentidentifiersPaymentinstrumentsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TmsV1InstrumentidentifiersPaymentinstrumentsGet200Response> tmsV1InstrumentidentifiersTokenIdPaymentinstrumentsGetWithHttpInfo(String profileId, String tokenId, String offset, String limit) throws ApiException {
        com.squareup.okhttp.Call call = tmsV1InstrumentidentifiersTokenIdPaymentinstrumentsGetValidateBeforeCall(profileId, tokenId, offset, limit, null, null);
        Type localVarReturnType = new TypeToken<TmsV1InstrumentidentifiersPaymentinstrumentsGet200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve all Payment Instruments associated with an Instrument Identifier (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of an Instrument Identifier. (required)
     * @param offset Starting Payment Instrument record in zero-based dataset that should be returned as the first object in the array. Default is 0. (optional)
     * @param limit The maximum number of Payment Instruments that can be returned in the array starting from the offset record in zero-based dataset. Default is 20, maximum is 100. (optional, default to 20)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tmsV1InstrumentidentifiersTokenIdPaymentinstrumentsGetAsync(String profileId, String tokenId, String offset, String limit, final ApiCallback<TmsV1InstrumentidentifiersPaymentinstrumentsGet200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tmsV1InstrumentidentifiersTokenIdPaymentinstrumentsGetValidateBeforeCall(profileId, tokenId, offset, limit, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TmsV1InstrumentidentifiersPaymentinstrumentsGet200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tmsV1PaymentinstrumentsPost
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param body Please specify the customers payment details for card or bank account. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call tmsV1PaymentinstrumentsPostCall(String profileId, Body2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tms/v1/paymentinstruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tmsV1PaymentinstrumentsPostValidateBeforeCall(String profileId, Body2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling tmsV1PaymentinstrumentsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling tmsV1PaymentinstrumentsPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = tmsV1PaymentinstrumentsPostCall(profileId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param body Please specify the customers payment details for card or bank account. (required)
     * @return TmsV1PaymentinstrumentsPost201Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TmsV1PaymentinstrumentsPost201Response tmsV1PaymentinstrumentsPost(String profileId, Body2 body) throws ApiException {
        ApiResponse<TmsV1PaymentinstrumentsPost201Response> resp = tmsV1PaymentinstrumentsPostWithHttpInfo(profileId, body);
        return resp.getData();
    }

    /**
     * Create a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param body Please specify the customers payment details for card or bank account. (required)
     * @return ApiResponse&lt;TmsV1PaymentinstrumentsPost201Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TmsV1PaymentinstrumentsPost201Response> tmsV1PaymentinstrumentsPostWithHttpInfo(String profileId, Body2 body) throws ApiException {
        com.squareup.okhttp.Call call = tmsV1PaymentinstrumentsPostValidateBeforeCall(profileId, body, null, null);
        Type localVarReturnType = new TypeToken<TmsV1PaymentinstrumentsPost201Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Payment Instrument (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param body Please specify the customers payment details for card or bank account. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tmsV1PaymentinstrumentsPostAsync(String profileId, Body2 body, final ApiCallback<TmsV1PaymentinstrumentsPost201Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tmsV1PaymentinstrumentsPostValidateBeforeCall(profileId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TmsV1PaymentinstrumentsPost201Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tmsV1PaymentinstrumentsTokenIdDelete
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call tmsV1PaymentinstrumentsTokenIdDeleteCall(String profileId, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tms/v1/paymentinstruments/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tmsV1PaymentinstrumentsTokenIdDeleteValidateBeforeCall(String profileId, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling tmsV1PaymentinstrumentsTokenIdDelete(Async)");
        }
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling tmsV1PaymentinstrumentsTokenIdDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = tmsV1PaymentinstrumentsTokenIdDeleteCall(profileId, tokenId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void tmsV1PaymentinstrumentsTokenIdDelete(String profileId, String tokenId) throws ApiException {
        tmsV1PaymentinstrumentsTokenIdDeleteWithHttpInfo(profileId, tokenId);
    }

    /**
     * Delete a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> tmsV1PaymentinstrumentsTokenIdDeleteWithHttpInfo(String profileId, String tokenId) throws ApiException {
        com.squareup.okhttp.Call call = tmsV1PaymentinstrumentsTokenIdDeleteValidateBeforeCall(profileId, tokenId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete a Payment Instrument (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tmsV1PaymentinstrumentsTokenIdDeleteAsync(String profileId, String tokenId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tmsV1PaymentinstrumentsTokenIdDeleteValidateBeforeCall(profileId, tokenId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for tmsV1PaymentinstrumentsTokenIdGet
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call tmsV1PaymentinstrumentsTokenIdGetCall(String profileId, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tms/v1/paymentinstruments/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tmsV1PaymentinstrumentsTokenIdGetValidateBeforeCall(String profileId, String tokenId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling tmsV1PaymentinstrumentsTokenIdGet(Async)");
        }
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling tmsV1PaymentinstrumentsTokenIdGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = tmsV1PaymentinstrumentsTokenIdGetCall(profileId, tokenId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Retrieve a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @return TmsV1PaymentinstrumentsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TmsV1PaymentinstrumentsGet200Response tmsV1PaymentinstrumentsTokenIdGet(String profileId, String tokenId) throws ApiException {
        ApiResponse<TmsV1PaymentinstrumentsGet200Response> resp = tmsV1PaymentinstrumentsTokenIdGetWithHttpInfo(profileId, tokenId);
        return resp.getData();
    }

    /**
     * Retrieve a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @return ApiResponse&lt;TmsV1PaymentinstrumentsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TmsV1PaymentinstrumentsGet200Response> tmsV1PaymentinstrumentsTokenIdGetWithHttpInfo(String profileId, String tokenId) throws ApiException {
        com.squareup.okhttp.Call call = tmsV1PaymentinstrumentsTokenIdGetValidateBeforeCall(profileId, tokenId, null, null);
        Type localVarReturnType = new TypeToken<TmsV1PaymentinstrumentsGet200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Retrieve a Payment Instrument (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tmsV1PaymentinstrumentsTokenIdGetAsync(String profileId, String tokenId, final ApiCallback<TmsV1PaymentinstrumentsGet200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tmsV1PaymentinstrumentsTokenIdGetValidateBeforeCall(profileId, tokenId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TmsV1PaymentinstrumentsGet200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for tmsV1PaymentinstrumentsTokenIdPatch
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param body Please specify the customers payment details. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call tmsV1PaymentinstrumentsTokenIdPatchCall(String profileId, String tokenId, Body3 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/tms/v1/paymentinstruments/{tokenId}"
            .replaceAll("\\{" + "tokenId" + "\\}", apiClient.escapeString(tokenId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (profileId != null)
        localVarHeaderParams.put("profile-id", apiClient.parameterToString(profileId));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=utf-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=utf-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call tmsV1PaymentinstrumentsTokenIdPatchValidateBeforeCall(String profileId, String tokenId, Body3 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'profileId' is set
        if (profileId == null) {
            throw new ApiException("Missing the required parameter 'profileId' when calling tmsV1PaymentinstrumentsTokenIdPatch(Async)");
        }
        
        // verify the required parameter 'tokenId' is set
        if (tokenId == null) {
            throw new ApiException("Missing the required parameter 'tokenId' when calling tmsV1PaymentinstrumentsTokenIdPatch(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling tmsV1PaymentinstrumentsTokenIdPatch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = tmsV1PaymentinstrumentsTokenIdPatchCall(profileId, tokenId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param body Please specify the customers payment details. (required)
     * @return TmsV1PaymentinstrumentsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TmsV1PaymentinstrumentsGet200Response tmsV1PaymentinstrumentsTokenIdPatch(String profileId, String tokenId, Body3 body) throws ApiException {
        ApiResponse<TmsV1PaymentinstrumentsGet200Response> resp = tmsV1PaymentinstrumentsTokenIdPatchWithHttpInfo(profileId, tokenId, body);
        return resp.getData();
    }

    /**
     * Update a Payment Instrument
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param body Please specify the customers payment details. (required)
     * @return ApiResponse&lt;TmsV1PaymentinstrumentsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TmsV1PaymentinstrumentsGet200Response> tmsV1PaymentinstrumentsTokenIdPatchWithHttpInfo(String profileId, String tokenId, Body3 body) throws ApiException {
        com.squareup.okhttp.Call call = tmsV1PaymentinstrumentsTokenIdPatchValidateBeforeCall(profileId, tokenId, body, null, null);
        Type localVarReturnType = new TypeToken<TmsV1PaymentinstrumentsGet200Response>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update a Payment Instrument (asynchronously)
     * 
     * @param profileId The id of a profile containing user specific TMS configuration. (required)
     * @param tokenId The TokenId of a Payment Instrument. (required)
     * @param body Please specify the customers payment details. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call tmsV1PaymentinstrumentsTokenIdPatchAsync(String profileId, String tokenId, Body3 body, final ApiCallback<TmsV1PaymentinstrumentsGet200Response> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = tmsV1PaymentinstrumentsTokenIdPatchValidateBeforeCall(profileId, tokenId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TmsV1PaymentinstrumentsGet200Response>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
