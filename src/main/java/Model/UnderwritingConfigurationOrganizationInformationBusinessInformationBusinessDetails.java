/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import Model.UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails
 */

public class UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails {
  @SerializedName("customerType")
  private String customerType = null;

  @SerializedName("percentageSplitByB2B")
  private BigDecimal percentageSplitByB2B = null;

  @SerializedName("percentageSplitByB2C")
  private BigDecimal percentageSplitByB2C = null;

  @SerializedName("interactionTypes")
  private String interactionTypes = null;

  @SerializedName("percentageSplitByF2F")
  private BigDecimal percentageSplitByF2F = null;

  @SerializedName("percentageSplitByCNP")
  private BigDecimal percentageSplitByCNP = null;

  @SerializedName("whenIsCustomerCharged")
  private String whenIsCustomerCharged = null;

  @SerializedName("whenIsCustomerChargedDescription")
  private String whenIsCustomerChargedDescription = null;

  @SerializedName("offerSubscriptions")
  private Boolean offerSubscriptions = null;

  @SerializedName("monthlySubscriptionPercent")
  private BigDecimal monthlySubscriptionPercent = null;

  @SerializedName("quarterlySubscriptionPercent")
  private BigDecimal quarterlySubscriptionPercent = null;

  @SerializedName("semiannualSubscriptionPercent")
  private BigDecimal semiannualSubscriptionPercent = null;

  @SerializedName("annualSubscriptionPercent")
  private BigDecimal annualSubscriptionPercent = null;

  @SerializedName("currencyType")
  private String currencyType = null;

  @SerializedName("estimatedMonthlySales")
  private BigDecimal estimatedMonthlySales = null;

  @SerializedName("averageOrderAmount")
  private BigDecimal averageOrderAmount = null;

  @SerializedName("largestExpectedOrderAmount")
  private BigDecimal largestExpectedOrderAmount = null;

  @SerializedName("primaryAccountUsage")
  private String primaryAccountUsage = null;

  @SerializedName("sourceOfFunds")
  private String sourceOfFunds = null;

  @SerializedName("receiveMoney3rdParties")
  private Boolean receiveMoney3rdParties = null;

  @SerializedName("receiveTransactionFrequency")
  private String receiveTransactionFrequency = null;

  @SerializedName("estimatedMonthlySpend")
  private String estimatedMonthlySpend = null;

  @SerializedName("countryTransactions")
  private List<String> countryTransactions = null;

  @SerializedName("currenciesIn")
  private List<String> currenciesIn = null;

  @SerializedName("currenciesOut")
  private List<String> currenciesOut = null;

  @SerializedName("productServicesSubscription")
  private List<UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription> productServicesSubscription = null;

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails customerType(String customerType) {
    this.customerType = customerType;
    return this;
  }

   /**
   * Who is the business interacting with? Business to Business, Business to Consumer, Both  Possible values: - B2B - B2C - Both
   * @return customerType
  **/
  @ApiModelProperty(value = "Who is the business interacting with? Business to Business, Business to Consumer, Both  Possible values: - B2B - B2C - Both")
  public String getCustomerType() {
    return customerType;
  }

  public void setCustomerType(String customerType) {
    this.customerType = customerType;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails percentageSplitByB2B(BigDecimal percentageSplitByB2B) {
    this.percentageSplitByB2B = percentageSplitByB2B;
    return this;
  }

   /**
   * % Split
   * minimum: 0
   * maximum: 100
   * @return percentageSplitByB2B
  **/
  @ApiModelProperty(value = "% Split")
  public BigDecimal getPercentageSplitByB2B() {
    return percentageSplitByB2B;
  }

  public void setPercentageSplitByB2B(BigDecimal percentageSplitByB2B) {
    this.percentageSplitByB2B = percentageSplitByB2B;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails percentageSplitByB2C(BigDecimal percentageSplitByB2C) {
    this.percentageSplitByB2C = percentageSplitByB2C;
    return this;
  }

   /**
   * % Split
   * minimum: 0
   * maximum: 100
   * @return percentageSplitByB2C
  **/
  @ApiModelProperty(value = "% Split")
  public BigDecimal getPercentageSplitByB2C() {
    return percentageSplitByB2C;
  }

  public void setPercentageSplitByB2C(BigDecimal percentageSplitByB2C) {
    this.percentageSplitByB2C = percentageSplitByB2C;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails interactionTypes(String interactionTypes) {
    this.interactionTypes = interactionTypes;
    return this;
  }

   /**
   * Merchant Facing: Face to Face, Card Not Present, Both  Possible values: - F2F - CNP - Both
   * @return interactionTypes
  **/
  @ApiModelProperty(required = true, value = "Merchant Facing: Face to Face, Card Not Present, Both  Possible values: - F2F - CNP - Both")
  public String getInteractionTypes() {
    return interactionTypes;
  }

  public void setInteractionTypes(String interactionTypes) {
    this.interactionTypes = interactionTypes;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails percentageSplitByF2F(BigDecimal percentageSplitByF2F) {
    this.percentageSplitByF2F = percentageSplitByF2F;
    return this;
  }

   /**
   * % Split
   * minimum: 0
   * maximum: 100
   * @return percentageSplitByF2F
  **/
  @ApiModelProperty(required = true, value = "% Split")
  public BigDecimal getPercentageSplitByF2F() {
    return percentageSplitByF2F;
  }

  public void setPercentageSplitByF2F(BigDecimal percentageSplitByF2F) {
    this.percentageSplitByF2F = percentageSplitByF2F;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails percentageSplitByCNP(BigDecimal percentageSplitByCNP) {
    this.percentageSplitByCNP = percentageSplitByCNP;
    return this;
  }

   /**
   * % Split
   * minimum: 0
   * maximum: 100
   * @return percentageSplitByCNP
  **/
  @ApiModelProperty(required = true, value = "% Split")
  public BigDecimal getPercentageSplitByCNP() {
    return percentageSplitByCNP;
  }

  public void setPercentageSplitByCNP(BigDecimal percentageSplitByCNP) {
    this.percentageSplitByCNP = percentageSplitByCNP;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails whenIsCustomerCharged(String whenIsCustomerCharged) {
    this.whenIsCustomerCharged = whenIsCustomerCharged;
    return this;
  }

   /**
   * When is the customer charged?  Possible values: - OneTimeBeforeServiceDelivery - OneTimeAfterServiceDelivery - Other
   * @return whenIsCustomerCharged
  **/
  @ApiModelProperty(required = true, value = "When is the customer charged?  Possible values: - OneTimeBeforeServiceDelivery - OneTimeAfterServiceDelivery - Other")
  public String getWhenIsCustomerCharged() {
    return whenIsCustomerCharged;
  }

  public void setWhenIsCustomerCharged(String whenIsCustomerCharged) {
    this.whenIsCustomerCharged = whenIsCustomerCharged;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails whenIsCustomerChargedDescription(String whenIsCustomerChargedDescription) {
    this.whenIsCustomerChargedDescription = whenIsCustomerChargedDescription;
    return this;
  }

   /**
   * Get whenIsCustomerChargedDescription
   * @return whenIsCustomerChargedDescription
  **/
  @ApiModelProperty(value = "")
  public String getWhenIsCustomerChargedDescription() {
    return whenIsCustomerChargedDescription;
  }

  public void setWhenIsCustomerChargedDescription(String whenIsCustomerChargedDescription) {
    this.whenIsCustomerChargedDescription = whenIsCustomerChargedDescription;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails offerSubscriptions(Boolean offerSubscriptions) {
    this.offerSubscriptions = offerSubscriptions;
    return this;
  }

   /**
   * Does Merchant Offer Subscriptions?
   * @return offerSubscriptions
  **/
  @ApiModelProperty(required = true, value = "Does Merchant Offer Subscriptions?")
  public Boolean OfferSubscriptions() {
    return offerSubscriptions;
  }

  public void setOfferSubscriptions(Boolean offerSubscriptions) {
    this.offerSubscriptions = offerSubscriptions;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails monthlySubscriptionPercent(BigDecimal monthlySubscriptionPercent) {
    this.monthlySubscriptionPercent = monthlySubscriptionPercent;
    return this;
  }

   /**
   * % of business is monthly subscriptions
   * minimum: 0
   * maximum: 100
   * @return monthlySubscriptionPercent
  **/
  @ApiModelProperty(value = "% of business is monthly subscriptions")
  public BigDecimal getMonthlySubscriptionPercent() {
    return monthlySubscriptionPercent;
  }

  public void setMonthlySubscriptionPercent(BigDecimal monthlySubscriptionPercent) {
    this.monthlySubscriptionPercent = monthlySubscriptionPercent;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails quarterlySubscriptionPercent(BigDecimal quarterlySubscriptionPercent) {
    this.quarterlySubscriptionPercent = quarterlySubscriptionPercent;
    return this;
  }

   /**
   * % of business is quarterly subscriptions
   * minimum: 0
   * maximum: 100
   * @return quarterlySubscriptionPercent
  **/
  @ApiModelProperty(value = "% of business is quarterly subscriptions")
  public BigDecimal getQuarterlySubscriptionPercent() {
    return quarterlySubscriptionPercent;
  }

  public void setQuarterlySubscriptionPercent(BigDecimal quarterlySubscriptionPercent) {
    this.quarterlySubscriptionPercent = quarterlySubscriptionPercent;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails semiannualSubscriptionPercent(BigDecimal semiannualSubscriptionPercent) {
    this.semiannualSubscriptionPercent = semiannualSubscriptionPercent;
    return this;
  }

   /**
   * % of business is semi-annual subscriptions
   * minimum: 0
   * maximum: 100
   * @return semiannualSubscriptionPercent
  **/
  @ApiModelProperty(value = "% of business is semi-annual subscriptions")
  public BigDecimal getSemiannualSubscriptionPercent() {
    return semiannualSubscriptionPercent;
  }

  public void setSemiannualSubscriptionPercent(BigDecimal semiannualSubscriptionPercent) {
    this.semiannualSubscriptionPercent = semiannualSubscriptionPercent;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails annualSubscriptionPercent(BigDecimal annualSubscriptionPercent) {
    this.annualSubscriptionPercent = annualSubscriptionPercent;
    return this;
  }

   /**
   * % of business is annual subscriptions
   * minimum: 0
   * maximum: 100
   * @return annualSubscriptionPercent
  **/
  @ApiModelProperty(value = "% of business is annual subscriptions")
  public BigDecimal getAnnualSubscriptionPercent() {
    return annualSubscriptionPercent;
  }

  public void setAnnualSubscriptionPercent(BigDecimal annualSubscriptionPercent) {
    this.annualSubscriptionPercent = annualSubscriptionPercent;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails currencyType(String currencyType) {
    this.currencyType = currencyType;
    return this;
  }

   /**
   * Processing Currency. ISO 4217, 3 characters.  Possible values: - USD - CAD - EUR - GBP - CHF
   * @return currencyType
  **/
  @ApiModelProperty(value = "Processing Currency. ISO 4217, 3 characters.  Possible values: - USD - CAD - EUR - GBP - CHF")
  public String getCurrencyType() {
    return currencyType;
  }

  public void setCurrencyType(String currencyType) {
    this.currencyType = currencyType;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails estimatedMonthlySales(BigDecimal estimatedMonthlySales) {
    this.estimatedMonthlySales = estimatedMonthlySales;
    return this;
  }

   /**
   * Merchant&#39;s estimated monthly sales
   * @return estimatedMonthlySales
  **/
  @ApiModelProperty(value = "Merchant's estimated monthly sales")
  public BigDecimal getEstimatedMonthlySales() {
    return estimatedMonthlySales;
  }

  public void setEstimatedMonthlySales(BigDecimal estimatedMonthlySales) {
    this.estimatedMonthlySales = estimatedMonthlySales;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails averageOrderAmount(BigDecimal averageOrderAmount) {
    this.averageOrderAmount = averageOrderAmount;
    return this;
  }

   /**
   * Merchant&#39;s average order amount
   * @return averageOrderAmount
  **/
  @ApiModelProperty(value = "Merchant's average order amount")
  public BigDecimal getAverageOrderAmount() {
    return averageOrderAmount;
  }

  public void setAverageOrderAmount(BigDecimal averageOrderAmount) {
    this.averageOrderAmount = averageOrderAmount;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails largestExpectedOrderAmount(BigDecimal largestExpectedOrderAmount) {
    this.largestExpectedOrderAmount = largestExpectedOrderAmount;
    return this;
  }

   /**
   * Merchant&#39;s largest expected order amount
   * @return largestExpectedOrderAmount
  **/
  @ApiModelProperty(value = "Merchant's largest expected order amount")
  public BigDecimal getLargestExpectedOrderAmount() {
    return largestExpectedOrderAmount;
  }

  public void setLargestExpectedOrderAmount(BigDecimal largestExpectedOrderAmount) {
    this.largestExpectedOrderAmount = largestExpectedOrderAmount;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails primaryAccountUsage(String primaryAccountUsage) {
    this.primaryAccountUsage = primaryAccountUsage;
    return this;
  }

   /**
   * Primary purpose of account usage  Possible values: - Paying for goods / services - Repatriating overseas earnings - Intercompany transfers - Collecting funds from clients - Liquidity / FX - Payment to an individual - Investment activity - Property purchase/sale - Other
   * @return primaryAccountUsage
  **/
  @ApiModelProperty(value = "Primary purpose of account usage  Possible values: - Paying for goods / services - Repatriating overseas earnings - Intercompany transfers - Collecting funds from clients - Liquidity / FX - Payment to an individual - Investment activity - Property purchase/sale - Other")
  public String getPrimaryAccountUsage() {
    return primaryAccountUsage;
  }

  public void setPrimaryAccountUsage(String primaryAccountUsage) {
    this.primaryAccountUsage = primaryAccountUsage;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails sourceOfFunds(String sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
    return this;
  }

   /**
   * Source of Funds  Possible values: - Business revenue - External or shareholder investment - Loan, advance or other borrowing - Donations or grants - Inter-company transfers - Proceeds of sales of assests - Other
   * @return sourceOfFunds
  **/
  @ApiModelProperty(value = "Source of Funds  Possible values: - Business revenue - External or shareholder investment - Loan, advance or other borrowing - Donations or grants - Inter-company transfers - Proceeds of sales of assests - Other")
  public String getSourceOfFunds() {
    return sourceOfFunds;
  }

  public void setSourceOfFunds(String sourceOfFunds) {
    this.sourceOfFunds = sourceOfFunds;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails receiveMoney3rdParties(Boolean receiveMoney3rdParties) {
    this.receiveMoney3rdParties = receiveMoney3rdParties;
    return this;
  }

   /**
   * Will you recieve money from 3rd parties into your account?
   * @return receiveMoney3rdParties
  **/
  @ApiModelProperty(value = "Will you recieve money from 3rd parties into your account?")
  public Boolean ReceiveMoney3rdParties() {
    return receiveMoney3rdParties;
  }

  public void setReceiveMoney3rdParties(Boolean receiveMoney3rdParties) {
    this.receiveMoney3rdParties = receiveMoney3rdParties;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails receiveTransactionFrequency(String receiveTransactionFrequency) {
    this.receiveTransactionFrequency = receiveTransactionFrequency;
    return this;
  }

   /**
   * Roughly how often do you expect to send or receive transactions?  Possible values: - One-off or infrequently - 1-20 per month - 20-50 per month - 50-100 per month - 100+ per month
   * @return receiveTransactionFrequency
  **/
  @ApiModelProperty(value = "Roughly how often do you expect to send or receive transactions?  Possible values: - One-off or infrequently - 1-20 per month - 20-50 per month - 50-100 per month - 100+ per month")
  public String getReceiveTransactionFrequency() {
    return receiveTransactionFrequency;
  }

  public void setReceiveTransactionFrequency(String receiveTransactionFrequency) {
    this.receiveTransactionFrequency = receiveTransactionFrequency;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails estimatedMonthlySpend(String estimatedMonthlySpend) {
    this.estimatedMonthlySpend = estimatedMonthlySpend;
    return this;
  }

   /**
   * What is your estimated total monthly spend?  Possible values: - &lt;$10,000 - $10,000 - $50,000 - $50,000 - $100,000 - $100,000 - $500,000 - $500,000+
   * @return estimatedMonthlySpend
  **/
  @ApiModelProperty(value = "What is your estimated total monthly spend?  Possible values: - <$10,000 - $10,000 - $50,000 - $50,000 - $100,000 - $100,000 - $500,000 - $500,000+")
  public String getEstimatedMonthlySpend() {
    return estimatedMonthlySpend;
  }

  public void setEstimatedMonthlySpend(String estimatedMonthlySpend) {
    this.estimatedMonthlySpend = estimatedMonthlySpend;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails countryTransactions(List<String> countryTransactions) {
    this.countryTransactions = countryTransactions;
    return this;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails addCountryTransactionsItem(String countryTransactionsItem) {
    if (this.countryTransactions == null) {
      this.countryTransactions = new ArrayList<String>();
    }
    this.countryTransactions.add(countryTransactionsItem);
    return this;
  }

   /**
   * Get countryTransactions
   * @return countryTransactions
  **/
  @ApiModelProperty(value = "")
  public List<String> getCountryTransactions() {
    return countryTransactions;
  }

  public void setCountryTransactions(List<String> countryTransactions) {
    this.countryTransactions = countryTransactions;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails currenciesIn(List<String> currenciesIn) {
    this.currenciesIn = currenciesIn;
    return this;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails addCurrenciesInItem(String currenciesInItem) {
    if (this.currenciesIn == null) {
      this.currenciesIn = new ArrayList<String>();
    }
    this.currenciesIn.add(currenciesInItem);
    return this;
  }

   /**
   * Get currenciesIn
   * @return currenciesIn
  **/
  @ApiModelProperty(value = "")
  public List<String> getCurrenciesIn() {
    return currenciesIn;
  }

  public void setCurrenciesIn(List<String> currenciesIn) {
    this.currenciesIn = currenciesIn;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails currenciesOut(List<String> currenciesOut) {
    this.currenciesOut = currenciesOut;
    return this;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails addCurrenciesOutItem(String currenciesOutItem) {
    if (this.currenciesOut == null) {
      this.currenciesOut = new ArrayList<String>();
    }
    this.currenciesOut.add(currenciesOutItem);
    return this;
  }

   /**
   * Get currenciesOut
   * @return currenciesOut
  **/
  @ApiModelProperty(value = "")
  public List<String> getCurrenciesOut() {
    return currenciesOut;
  }

  public void setCurrenciesOut(List<String> currenciesOut) {
    this.currenciesOut = currenciesOut;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails productServicesSubscription(List<UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription> productServicesSubscription) {
    this.productServicesSubscription = productServicesSubscription;
    return this;
  }

  public UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails addProductServicesSubscriptionItem(UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription productServicesSubscriptionItem) {
    if (this.productServicesSubscription == null) {
      this.productServicesSubscription = new ArrayList<UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription>();
    }
    this.productServicesSubscription.add(productServicesSubscriptionItem);
    return this;
  }

   /**
   * Get productServicesSubscription
   * @return productServicesSubscription
  **/
  @ApiModelProperty(value = "")
  public List<UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription> getProductServicesSubscription() {
    return productServicesSubscription;
  }

  public void setProductServicesSubscription(List<UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetailsProductServicesSubscription> productServicesSubscription) {
    this.productServicesSubscription = productServicesSubscription;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails = (UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails) o;
    return Objects.equals(this.customerType, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.customerType) &&
        Objects.equals(this.percentageSplitByB2B, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.percentageSplitByB2B) &&
        Objects.equals(this.percentageSplitByB2C, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.percentageSplitByB2C) &&
        Objects.equals(this.interactionTypes, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.interactionTypes) &&
        Objects.equals(this.percentageSplitByF2F, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.percentageSplitByF2F) &&
        Objects.equals(this.percentageSplitByCNP, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.percentageSplitByCNP) &&
        Objects.equals(this.whenIsCustomerCharged, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.whenIsCustomerCharged) &&
        Objects.equals(this.whenIsCustomerChargedDescription, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.whenIsCustomerChargedDescription) &&
        Objects.equals(this.offerSubscriptions, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.offerSubscriptions) &&
        Objects.equals(this.monthlySubscriptionPercent, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.monthlySubscriptionPercent) &&
        Objects.equals(this.quarterlySubscriptionPercent, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.quarterlySubscriptionPercent) &&
        Objects.equals(this.semiannualSubscriptionPercent, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.semiannualSubscriptionPercent) &&
        Objects.equals(this.annualSubscriptionPercent, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.annualSubscriptionPercent) &&
        Objects.equals(this.currencyType, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.currencyType) &&
        Objects.equals(this.estimatedMonthlySales, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.estimatedMonthlySales) &&
        Objects.equals(this.averageOrderAmount, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.averageOrderAmount) &&
        Objects.equals(this.largestExpectedOrderAmount, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.largestExpectedOrderAmount) &&
        Objects.equals(this.primaryAccountUsage, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.primaryAccountUsage) &&
        Objects.equals(this.sourceOfFunds, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.sourceOfFunds) &&
        Objects.equals(this.receiveMoney3rdParties, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.receiveMoney3rdParties) &&
        Objects.equals(this.receiveTransactionFrequency, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.receiveTransactionFrequency) &&
        Objects.equals(this.estimatedMonthlySpend, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.estimatedMonthlySpend) &&
        Objects.equals(this.countryTransactions, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.countryTransactions) &&
        Objects.equals(this.currenciesIn, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.currenciesIn) &&
        Objects.equals(this.currenciesOut, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.currenciesOut) &&
        Objects.equals(this.productServicesSubscription, underwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails.productServicesSubscription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerType, percentageSplitByB2B, percentageSplitByB2C, interactionTypes, percentageSplitByF2F, percentageSplitByCNP, whenIsCustomerCharged, whenIsCustomerChargedDescription, offerSubscriptions, monthlySubscriptionPercent, quarterlySubscriptionPercent, semiannualSubscriptionPercent, annualSubscriptionPercent, currencyType, estimatedMonthlySales, averageOrderAmount, largestExpectedOrderAmount, primaryAccountUsage, sourceOfFunds, receiveMoney3rdParties, receiveTransactionFrequency, estimatedMonthlySpend, countryTransactions, currenciesIn, currenciesOut, productServicesSubscription);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnderwritingConfigurationOrganizationInformationBusinessInformationBusinessDetails {\n");
    
    if (customerType != null) sb.append("    customerType: ").append(toIndentedString(customerType)).append("\n");
    if (percentageSplitByB2B != null) sb.append("    percentageSplitByB2B: ").append(toIndentedString(percentageSplitByB2B)).append("\n");
    if (percentageSplitByB2C != null) sb.append("    percentageSplitByB2C: ").append(toIndentedString(percentageSplitByB2C)).append("\n");
    if (interactionTypes != null) sb.append("    interactionTypes: ").append(toIndentedString(interactionTypes)).append("\n");
    if (percentageSplitByF2F != null) sb.append("    percentageSplitByF2F: ").append(toIndentedString(percentageSplitByF2F)).append("\n");
    if (percentageSplitByCNP != null) sb.append("    percentageSplitByCNP: ").append(toIndentedString(percentageSplitByCNP)).append("\n");
    if (whenIsCustomerCharged != null) sb.append("    whenIsCustomerCharged: ").append(toIndentedString(whenIsCustomerCharged)).append("\n");
    if (whenIsCustomerChargedDescription != null) sb.append("    whenIsCustomerChargedDescription: ").append(toIndentedString(whenIsCustomerChargedDescription)).append("\n");
    if (offerSubscriptions != null) sb.append("    offerSubscriptions: ").append(toIndentedString(offerSubscriptions)).append("\n");
    if (monthlySubscriptionPercent != null) sb.append("    monthlySubscriptionPercent: ").append(toIndentedString(monthlySubscriptionPercent)).append("\n");
    if (quarterlySubscriptionPercent != null) sb.append("    quarterlySubscriptionPercent: ").append(toIndentedString(quarterlySubscriptionPercent)).append("\n");
    if (semiannualSubscriptionPercent != null) sb.append("    semiannualSubscriptionPercent: ").append(toIndentedString(semiannualSubscriptionPercent)).append("\n");
    if (annualSubscriptionPercent != null) sb.append("    annualSubscriptionPercent: ").append(toIndentedString(annualSubscriptionPercent)).append("\n");
    if (currencyType != null) sb.append("    currencyType: ").append(toIndentedString(currencyType)).append("\n");
    if (estimatedMonthlySales != null) sb.append("    estimatedMonthlySales: ").append(toIndentedString(estimatedMonthlySales)).append("\n");
    if (averageOrderAmount != null) sb.append("    averageOrderAmount: ").append(toIndentedString(averageOrderAmount)).append("\n");
    if (largestExpectedOrderAmount != null) sb.append("    largestExpectedOrderAmount: ").append(toIndentedString(largestExpectedOrderAmount)).append("\n");
    if (primaryAccountUsage != null) sb.append("    primaryAccountUsage: ").append(toIndentedString(primaryAccountUsage)).append("\n");
    if (sourceOfFunds != null) sb.append("    sourceOfFunds: ").append(toIndentedString(sourceOfFunds)).append("\n");
    if (receiveMoney3rdParties != null) sb.append("    receiveMoney3rdParties: ").append(toIndentedString(receiveMoney3rdParties)).append("\n");
    if (receiveTransactionFrequency != null) sb.append("    receiveTransactionFrequency: ").append(toIndentedString(receiveTransactionFrequency)).append("\n");
    if (estimatedMonthlySpend != null) sb.append("    estimatedMonthlySpend: ").append(toIndentedString(estimatedMonthlySpend)).append("\n");
    if (countryTransactions != null) sb.append("    countryTransactions: ").append(toIndentedString(countryTransactions)).append("\n");
    if (currenciesIn != null) sb.append("    currenciesIn: ").append(toIndentedString(currenciesIn)).append("\n");
    if (currenciesOut != null) sb.append("    currenciesOut: ").append(toIndentedString(currenciesOut)).append("\n");
    if (productServicesSubscription != null) sb.append("    productServicesSubscription: ").append(toIndentedString(productServicesSubscription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

