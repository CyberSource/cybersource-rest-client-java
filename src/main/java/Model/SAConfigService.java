/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * SAConfigService
 */

public class SAConfigService {
  @SerializedName("decisionManagerVerboseEnabled")
  private Boolean decisionManagerVerboseEnabled = null;

  @SerializedName("declinedRetryLimit")
  private BigDecimal declinedRetryLimit = null;

  @SerializedName("decisionManagerEnabled")
  private Boolean decisionManagerEnabled = null;

  @SerializedName("tokenizationEnabled")
  private Boolean tokenizationEnabled = null;

  @SerializedName("reverseAuthOnAddressVerificationSystemFailure")
  private Boolean reverseAuthOnAddressVerificationSystemFailure = null;

  @SerializedName("deviceFingerprintEnabled")
  private Boolean deviceFingerprintEnabled = null;

  @SerializedName("reverseAuthOnCardVerificationNumberFailure")
  private Boolean reverseAuthOnCardVerificationNumberFailure = null;

  public SAConfigService decisionManagerVerboseEnabled(Boolean decisionManagerVerboseEnabled) {
    this.decisionManagerVerboseEnabled = decisionManagerVerboseEnabled;
    return this;
  }

   /**
   * Toggles whether verbose Decision Manager results should be present in the Secure Acceptance response. As this response passes through the browser, it is recommended to set this to \&quot;false\&quot; outside of debugging.
   * @return decisionManagerVerboseEnabled
  **/
  @ApiModelProperty(value = "Toggles whether verbose Decision Manager results should be present in the Secure Acceptance response. As this response passes through the browser, it is recommended to set this to \"false\" outside of debugging.")
  public Boolean getDecisionManagerVerboseEnabled() {
    return decisionManagerVerboseEnabled;
  }

  public void setDecisionManagerVerboseEnabled(Boolean decisionManagerVerboseEnabled) {
    this.decisionManagerVerboseEnabled = decisionManagerVerboseEnabled;
  }

  public SAConfigService declinedRetryLimit(BigDecimal declinedRetryLimit) {
    this.declinedRetryLimit = declinedRetryLimit;
    return this;
  }

   /**
   * Defines the number of retries a payer is presented with on payment declines on Hosted Checkout. Valid values are between 0 and 5.
   * @return declinedRetryLimit
  **/
  @ApiModelProperty(value = "Defines the number of retries a payer is presented with on payment declines on Hosted Checkout. Valid values are between 0 and 5.")
  public BigDecimal getDeclinedRetryLimit() {
    return declinedRetryLimit;
  }

  public void setDeclinedRetryLimit(BigDecimal declinedRetryLimit) {
    this.declinedRetryLimit = declinedRetryLimit;
  }

  public SAConfigService decisionManagerEnabled(Boolean decisionManagerEnabled) {
    this.decisionManagerEnabled = decisionManagerEnabled;
    return this;
  }

   /**
   * Toggles whether Decision Manager is enabled or not for Secure Acceptance transactions. Requires the transacting MID to be enabled and configured for Decicion Manager.
   * @return decisionManagerEnabled
  **/
  @ApiModelProperty(value = "Toggles whether Decision Manager is enabled or not for Secure Acceptance transactions. Requires the transacting MID to be enabled and configured for Decicion Manager.")
  public Boolean getDecisionManagerEnabled() {
    return decisionManagerEnabled;
  }

  public void setDecisionManagerEnabled(Boolean decisionManagerEnabled) {
    this.decisionManagerEnabled = decisionManagerEnabled;
  }

  public SAConfigService tokenizationEnabled(Boolean tokenizationEnabled) {
    this.tokenizationEnabled = tokenizationEnabled;
    return this;
  }

   /**
   * Toggles whether Tokenization is enabled or not for Secure Acceptance transactions. Requires the transacting MID to be enabled and configured for Tokenization.
   * @return tokenizationEnabled
  **/
  @ApiModelProperty(value = "Toggles whether Tokenization is enabled or not for Secure Acceptance transactions. Requires the transacting MID to be enabled and configured for Tokenization.")
  public Boolean getTokenizationEnabled() {
    return tokenizationEnabled;
  }

  public void setTokenizationEnabled(Boolean tokenizationEnabled) {
    this.tokenizationEnabled = tokenizationEnabled;
  }

  public SAConfigService reverseAuthOnAddressVerificationSystemFailure(Boolean reverseAuthOnAddressVerificationSystemFailure) {
    this.reverseAuthOnAddressVerificationSystemFailure = reverseAuthOnAddressVerificationSystemFailure;
    return this;
  }

   /**
   * Toggles whether or not an approved Authorization that fails AVS should be automatically reversed.
   * @return reverseAuthOnAddressVerificationSystemFailure
  **/
  @ApiModelProperty(value = "Toggles whether or not an approved Authorization that fails AVS should be automatically reversed.")
  public Boolean getReverseAuthOnAddressVerificationSystemFailure() {
    return reverseAuthOnAddressVerificationSystemFailure;
  }

  public void setReverseAuthOnAddressVerificationSystemFailure(Boolean reverseAuthOnAddressVerificationSystemFailure) {
    this.reverseAuthOnAddressVerificationSystemFailure = reverseAuthOnAddressVerificationSystemFailure;
  }

  public SAConfigService deviceFingerprintEnabled(Boolean deviceFingerprintEnabled) {
    this.deviceFingerprintEnabled = deviceFingerprintEnabled;
    return this;
  }

   /**
   * Toggles whether or not fraud Device Fingerprinting is enabled on the Hosted Checkout. This simplifies enablement for Decision Manager.
   * @return deviceFingerprintEnabled
  **/
  @ApiModelProperty(value = "Toggles whether or not fraud Device Fingerprinting is enabled on the Hosted Checkout. This simplifies enablement for Decision Manager.")
  public Boolean getDeviceFingerprintEnabled() {
    return deviceFingerprintEnabled;
  }

  public void setDeviceFingerprintEnabled(Boolean deviceFingerprintEnabled) {
    this.deviceFingerprintEnabled = deviceFingerprintEnabled;
  }

  public SAConfigService reverseAuthOnCardVerificationNumberFailure(Boolean reverseAuthOnCardVerificationNumberFailure) {
    this.reverseAuthOnCardVerificationNumberFailure = reverseAuthOnCardVerificationNumberFailure;
    return this;
  }

   /**
   * Toggles whether or not an approved Authorization that fails CVN check that should be automatically reversed.
   * @return reverseAuthOnCardVerificationNumberFailure
  **/
  @ApiModelProperty(value = "Toggles whether or not an approved Authorization that fails CVN check that should be automatically reversed.")
  public Boolean getReverseAuthOnCardVerificationNumberFailure() {
    return reverseAuthOnCardVerificationNumberFailure;
  }

  public void setReverseAuthOnCardVerificationNumberFailure(Boolean reverseAuthOnCardVerificationNumberFailure) {
    this.reverseAuthOnCardVerificationNumberFailure = reverseAuthOnCardVerificationNumberFailure;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SAConfigService saConfigService = (SAConfigService) o;
    return Objects.equals(this.decisionManagerVerboseEnabled, saConfigService.decisionManagerVerboseEnabled) &&
        Objects.equals(this.declinedRetryLimit, saConfigService.declinedRetryLimit) &&
        Objects.equals(this.decisionManagerEnabled, saConfigService.decisionManagerEnabled) &&
        Objects.equals(this.tokenizationEnabled, saConfigService.tokenizationEnabled) &&
        Objects.equals(this.reverseAuthOnAddressVerificationSystemFailure, saConfigService.reverseAuthOnAddressVerificationSystemFailure) &&
        Objects.equals(this.deviceFingerprintEnabled, saConfigService.deviceFingerprintEnabled) &&
        Objects.equals(this.reverseAuthOnCardVerificationNumberFailure, saConfigService.reverseAuthOnCardVerificationNumberFailure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(decisionManagerVerboseEnabled, declinedRetryLimit, decisionManagerEnabled, tokenizationEnabled, reverseAuthOnAddressVerificationSystemFailure, deviceFingerprintEnabled, reverseAuthOnCardVerificationNumberFailure);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SAConfigService {\n");
    
    sb.append("    decisionManagerVerboseEnabled: ").append(toIndentedString(decisionManagerVerboseEnabled)).append("\n");
    sb.append("    declinedRetryLimit: ").append(toIndentedString(declinedRetryLimit)).append("\n");
    sb.append("    decisionManagerEnabled: ").append(toIndentedString(decisionManagerEnabled)).append("\n");
    sb.append("    tokenizationEnabled: ").append(toIndentedString(tokenizationEnabled)).append("\n");
    sb.append("    reverseAuthOnAddressVerificationSystemFailure: ").append(toIndentedString(reverseAuthOnAddressVerificationSystemFailure)).append("\n");
    sb.append("    deviceFingerprintEnabled: ").append(toIndentedString(deviceFingerprintEnabled)).append("\n");
    sb.append("    reverseAuthOnCardVerificationNumberFailure: ").append(toIndentedString(reverseAuthOnCardVerificationNumberFailure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

