/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PostDeviceSearchRequest
 */

public class PostDeviceSearchRequest {
  @SerializedName("query")
  private String query = null;

  @SerializedName("sort")
  private String sort = null;

  @SerializedName("offset")
  private Long offset = null;

  @SerializedName("limit")
  private Long limit = null;

  public PostDeviceSearchRequest query(String query) {
    this.query = query;
    return this;
  }

   /**
   * The Search Query to retrieve the Terminals(Example :- terminalSerialNumber:12345678 AND readerId:66c395ca-4f20-4b40-acac-5ff4c772d5f9 AND terminalId:T9KN88RTPE). Empty Query returns everything for the given organization.
   * @return query
  **/
  @ApiModelProperty(value = "The Search Query to retrieve the Terminals(Example :- terminalSerialNumber:12345678 AND readerId:66c395ca-4f20-4b40-acac-5ff4c772d5f9 AND terminalId:T9KN88RTPE). Empty Query returns everything for the given organization.")
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }

  public PostDeviceSearchRequest sort(String sort) {
    this.sort = sort;
    return this;
  }

   /**
   * The Sort Query to order the Terminals by. By Default, It is in ascending order of last update of a device.
   * @return sort
  **/
  @ApiModelProperty(value = "The Sort Query to order the Terminals by. By Default, It is in ascending order of last update of a device.")
  public String getSort() {
    return sort;
  }

  public void setSort(String sort) {
    this.sort = sort;
  }

  public PostDeviceSearchRequest offset(Long offset) {
    this.offset = offset;
    return this;
  }

   /**
   * The offset or page number.
   * @return offset
  **/
  @ApiModelProperty(value = "The offset or page number.")
  public Long getOffset() {
    return offset;
  }

  public void setOffset(Long offset) {
    this.offset = offset;
  }

  public PostDeviceSearchRequest limit(Long limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Number of devices to retrieve in one request.
   * @return limit
  **/
  @ApiModelProperty(value = "Number of devices to retrieve in one request.")
  public Long getLimit() {
    return limit;
  }

  public void setLimit(Long limit) {
    this.limit = limit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostDeviceSearchRequest postDeviceSearchRequest = (PostDeviceSearchRequest) o;
    return Objects.equals(this.query, postDeviceSearchRequest.query) &&
        Objects.equals(this.sort, postDeviceSearchRequest.sort) &&
        Objects.equals(this.offset, postDeviceSearchRequest.offset) &&
        Objects.equals(this.limit, postDeviceSearchRequest.limit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(query, sort, offset, limit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostDeviceSearchRequest {\n");
    
    if (query != null) sb.append("    query: ").append(toIndentedString(query)).append("\n");
    if (sort != null) sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    if (offset != null) sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    if (limit != null) sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

