/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationAchVerification;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationAvs;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationCardVerification;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationCustomer;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationRouting;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PtsV2PaymentsPost201ResponseProcessorInformation
 */

public class PtsV2PaymentsPost201ResponseProcessorInformation {
  @SerializedName("authIndicator")
  private String authIndicator = null;

  @SerializedName("approvalCode")
  private String approvalCode = null;

  @SerializedName("cardReferenceData")
  private String cardReferenceData = null;

  @SerializedName("transactionId")
  private String transactionId = null;

  @SerializedName("networkTransactionId")
  private String networkTransactionId = null;

  @SerializedName("responseCode")
  private String responseCode = null;

  @SerializedName("responseCodeSource")
  private String responseCodeSource = null;

  @SerializedName("responseDetails")
  private String responseDetails = null;

  @SerializedName("responseCategoryCode")
  private String responseCategoryCode = null;

  @SerializedName("forwardedAcquirerCode")
  private String forwardedAcquirerCode = null;

  @SerializedName("settlementDate")
  private String settlementDate = null;

  @SerializedName("avs")
  private PtsV2PaymentsPost201ResponseProcessorInformationAvs avs = null;

  @SerializedName("cardVerification")
  private PtsV2PaymentsPost201ResponseProcessorInformationCardVerification cardVerification = null;

  @SerializedName("merchantAdvice")
  private PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice merchantAdvice = null;

  @SerializedName("electronicVerificationResults")
  private PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults electronicVerificationResults = null;

  @SerializedName("achVerification")
  private PtsV2PaymentsPost201ResponseProcessorInformationAchVerification achVerification = null;

  @SerializedName("customer")
  private PtsV2PaymentsPost201ResponseProcessorInformationCustomer customer = null;

  @SerializedName("consumerAuthenticationResponse")
  private PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse consumerAuthenticationResponse = null;

  @SerializedName("systemTraceAuditNumber")
  private String systemTraceAuditNumber = null;

  @SerializedName("paymentAccountReferenceNumber")
  private String paymentAccountReferenceNumber = null;

  @SerializedName("transactionIntegrityCode")
  private String transactionIntegrityCode = null;

  @SerializedName("amexVerbalAuthReferenceNumber")
  private String amexVerbalAuthReferenceNumber = null;

  @SerializedName("masterCardServiceCode")
  private String masterCardServiceCode = null;

  @SerializedName("masterCardServiceReplyCode")
  private String masterCardServiceReplyCode = null;

  @SerializedName("masterCardAuthenticationType")
  private String masterCardAuthenticationType = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("routing")
  private PtsV2PaymentsPost201ResponseProcessorInformationRouting routing = null;

  @SerializedName("merchantNumber")
  private String merchantNumber = null;

  @SerializedName("retrievalReferenceNumber")
  private String retrievalReferenceNumber = null;

  @SerializedName("paymentUrl")
  private String paymentUrl = null;

  @SerializedName("completeUrl")
  private String completeUrl = null;

  @SerializedName("signature")
  private String signature = null;

  @SerializedName("publicKey")
  private String publicKey = null;

  @SerializedName("sellerProtection")
  private PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection sellerProtection = null;

  @SerializedName("transactionExpiryDate")
  private String transactionExpiryDate = null;

  @SerializedName("customUrl")
  private String customUrl = null;

  @SerializedName("schemeAssignedId")
  private String schemeAssignedId = null;

  @SerializedName("deviceUrl")
  private String deviceUrl = null;

  public PtsV2PaymentsPost201ResponseProcessorInformation authIndicator(String authIndicator) {
    this.authIndicator = authIndicator;
    return this;
  }

   /**
   * Flag that specifies the purpose of the authorization.  Possible values:  - &#x60;0&#x60;: Preauthorization  - &#x60;1&#x60;: Final authorization 
   * @return authIndicator
  **/
  @ApiModelProperty(value = "Flag that specifies the purpose of the authorization.  Possible values:  - `0`: Preauthorization  - `1`: Final authorization ")
  public String getAuthIndicator() {
    return authIndicator;
  }

  public void setAuthIndicator(String authIndicator) {
    this.authIndicator = authIndicator;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation approvalCode(String approvalCode) {
    this.approvalCode = approvalCode;
    return this;
  }

   /**
   * Authorization code. Returned only when the processor returns this value.  The length of this value depends on your processor.  Returned by authorization service.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit credit.  #### Elavon Encrypted Account Number Program The returned value is OFFLINE.  #### TSYS Acquiring Solutions The returned value for a successful zero amount authorization is 000000. 
   * @return approvalCode
  **/
  @ApiModelProperty(value = "Authorization code. Returned only when the processor returns this value.  The length of this value depends on your processor.  Returned by authorization service.  #### PIN debit Authorization code that is returned by the processor.  Returned by PIN debit credit.  #### Elavon Encrypted Account Number Program The returned value is OFFLINE.  #### TSYS Acquiring Solutions The returned value for a successful zero amount authorization is 000000. ")
  public String getApprovalCode() {
    return approvalCode;
  }

  public void setApprovalCode(String approvalCode) {
    this.approvalCode = approvalCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation cardReferenceData(String cardReferenceData) {
    this.cardReferenceData = cardReferenceData;
    return this;
  }

   /**
   * The Scheme reference data is a variable length data element up to a maximum of 56 characters. It may be sent by the acquirer in the authorisation response message, and by the terminal (unchanged) in subsequent authorisation request messages associated with the same transaction. This field is used by Streamline and HSBC UK only, at present. 
   * @return cardReferenceData
  **/
  @ApiModelProperty(value = "The Scheme reference data is a variable length data element up to a maximum of 56 characters. It may be sent by the acquirer in the authorisation response message, and by the terminal (unchanged) in subsequent authorisation request messages associated with the same transaction. This field is used by Streamline and HSBC UK only, at present. ")
  public String getCardReferenceData() {
    return cardReferenceData;
  }

  public void setCardReferenceData(String cardReferenceData) {
    this.cardReferenceData = cardReferenceData;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this value.  Returned by the authorization service.  #### PIN debit Transaction identifier generated by the processor.  Returned by PIN debit credit.  #### GPX Processor transaction ID.  #### Cielo For Cielo, this value is the non-sequential unit (NSU) and is supported for all transactions. The value is generated by Cielo or the issuing bank.  #### Comercio Latino For Comercio Latino, this value is the proof of sale or non-sequential unit (NSU) number generated by the acquirers Cielo and Rede, or the issuing bank.  #### CyberSource through VisaNet and GPN For details about this value for CyberSource through VisaNet and GPN, see \&quot;processorInformation.networkTransactionId\&quot; in [REST API Fields](https://developer.cybersource.com/content/dam/docs/cybs/en-us/apifields/reference/all/rest/api-fields.pdf)  #### Moneris This value identifies the transaction on a host system. It contains the following information: - Terminal used to process the transaction - Shift during which the transaction took place - Batch number - Transaction number within the batch You must store this value. If you give the customer a receipt, display this value on the receipt.  **Example** For the value 66012345001069003: - Terminal ID &#x3D; 66012345 - Shift number &#x3D; 001 - Batch number &#x3D; 069 - Transaction number &#x3D; 003 
   * @return transactionId
  **/
  @ApiModelProperty(value = "Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this value.  Returned by the authorization service.  #### PIN debit Transaction identifier generated by the processor.  Returned by PIN debit credit.  #### GPX Processor transaction ID.  #### Cielo For Cielo, this value is the non-sequential unit (NSU) and is supported for all transactions. The value is generated by Cielo or the issuing bank.  #### Comercio Latino For Comercio Latino, this value is the proof of sale or non-sequential unit (NSU) number generated by the acquirers Cielo and Rede, or the issuing bank.  #### CyberSource through VisaNet and GPN For details about this value for CyberSource through VisaNet and GPN, see \"processorInformation.networkTransactionId\" in [REST API Fields](https://developer.cybersource.com/content/dam/docs/cybs/en-us/apifields/reference/all/rest/api-fields.pdf)  #### Moneris This value identifies the transaction on a host system. It contains the following information: - Terminal used to process the transaction - Shift during which the transaction took place - Batch number - Transaction number within the batch You must store this value. If you give the customer a receipt, display this value on the receipt.  **Example** For the value 66012345001069003: - Terminal ID = 66012345 - Shift number = 001 - Batch number = 069 - Transaction number = 003 ")
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation networkTransactionId(String networkTransactionId) {
    this.networkTransactionId = networkTransactionId;
    return this;
  }

   /**
   * Same value as &#x60;processorInformation.transactionId&#x60;
   * @return networkTransactionId
  **/
  @ApiModelProperty(value = "Same value as `processorInformation.transactionId`")
  public String getNetworkTransactionId() {
    return networkTransactionId;
  }

  public void setNetworkTransactionId(String networkTransactionId) {
    this.networkTransactionId = networkTransactionId;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation responseCode(String responseCode) {
    this.responseCode = responseCode;
    return this;
  }

   /**
   * For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is &#x60;08&#x60;, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: &#x60;aa,bb&#x60; with the two values separated by a comma and where: - &#x60;aa&#x60; is the two-digit error message from Atos. - &#x60;bb&#x60; is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example &#x60;2:R06&#x60;  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the &#x60;processorInformation.responseCategoryCode&#x60; field. String (3) 
   * @return responseCode
  **/
  @ApiModelProperty(value = "For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  **Important** Do not use this field to evaluate the result of the authorization.  #### PIN debit Response value that is returned by the processor or bank. **Important** Do not use this field to evaluate the results of the transaction request.  Returned by PIN debit credit, PIN debit purchase, and PIN debit reversal.  #### AIBMS If this value is `08`, you can accept the transaction if the customer provides you with identification.  #### Atos This value is the response code sent from Atos and it might also include the response code from the bank. Format: `aa,bb` with the two values separated by a comma and where: - `aa` is the two-digit error message from Atos. - `bb` is the optional two-digit error message from the bank.  #### Comercio Latino This value is the status code and the error or response code received from the processor separated by a colon. Format: [status code]:E[error code] or [status code]:R[response code] Example `2:R06`  #### JCN Gateway Processor-defined detail error code. The associated response category code is in the `processorInformation.responseCategoryCode` field. String (3) ")
  public String getResponseCode() {
    return responseCode;
  }

  public void setResponseCode(String responseCode) {
    this.responseCode = responseCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation responseCodeSource(String responseCodeSource) {
    this.responseCodeSource = responseCodeSource;
    return this;
  }

   /**
   * Used by Visa only and contains the response source/reason code that identifies the source of the response decision. 
   * @return responseCodeSource
  **/
  @ApiModelProperty(value = "Used by Visa only and contains the response source/reason code that identifies the source of the response decision. ")
  public String getResponseCodeSource() {
    return responseCodeSource;
  }

  public void setResponseCodeSource(String responseCodeSource) {
    this.responseCodeSource = responseCodeSource;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation responseDetails(String responseDetails) {
    this.responseDetails = responseDetails;
    return this;
  }

   /**
   * This field might contain information about a decline. This field is supported only for **CyberSource through VisaNet**. 
   * @return responseDetails
  **/
  @ApiModelProperty(value = "This field might contain information about a decline. This field is supported only for **CyberSource through VisaNet**. ")
  public String getResponseDetails() {
    return responseDetails;
  }

  public void setResponseDetails(String responseDetails) {
    this.responseDetails = responseDetails;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation responseCategoryCode(String responseCategoryCode) {
    this.responseCategoryCode = responseCategoryCode;
    return this;
  }

   /**
   * Processor-defined response category code. The associated detail error code is in the &#x60;processorInformation.responseCode&#x60; or &#x60;issuerInformation.responseCode&#x60; field of the service you requested.  This field is supported only for:   - Japanese issuers  - Domestic transactions in Japan  - Comercio Latino—processor transaction ID required for troubleshooting  #### Maximum length for processors   - Comercio Latino: 36  - All other processors: 3 
   * @return responseCategoryCode
  **/
  @ApiModelProperty(value = "Processor-defined response category code. The associated detail error code is in the `processorInformation.responseCode` or `issuerInformation.responseCode` field of the service you requested.  This field is supported only for:   - Japanese issuers  - Domestic transactions in Japan  - Comercio Latino—processor transaction ID required for troubleshooting  #### Maximum length for processors   - Comercio Latino: 36  - All other processors: 3 ")
  public String getResponseCategoryCode() {
    return responseCategoryCode;
  }

  public void setResponseCategoryCode(String responseCategoryCode) {
    this.responseCategoryCode = responseCategoryCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation forwardedAcquirerCode(String forwardedAcquirerCode) {
    this.forwardedAcquirerCode = forwardedAcquirerCode;
    return this;
  }

   /**
   * Name of the Japanese acquirer that processed the transaction. Returned only for JCN Gateway. Please contact the CyberSource Japan Support Group for more information. 
   * @return forwardedAcquirerCode
  **/
  @ApiModelProperty(value = "Name of the Japanese acquirer that processed the transaction. Returned only for JCN Gateway. Please contact the CyberSource Japan Support Group for more information. ")
  public String getForwardedAcquirerCode() {
    return forwardedAcquirerCode;
  }

  public void setForwardedAcquirerCode(String forwardedAcquirerCode) {
    this.forwardedAcquirerCode = forwardedAcquirerCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation settlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
    return this;
  }

   /**
   * Field contains a settlement date. The date is in mmdd format, where: mm &#x3D; month and dd &#x3D; day. 
   * @return settlementDate
  **/
  @ApiModelProperty(value = "Field contains a settlement date. The date is in mmdd format, where: mm = month and dd = day. ")
  public String getSettlementDate() {
    return settlementDate;
  }

  public void setSettlementDate(String settlementDate) {
    this.settlementDate = settlementDate;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation avs(PtsV2PaymentsPost201ResponseProcessorInformationAvs avs) {
    this.avs = avs;
    return this;
  }

   /**
   * Get avs
   * @return avs
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationAvs getAvs() {
    return avs;
  }

  public void setAvs(PtsV2PaymentsPost201ResponseProcessorInformationAvs avs) {
    this.avs = avs;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation cardVerification(PtsV2PaymentsPost201ResponseProcessorInformationCardVerification cardVerification) {
    this.cardVerification = cardVerification;
    return this;
  }

   /**
   * Get cardVerification
   * @return cardVerification
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationCardVerification getCardVerification() {
    return cardVerification;
  }

  public void setCardVerification(PtsV2PaymentsPost201ResponseProcessorInformationCardVerification cardVerification) {
    this.cardVerification = cardVerification;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation merchantAdvice(PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice merchantAdvice) {
    this.merchantAdvice = merchantAdvice;
    return this;
  }

   /**
   * Get merchantAdvice
   * @return merchantAdvice
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice getMerchantAdvice() {
    return merchantAdvice;
  }

  public void setMerchantAdvice(PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice merchantAdvice) {
    this.merchantAdvice = merchantAdvice;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation electronicVerificationResults(PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults electronicVerificationResults) {
    this.electronicVerificationResults = electronicVerificationResults;
    return this;
  }

   /**
   * Get electronicVerificationResults
   * @return electronicVerificationResults
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults getElectronicVerificationResults() {
    return electronicVerificationResults;
  }

  public void setElectronicVerificationResults(PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults electronicVerificationResults) {
    this.electronicVerificationResults = electronicVerificationResults;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation achVerification(PtsV2PaymentsPost201ResponseProcessorInformationAchVerification achVerification) {
    this.achVerification = achVerification;
    return this;
  }

   /**
   * Get achVerification
   * @return achVerification
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationAchVerification getAchVerification() {
    return achVerification;
  }

  public void setAchVerification(PtsV2PaymentsPost201ResponseProcessorInformationAchVerification achVerification) {
    this.achVerification = achVerification;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation customer(PtsV2PaymentsPost201ResponseProcessorInformationCustomer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(PtsV2PaymentsPost201ResponseProcessorInformationCustomer customer) {
    this.customer = customer;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation consumerAuthenticationResponse(PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse consumerAuthenticationResponse) {
    this.consumerAuthenticationResponse = consumerAuthenticationResponse;
    return this;
  }

   /**
   * Get consumerAuthenticationResponse
   * @return consumerAuthenticationResponse
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse getConsumerAuthenticationResponse() {
    return consumerAuthenticationResponse;
  }

  public void setConsumerAuthenticationResponse(PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse consumerAuthenticationResponse) {
    this.consumerAuthenticationResponse = consumerAuthenticationResponse;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation systemTraceAuditNumber(String systemTraceAuditNumber) {
    this.systemTraceAuditNumber = systemTraceAuditNumber;
    return this;
  }

   /**
   * This field is returned only for **American Express Direct** and **CyberSource through VisaNet**. Returned by authorization and incremental authorization services.  #### American Express Direct  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  #### CyberSource through VisaNet  System trace number that must be printed on the customer&#39;s receipt. 
   * @return systemTraceAuditNumber
  **/
  @ApiModelProperty(value = "This field is returned only for **American Express Direct** and **CyberSource through VisaNet**. Returned by authorization and incremental authorization services.  #### American Express Direct  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  #### CyberSource through VisaNet  System trace number that must be printed on the customer's receipt. ")
  public String getSystemTraceAuditNumber() {
    return systemTraceAuditNumber;
  }

  public void setSystemTraceAuditNumber(String systemTraceAuditNumber) {
    this.systemTraceAuditNumber = systemTraceAuditNumber;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation paymentAccountReferenceNumber(String paymentAccountReferenceNumber) {
    this.paymentAccountReferenceNumber = paymentAccountReferenceNumber;
    return this;
  }

   /**
   * Visa-generated reference number that identifies a card-present transaction for which you provided one of the following:   - Visa primary account number (PAN)  - Visa-generated token for a PAN  This reference number serves as a link to the cardholder account and to all transactions for that account. This reply field is returned only for CyberSource through VisaNet.  **Note** On CyberSource through VisaNet, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR8 - Position: 79-110 - Field: Payment Account Reference  The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant&#39;s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks. 
   * @return paymentAccountReferenceNumber
  **/
  @ApiModelProperty(value = "Visa-generated reference number that identifies a card-present transaction for which you provided one of the following:   - Visa primary account number (PAN)  - Visa-generated token for a PAN  This reference number serves as a link to the cardholder account and to all transactions for that account. This reply field is returned only for CyberSource through VisaNet.  **Note** On CyberSource through VisaNet, the value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR8 - Position: 79-110 - Field: Payment Account Reference  The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant's acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks. ")
  public String getPaymentAccountReferenceNumber() {
    return paymentAccountReferenceNumber;
  }

  public void setPaymentAccountReferenceNumber(String paymentAccountReferenceNumber) {
    this.paymentAccountReferenceNumber = paymentAccountReferenceNumber;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation transactionIntegrityCode(String transactionIntegrityCode) {
    this.transactionIntegrityCode = transactionIntegrityCode;
    return this;
  }

   /**
   * Transaction integrity classification provided by Mastercard. This value specifies Mastercard&#39;s evaluation of the transaction&#39;s safety and security. This field is returned only for **CyberSource through VisaNet**.  For card-present transactions, possible values:   - &#x60;A1&#x60;: EMV or token in a secure, trusted environment  - &#x60;B1&#x60;: EMV or chip equivalent  - &#x60;C1&#x60;: Magnetic stripe  - &#x60;E1&#x60;: Key entered  - &#x60;U0&#x60;: Unclassified  For card-not-present transactions, possible values:   - &#x60;A2&#x60;: Digital transactions  - &#x60;B2&#x60;: Authenticated checkout  - &#x60;C2&#x60;: Transaction validation  - &#x60;D2&#x60;: Enhanced data  - &#x60;E2&#x60;: Generic messaging  - &#x60;U0&#x60;: Unclassified  For information about these values, contact Mastercard or your acquirer.  #### CyberSource through VisaNet  The value for this field corresponds to the following data in the TC 33 capture file,&lt;sup&gt;1&lt;/sup&gt;: - Record: CP01 TCR6 - Position: 136-137 - Field: Mastercard Transaction Integrity Classification  &lt;sup&gt;1&lt;/sup&gt; The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant&#39;s acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks. 
   * @return transactionIntegrityCode
  **/
  @ApiModelProperty(value = "Transaction integrity classification provided by Mastercard. This value specifies Mastercard's evaluation of the transaction's safety and security. This field is returned only for **CyberSource through VisaNet**.  For card-present transactions, possible values:   - `A1`: EMV or token in a secure, trusted environment  - `B1`: EMV or chip equivalent  - `C1`: Magnetic stripe  - `E1`: Key entered  - `U0`: Unclassified  For card-not-present transactions, possible values:   - `A2`: Digital transactions  - `B2`: Authenticated checkout  - `C2`: Transaction validation  - `D2`: Enhanced data  - `E2`: Generic messaging  - `U0`: Unclassified  For information about these values, contact Mastercard or your acquirer.  #### CyberSource through VisaNet  The value for this field corresponds to the following data in the TC 33 capture file,<sup>1</sup>: - Record: CP01 TCR6 - Position: 136-137 - Field: Mastercard Transaction Integrity Classification  <sup>1</sup> The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant's acquirer, who uses this information to facilitate end-of-day clearing processing with payment networks. ")
  public String getTransactionIntegrityCode() {
    return transactionIntegrityCode;
  }

  public void setTransactionIntegrityCode(String transactionIntegrityCode) {
    this.transactionIntegrityCode = transactionIntegrityCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation amexVerbalAuthReferenceNumber(String amexVerbalAuthReferenceNumber) {
    this.amexVerbalAuthReferenceNumber = amexVerbalAuthReferenceNumber;
    return this;
  }

   /**
   * Referral response number for a verbal authorization with FDMS Nashville when using an American Express card. Give this number to American Express when you call them for the verbal authorization. 
   * @return amexVerbalAuthReferenceNumber
  **/
  @ApiModelProperty(value = "Referral response number for a verbal authorization with FDMS Nashville when using an American Express card. Give this number to American Express when you call them for the verbal authorization. ")
  public String getAmexVerbalAuthReferenceNumber() {
    return amexVerbalAuthReferenceNumber;
  }

  public void setAmexVerbalAuthReferenceNumber(String amexVerbalAuthReferenceNumber) {
    this.amexVerbalAuthReferenceNumber = amexVerbalAuthReferenceNumber;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation masterCardServiceCode(String masterCardServiceCode) {
    this.masterCardServiceCode = masterCardServiceCode;
    return this;
  }

   /**
   * Mastercard service that was used for the transaction. Mastercard provides this value to CyberSource.  Possible value:  - 53: Mastercard card-on-file token service  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 133-134 - Field: Mastercard Merchant on-behalf service. **Note** This field is returned only for CyberSource through VisaNet. 
   * @return masterCardServiceCode
  **/
  @ApiModelProperty(value = "Mastercard service that was used for the transaction. Mastercard provides this value to CyberSource.  Possible value:  - 53: Mastercard card-on-file token service  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 133-134 - Field: Mastercard Merchant on-behalf service. **Note** This field is returned only for CyberSource through VisaNet. ")
  public String getMasterCardServiceCode() {
    return masterCardServiceCode;
  }

  public void setMasterCardServiceCode(String masterCardServiceCode) {
    this.masterCardServiceCode = masterCardServiceCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation masterCardServiceReplyCode(String masterCardServiceReplyCode) {
    this.masterCardServiceReplyCode = masterCardServiceReplyCode;
    return this;
  }

   /**
   * Result of the Mastercard card-on-file token service. Mastercard provides this value to CyberSource.  Possible values:   - &#x60;C&#x60;: Service completed successfully.  - &#x60;F&#x60;: One of the following:    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 81 for an authorization or      authorization reversal.    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 01 for a tokenized request.    - Token requestor ID is missing or formatted incorrectly.  - &#x60;I&#x60;: One of the following:    - Invalid token requestor ID.    - Suspended or deactivated token.    - Invalid token (not in mapping table).  - &#x60;T&#x60;: Invalid combination of token requestor ID and token.  - &#x60;U&#x60;: Expired token.  - &#x60;W&#x60;: Primary account number (PAN) listed in electronic warning bulletin.  **Note** This field is returned only for **CyberSource through VisaNet**. 
   * @return masterCardServiceReplyCode
  **/
  @ApiModelProperty(value = "Result of the Mastercard card-on-file token service. Mastercard provides this value to CyberSource.  Possible values:   - `C`: Service completed successfully.  - `F`: One of the following:    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 81 for an authorization or      authorization reversal.    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 01 for a tokenized request.    - Token requestor ID is missing or formatted incorrectly.  - `I`: One of the following:    - Invalid token requestor ID.    - Suspended or deactivated token.    - Invalid token (not in mapping table).  - `T`: Invalid combination of token requestor ID and token.  - `U`: Expired token.  - `W`: Primary account number (PAN) listed in electronic warning bulletin.  **Note** This field is returned only for **CyberSource through VisaNet**. ")
  public String getMasterCardServiceReplyCode() {
    return masterCardServiceReplyCode;
  }

  public void setMasterCardServiceReplyCode(String masterCardServiceReplyCode) {
    this.masterCardServiceReplyCode = masterCardServiceReplyCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation masterCardAuthenticationType(String masterCardAuthenticationType) {
    this.masterCardAuthenticationType = masterCardAuthenticationType;
    return this;
  }

   /**
   * Type of authentication for which the transaction qualifies as determined by the Mastercard authentication service, which confirms the identity of the cardholder. Mastercard provides this value to CyberSource.  Possible values:   - &#x60;1&#x60;: Transaction qualifies for Mastercard authentication type 1.  - &#x60;2&#x60;: Transaction qualifies for Mastercard authentication type 2.  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 132 - Field: Mastercard Member Defined service. **Note** This field is returned only for CyberSource through VisaNet. 
   * @return masterCardAuthenticationType
  **/
  @ApiModelProperty(value = "Type of authentication for which the transaction qualifies as determined by the Mastercard authentication service, which confirms the identity of the cardholder. Mastercard provides this value to CyberSource.  Possible values:   - `1`: Transaction qualifies for Mastercard authentication type 1.  - `2`: Transaction qualifies for Mastercard authentication type 2.  #### CyberSource through VisaNet The value for this field corresponds to the following data in the TC 33 capture file: - Record: CP01 TCR6 - Position: 132 - Field: Mastercard Member Defined service. **Note** This field is returned only for CyberSource through VisaNet. ")
  public String getMasterCardAuthenticationType() {
    return masterCardAuthenticationType;
  }

  public void setMasterCardAuthenticationType(String masterCardAuthenticationType) {
    this.masterCardAuthenticationType = masterCardAuthenticationType;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the Processor. 
   * @return name
  **/
  @ApiModelProperty(value = "Name of the Processor. ")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation routing(PtsV2PaymentsPost201ResponseProcessorInformationRouting routing) {
    this.routing = routing;
    return this;
  }

   /**
   * Get routing
   * @return routing
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationRouting getRouting() {
    return routing;
  }

  public void setRouting(PtsV2PaymentsPost201ResponseProcessorInformationRouting routing) {
    this.routing = routing;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation merchantNumber(String merchantNumber) {
    this.merchantNumber = merchantNumber;
    return this;
  }

   /**
   * Identifier that was assigned to you by your acquirer. This value must be printed on the receipt.  #### Returned by Authorizations and Credits.  This reply field is only supported by merchants who have installed client software on their POS terminals and use these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX 
   * @return merchantNumber
  **/
  @ApiModelProperty(value = "Identifier that was assigned to you by your acquirer. This value must be printed on the receipt.  #### Returned by Authorizations and Credits.  This reply field is only supported by merchants who have installed client software on their POS terminals and use these processors: - American Express Direct - Credit Mutuel-CIC - FDC Nashville Global - OmniPay Direct - SIX ")
  public String getMerchantNumber() {
    return merchantNumber;
  }

  public void setMerchantNumber(String merchantNumber) {
    this.merchantNumber = merchantNumber;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation retrievalReferenceNumber(String retrievalReferenceNumber) {
    this.retrievalReferenceNumber = retrievalReferenceNumber;
    return this;
  }

   /**
   * #### Ingenico ePayments Unique number that CyberSource generates to identify the transaction. You can use this value to identify transactions in the Ingenico ePayments Collections Report, which provides settlement information. Contact customer support for information about the report.  ### CyberSource through VisaNet Retrieval request number. 
   * @return retrievalReferenceNumber
  **/
  @ApiModelProperty(value = "#### Ingenico ePayments Unique number that CyberSource generates to identify the transaction. You can use this value to identify transactions in the Ingenico ePayments Collections Report, which provides settlement information. Contact customer support for information about the report.  ### CyberSource through VisaNet Retrieval request number. ")
  public String getRetrievalReferenceNumber() {
    return retrievalReferenceNumber;
  }

  public void setRetrievalReferenceNumber(String retrievalReferenceNumber) {
    this.retrievalReferenceNumber = retrievalReferenceNumber;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation paymentUrl(String paymentUrl) {
    this.paymentUrl = paymentUrl;
    return this;
  }

   /**
   * Direct the customer to this URL to complete the payment.
   * @return paymentUrl
  **/
  @ApiModelProperty(value = "Direct the customer to this URL to complete the payment.")
  public String getPaymentUrl() {
    return paymentUrl;
  }

  public void setPaymentUrl(String paymentUrl) {
    this.paymentUrl = paymentUrl;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation completeUrl(String completeUrl) {
    this.completeUrl = completeUrl;
    return this;
  }

   /**
   * The redirect URL for forwarding the consumer to complete page.  This redirect needed by PSP to track browser information of consumer. PSP then redirect consumer to merchant success URL. 
   * @return completeUrl
  **/
  @ApiModelProperty(value = "The redirect URL for forwarding the consumer to complete page.  This redirect needed by PSP to track browser information of consumer. PSP then redirect consumer to merchant success URL. ")
  public String getCompleteUrl() {
    return completeUrl;
  }

  public void setCompleteUrl(String completeUrl) {
    this.completeUrl = completeUrl;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation signature(String signature) {
    this.signature = signature;
    return this;
  }

   /**
   * Get signature
   * @return signature
  **/
  @ApiModelProperty(value = "")
  public String getSignature() {
    return signature;
  }

  public void setSignature(String signature) {
    this.signature = signature;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

   /**
   * Get publicKey
   * @return publicKey
  **/
  @ApiModelProperty(value = "")
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation sellerProtection(PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection sellerProtection) {
    this.sellerProtection = sellerProtection;
    return this;
  }

   /**
   * Get sellerProtection
   * @return sellerProtection
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection getSellerProtection() {
    return sellerProtection;
  }

  public void setSellerProtection(PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection sellerProtection) {
    this.sellerProtection = sellerProtection;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation transactionExpiryDate(String transactionExpiryDate) {
    this.transactionExpiryDate = transactionExpiryDate;
    return this;
  }

   /**
   * The date on which the transaction expires and payment cannot be made. 
   * @return transactionExpiryDate
  **/
  @ApiModelProperty(value = "The date on which the transaction expires and payment cannot be made. ")
  public String getTransactionExpiryDate() {
    return transactionExpiryDate;
  }

  public void setTransactionExpiryDate(String transactionExpiryDate) {
    this.transactionExpiryDate = transactionExpiryDate;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation customUrl(String customUrl) {
    this.customUrl = customUrl;
    return this;
  }

   /**
   * For merchants to declare customs Customs declaration service URL. 
   * @return customUrl
  **/
  @ApiModelProperty(value = "For merchants to declare customs Customs declaration service URL. ")
  public String getCustomUrl() {
    return customUrl;
  }

  public void setCustomUrl(String customUrl) {
    this.customUrl = customUrl;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation schemeAssignedId(String schemeAssignedId) {
    this.schemeAssignedId = schemeAssignedId;
    return this;
  }

   /**
   * Unique id assigned to a merchant by the APM and not PSP The merchant ID, as boarded with Alipay 
   * @return schemeAssignedId
  **/
  @ApiModelProperty(value = "Unique id assigned to a merchant by the APM and not PSP The merchant ID, as boarded with Alipay ")
  public String getSchemeAssignedId() {
    return schemeAssignedId;
  }

  public void setSchemeAssignedId(String schemeAssignedId) {
    this.schemeAssignedId = schemeAssignedId;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation deviceUrl(String deviceUrl) {
    this.deviceUrl = deviceUrl;
    return this;
  }

   /**
   * The QR code value. Convert this value into an image and send it to the POS terminal to be displayed. The terminal can also perform the conversion. The value is a URL like in the example below: https://qr.alipay.com/pmxabcka1ts5grar12. 
   * @return deviceUrl
  **/
  @ApiModelProperty(value = "The QR code value. Convert this value into an image and send it to the POS terminal to be displayed. The terminal can also perform the conversion. The value is a URL like in the example below: https://qr.alipay.com/pmxabcka1ts5grar12. ")
  public String getDeviceUrl() {
    return deviceUrl;
  }

  public void setDeviceUrl(String deviceUrl) {
    this.deviceUrl = deviceUrl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PtsV2PaymentsPost201ResponseProcessorInformation ptsV2PaymentsPost201ResponseProcessorInformation = (PtsV2PaymentsPost201ResponseProcessorInformation) o;
    return Objects.equals(this.authIndicator, ptsV2PaymentsPost201ResponseProcessorInformation.authIndicator) &&
        Objects.equals(this.approvalCode, ptsV2PaymentsPost201ResponseProcessorInformation.approvalCode) &&
        Objects.equals(this.cardReferenceData, ptsV2PaymentsPost201ResponseProcessorInformation.cardReferenceData) &&
        Objects.equals(this.transactionId, ptsV2PaymentsPost201ResponseProcessorInformation.transactionId) &&
        Objects.equals(this.networkTransactionId, ptsV2PaymentsPost201ResponseProcessorInformation.networkTransactionId) &&
        Objects.equals(this.responseCode, ptsV2PaymentsPost201ResponseProcessorInformation.responseCode) &&
        Objects.equals(this.responseCodeSource, ptsV2PaymentsPost201ResponseProcessorInformation.responseCodeSource) &&
        Objects.equals(this.responseDetails, ptsV2PaymentsPost201ResponseProcessorInformation.responseDetails) &&
        Objects.equals(this.responseCategoryCode, ptsV2PaymentsPost201ResponseProcessorInformation.responseCategoryCode) &&
        Objects.equals(this.forwardedAcquirerCode, ptsV2PaymentsPost201ResponseProcessorInformation.forwardedAcquirerCode) &&
        Objects.equals(this.settlementDate, ptsV2PaymentsPost201ResponseProcessorInformation.settlementDate) &&
        Objects.equals(this.avs, ptsV2PaymentsPost201ResponseProcessorInformation.avs) &&
        Objects.equals(this.cardVerification, ptsV2PaymentsPost201ResponseProcessorInformation.cardVerification) &&
        Objects.equals(this.merchantAdvice, ptsV2PaymentsPost201ResponseProcessorInformation.merchantAdvice) &&
        Objects.equals(this.electronicVerificationResults, ptsV2PaymentsPost201ResponseProcessorInformation.electronicVerificationResults) &&
        Objects.equals(this.achVerification, ptsV2PaymentsPost201ResponseProcessorInformation.achVerification) &&
        Objects.equals(this.customer, ptsV2PaymentsPost201ResponseProcessorInformation.customer) &&
        Objects.equals(this.consumerAuthenticationResponse, ptsV2PaymentsPost201ResponseProcessorInformation.consumerAuthenticationResponse) &&
        Objects.equals(this.systemTraceAuditNumber, ptsV2PaymentsPost201ResponseProcessorInformation.systemTraceAuditNumber) &&
        Objects.equals(this.paymentAccountReferenceNumber, ptsV2PaymentsPost201ResponseProcessorInformation.paymentAccountReferenceNumber) &&
        Objects.equals(this.transactionIntegrityCode, ptsV2PaymentsPost201ResponseProcessorInformation.transactionIntegrityCode) &&
        Objects.equals(this.amexVerbalAuthReferenceNumber, ptsV2PaymentsPost201ResponseProcessorInformation.amexVerbalAuthReferenceNumber) &&
        Objects.equals(this.masterCardServiceCode, ptsV2PaymentsPost201ResponseProcessorInformation.masterCardServiceCode) &&
        Objects.equals(this.masterCardServiceReplyCode, ptsV2PaymentsPost201ResponseProcessorInformation.masterCardServiceReplyCode) &&
        Objects.equals(this.masterCardAuthenticationType, ptsV2PaymentsPost201ResponseProcessorInformation.masterCardAuthenticationType) &&
        Objects.equals(this.name, ptsV2PaymentsPost201ResponseProcessorInformation.name) &&
        Objects.equals(this.routing, ptsV2PaymentsPost201ResponseProcessorInformation.routing) &&
        Objects.equals(this.merchantNumber, ptsV2PaymentsPost201ResponseProcessorInformation.merchantNumber) &&
        Objects.equals(this.retrievalReferenceNumber, ptsV2PaymentsPost201ResponseProcessorInformation.retrievalReferenceNumber) &&
        Objects.equals(this.paymentUrl, ptsV2PaymentsPost201ResponseProcessorInformation.paymentUrl) &&
        Objects.equals(this.completeUrl, ptsV2PaymentsPost201ResponseProcessorInformation.completeUrl) &&
        Objects.equals(this.signature, ptsV2PaymentsPost201ResponseProcessorInformation.signature) &&
        Objects.equals(this.publicKey, ptsV2PaymentsPost201ResponseProcessorInformation.publicKey) &&
        Objects.equals(this.sellerProtection, ptsV2PaymentsPost201ResponseProcessorInformation.sellerProtection) &&
        Objects.equals(this.transactionExpiryDate, ptsV2PaymentsPost201ResponseProcessorInformation.transactionExpiryDate) &&
        Objects.equals(this.customUrl, ptsV2PaymentsPost201ResponseProcessorInformation.customUrl) &&
        Objects.equals(this.schemeAssignedId, ptsV2PaymentsPost201ResponseProcessorInformation.schemeAssignedId) &&
        Objects.equals(this.deviceUrl, ptsV2PaymentsPost201ResponseProcessorInformation.deviceUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authIndicator, approvalCode, cardReferenceData, transactionId, networkTransactionId, responseCode, responseCodeSource, responseDetails, responseCategoryCode, forwardedAcquirerCode, settlementDate, avs, cardVerification, merchantAdvice, electronicVerificationResults, achVerification, customer, consumerAuthenticationResponse, systemTraceAuditNumber, paymentAccountReferenceNumber, transactionIntegrityCode, amexVerbalAuthReferenceNumber, masterCardServiceCode, masterCardServiceReplyCode, masterCardAuthenticationType, name, routing, merchantNumber, retrievalReferenceNumber, paymentUrl, completeUrl, signature, publicKey, sellerProtection, transactionExpiryDate, customUrl, schemeAssignedId, deviceUrl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PtsV2PaymentsPost201ResponseProcessorInformation {\n");
    
    sb.append("    authIndicator: ").append(toIndentedString(authIndicator)).append("\n");
    sb.append("    approvalCode: ").append(toIndentedString(approvalCode)).append("\n");
    sb.append("    cardReferenceData: ").append(toIndentedString(cardReferenceData)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    networkTransactionId: ").append(toIndentedString(networkTransactionId)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    responseCodeSource: ").append(toIndentedString(responseCodeSource)).append("\n");
    sb.append("    responseDetails: ").append(toIndentedString(responseDetails)).append("\n");
    sb.append("    responseCategoryCode: ").append(toIndentedString(responseCategoryCode)).append("\n");
    sb.append("    forwardedAcquirerCode: ").append(toIndentedString(forwardedAcquirerCode)).append("\n");
    sb.append("    settlementDate: ").append(toIndentedString(settlementDate)).append("\n");
    sb.append("    avs: ").append(toIndentedString(avs)).append("\n");
    sb.append("    cardVerification: ").append(toIndentedString(cardVerification)).append("\n");
    sb.append("    merchantAdvice: ").append(toIndentedString(merchantAdvice)).append("\n");
    sb.append("    electronicVerificationResults: ").append(toIndentedString(electronicVerificationResults)).append("\n");
    sb.append("    achVerification: ").append(toIndentedString(achVerification)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    consumerAuthenticationResponse: ").append(toIndentedString(consumerAuthenticationResponse)).append("\n");
    sb.append("    systemTraceAuditNumber: ").append(toIndentedString(systemTraceAuditNumber)).append("\n");
    sb.append("    paymentAccountReferenceNumber: ").append(toIndentedString(paymentAccountReferenceNumber)).append("\n");
    sb.append("    transactionIntegrityCode: ").append(toIndentedString(transactionIntegrityCode)).append("\n");
    sb.append("    amexVerbalAuthReferenceNumber: ").append(toIndentedString(amexVerbalAuthReferenceNumber)).append("\n");
    sb.append("    masterCardServiceCode: ").append(toIndentedString(masterCardServiceCode)).append("\n");
    sb.append("    masterCardServiceReplyCode: ").append(toIndentedString(masterCardServiceReplyCode)).append("\n");
    sb.append("    masterCardAuthenticationType: ").append(toIndentedString(masterCardAuthenticationType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    routing: ").append(toIndentedString(routing)).append("\n");
    sb.append("    merchantNumber: ").append(toIndentedString(merchantNumber)).append("\n");
    sb.append("    retrievalReferenceNumber: ").append(toIndentedString(retrievalReferenceNumber)).append("\n");
    sb.append("    paymentUrl: ").append(toIndentedString(paymentUrl)).append("\n");
    sb.append("    completeUrl: ").append(toIndentedString(completeUrl)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    sellerProtection: ").append(toIndentedString(sellerProtection)).append("\n");
    sb.append("    transactionExpiryDate: ").append(toIndentedString(transactionExpiryDate)).append("\n");
    sb.append("    customUrl: ").append(toIndentedString(customUrl)).append("\n");
    sb.append("    schemeAssignedId: ").append(toIndentedString(schemeAssignedId)).append("\n");
    sb.append("    deviceUrl: ").append(toIndentedString(deviceUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

