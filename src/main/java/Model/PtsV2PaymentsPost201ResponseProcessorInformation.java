/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationAchVerification;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationAvs;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationCardVerification;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationCustomer;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice;
import Model.PtsV2PaymentsPost201ResponseProcessorInformationRouting;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * PtsV2PaymentsPost201ResponseProcessorInformation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-05-06T11:51:37.745+05:30")
public class PtsV2PaymentsPost201ResponseProcessorInformation {
  @SerializedName("authIndicator")
  private String authIndicator = null;

  @SerializedName("approvalCode")
  private String approvalCode = null;

  @SerializedName("transactionId")
  private String transactionId = null;

  @SerializedName("networkTransactionId")
  private String networkTransactionId = null;

  @SerializedName("providerTransactionId")
  private String providerTransactionId = null;

  @SerializedName("responseCode")
  private String responseCode = null;

  @SerializedName("responseCodeSource")
  private String responseCodeSource = null;

  @SerializedName("responseDetails")
  private String responseDetails = null;

  @SerializedName("responseCategoryCode")
  private String responseCategoryCode = null;

  @SerializedName("forwardedAcquirerCode")
  private String forwardedAcquirerCode = null;

  @SerializedName("avs")
  private PtsV2PaymentsPost201ResponseProcessorInformationAvs avs = null;

  @SerializedName("cardVerification")
  private PtsV2PaymentsPost201ResponseProcessorInformationCardVerification cardVerification = null;

  @SerializedName("merchantAdvice")
  private PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice merchantAdvice = null;

  @SerializedName("electronicVerificationResults")
  private PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults electronicVerificationResults = null;

  @SerializedName("achVerification")
  private PtsV2PaymentsPost201ResponseProcessorInformationAchVerification achVerification = null;

  @SerializedName("customer")
  private PtsV2PaymentsPost201ResponseProcessorInformationCustomer customer = null;

  @SerializedName("consumerAuthenticationResponse")
  private PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse consumerAuthenticationResponse = null;

  @SerializedName("systemTraceAuditNumber")
  private String systemTraceAuditNumber = null;

  @SerializedName("paymentAccountReferenceNumber")
  private String paymentAccountReferenceNumber = null;

  @SerializedName("transactionIntegrityCode")
  private String transactionIntegrityCode = null;

  @SerializedName("amexVerbalAuthReferenceNumber")
  private String amexVerbalAuthReferenceNumber = null;

  @SerializedName("salesSlipNumber")
  private BigDecimal salesSlipNumber = null;

  @SerializedName("masterCardServiceCode")
  private String masterCardServiceCode = null;

  @SerializedName("masterCardServiceReplyCode")
  private String masterCardServiceReplyCode = null;

  @SerializedName("masterCardAuthenticationType")
  private String masterCardAuthenticationType = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("routing")
  private PtsV2PaymentsPost201ResponseProcessorInformationRouting routing = null;

  @SerializedName("merchantNumber")
  private String merchantNumber = null;

  public PtsV2PaymentsPost201ResponseProcessorInformation authIndicator(String authIndicator) {
    this.authIndicator = authIndicator;
    return this;
  }

   /**
   * Flag that specifies the purpose of the authorization.  Possible values:  - **0**: Preauthorization  - **1**: Final authorization  For processor-specific information, see the auth_indicator field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html) 
   * @return authIndicator
  **/
  @ApiModelProperty(value = "Flag that specifies the purpose of the authorization.  Possible values:  - **0**: Preauthorization  - **1**: Final authorization  For processor-specific information, see the auth_indicator field in [Credit Card Services Using the SCMP API.](http://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html) ")
  public String getAuthIndicator() {
    return authIndicator;
  }

  public void setAuthIndicator(String authIndicator) {
    this.authIndicator = authIndicator;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation approvalCode(String approvalCode) {
    this.approvalCode = approvalCode;
    return this;
  }

   /**
   * Authorization code. Returned only when the processor returns this value. 
   * @return approvalCode
  **/
  @ApiModelProperty(value = "Authorization code. Returned only when the processor returns this value. ")
  public String getApprovalCode() {
    return approvalCode;
  }

  public void setApprovalCode(String approvalCode) {
    this.approvalCode = approvalCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this value. 
   * @return transactionId
  **/
  @ApiModelProperty(value = "Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this value. ")
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation networkTransactionId(String networkTransactionId) {
    this.networkTransactionId = networkTransactionId;
    return this;
  }

   /**
   * The description for this field is not available.
   * @return networkTransactionId
  **/
  @ApiModelProperty(value = "The description for this field is not available.")
  public String getNetworkTransactionId() {
    return networkTransactionId;
  }

  public void setNetworkTransactionId(String networkTransactionId) {
    this.networkTransactionId = networkTransactionId;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation providerTransactionId(String providerTransactionId) {
    this.providerTransactionId = providerTransactionId;
    return this;
  }

   /**
   * The description for this field is not available.
   * @return providerTransactionId
  **/
  @ApiModelProperty(value = "The description for this field is not available.")
  public String getProviderTransactionId() {
    return providerTransactionId;
  }

  public void setProviderTransactionId(String providerTransactionId) {
    this.providerTransactionId = providerTransactionId;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation responseCode(String responseCode) {
    this.responseCode = responseCode;
    return this;
  }

   /**
   * For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  Important Do not use this field to evaluate the result of the authorization. 
   * @return responseCode
  **/
  @ApiModelProperty(value = "For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  Important Do not use this field to evaluate the result of the authorization. ")
  public String getResponseCode() {
    return responseCode;
  }

  public void setResponseCode(String responseCode) {
    this.responseCode = responseCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation responseCodeSource(String responseCodeSource) {
    this.responseCodeSource = responseCodeSource;
    return this;
  }

   /**
   * Used by Visa only and contains the response source/reason code that identifies the source of the response decision. 
   * @return responseCodeSource
  **/
  @ApiModelProperty(value = "Used by Visa only and contains the response source/reason code that identifies the source of the response decision. ")
  public String getResponseCodeSource() {
    return responseCodeSource;
  }

  public void setResponseCodeSource(String responseCodeSource) {
    this.responseCodeSource = responseCodeSource;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation responseDetails(String responseDetails) {
    this.responseDetails = responseDetails;
    return this;
  }

   /**
   * This field might contain information about a decline. This field is supported only for **CyberSource through VisaNet**. 
   * @return responseDetails
  **/
  @ApiModelProperty(value = "This field might contain information about a decline. This field is supported only for **CyberSource through VisaNet**. ")
  public String getResponseDetails() {
    return responseDetails;
  }

  public void setResponseDetails(String responseDetails) {
    this.responseDetails = responseDetails;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation responseCategoryCode(String responseCategoryCode) {
    this.responseCategoryCode = responseCategoryCode;
    return this;
  }

   /**
   * Processor-defined response category code. The associated detail error code is in the auth_auth_response field or the auth_reversal_auth_ response field depending on which service you requested.  This field is supported only for:   - Japanese issuers  - Domestic transactions in Japan  - Comercio Latino—processor transaction ID required for troubleshooting  **Maximum length for processors**:   - Comercio Latino: 32  - All other processors: 3 
   * @return responseCategoryCode
  **/
  @ApiModelProperty(value = "Processor-defined response category code. The associated detail error code is in the auth_auth_response field or the auth_reversal_auth_ response field depending on which service you requested.  This field is supported only for:   - Japanese issuers  - Domestic transactions in Japan  - Comercio Latino—processor transaction ID required for troubleshooting  **Maximum length for processors**:   - Comercio Latino: 32  - All other processors: 3 ")
  public String getResponseCategoryCode() {
    return responseCategoryCode;
  }

  public void setResponseCategoryCode(String responseCategoryCode) {
    this.responseCategoryCode = responseCategoryCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation forwardedAcquirerCode(String forwardedAcquirerCode) {
    this.forwardedAcquirerCode = forwardedAcquirerCode;
    return this;
  }

   /**
   * Name of the Japanese acquirer that processed the transaction. Returned only for CCS (CAFIS) and JCN Gateway. Please contact the CyberSource Japan Support Group for more information. 
   * @return forwardedAcquirerCode
  **/
  @ApiModelProperty(value = "Name of the Japanese acquirer that processed the transaction. Returned only for CCS (CAFIS) and JCN Gateway. Please contact the CyberSource Japan Support Group for more information. ")
  public String getForwardedAcquirerCode() {
    return forwardedAcquirerCode;
  }

  public void setForwardedAcquirerCode(String forwardedAcquirerCode) {
    this.forwardedAcquirerCode = forwardedAcquirerCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation avs(PtsV2PaymentsPost201ResponseProcessorInformationAvs avs) {
    this.avs = avs;
    return this;
  }

   /**
   * Get avs
   * @return avs
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationAvs getAvs() {
    return avs;
  }

  public void setAvs(PtsV2PaymentsPost201ResponseProcessorInformationAvs avs) {
    this.avs = avs;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation cardVerification(PtsV2PaymentsPost201ResponseProcessorInformationCardVerification cardVerification) {
    this.cardVerification = cardVerification;
    return this;
  }

   /**
   * Get cardVerification
   * @return cardVerification
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationCardVerification getCardVerification() {
    return cardVerification;
  }

  public void setCardVerification(PtsV2PaymentsPost201ResponseProcessorInformationCardVerification cardVerification) {
    this.cardVerification = cardVerification;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation merchantAdvice(PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice merchantAdvice) {
    this.merchantAdvice = merchantAdvice;
    return this;
  }

   /**
   * Get merchantAdvice
   * @return merchantAdvice
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice getMerchantAdvice() {
    return merchantAdvice;
  }

  public void setMerchantAdvice(PtsV2PaymentsPost201ResponseProcessorInformationMerchantAdvice merchantAdvice) {
    this.merchantAdvice = merchantAdvice;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation electronicVerificationResults(PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults electronicVerificationResults) {
    this.electronicVerificationResults = electronicVerificationResults;
    return this;
  }

   /**
   * Get electronicVerificationResults
   * @return electronicVerificationResults
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults getElectronicVerificationResults() {
    return electronicVerificationResults;
  }

  public void setElectronicVerificationResults(PtsV2PaymentsPost201ResponseProcessorInformationElectronicVerificationResults electronicVerificationResults) {
    this.electronicVerificationResults = electronicVerificationResults;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation achVerification(PtsV2PaymentsPost201ResponseProcessorInformationAchVerification achVerification) {
    this.achVerification = achVerification;
    return this;
  }

   /**
   * Get achVerification
   * @return achVerification
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationAchVerification getAchVerification() {
    return achVerification;
  }

  public void setAchVerification(PtsV2PaymentsPost201ResponseProcessorInformationAchVerification achVerification) {
    this.achVerification = achVerification;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation customer(PtsV2PaymentsPost201ResponseProcessorInformationCustomer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(PtsV2PaymentsPost201ResponseProcessorInformationCustomer customer) {
    this.customer = customer;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation consumerAuthenticationResponse(PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse consumerAuthenticationResponse) {
    this.consumerAuthenticationResponse = consumerAuthenticationResponse;
    return this;
  }

   /**
   * Get consumerAuthenticationResponse
   * @return consumerAuthenticationResponse
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse getConsumerAuthenticationResponse() {
    return consumerAuthenticationResponse;
  }

  public void setConsumerAuthenticationResponse(PtsV2PaymentsPost201ResponseProcessorInformationConsumerAuthenticationResponse consumerAuthenticationResponse) {
    this.consumerAuthenticationResponse = consumerAuthenticationResponse;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation systemTraceAuditNumber(String systemTraceAuditNumber) {
    this.systemTraceAuditNumber = systemTraceAuditNumber;
    return this;
  }

   /**
   * This field is returned only for **American Express Direct** and **CyberSource through VisaNet**.  **American Express Direct**  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  **CyberSource through VisaNet**  System trace number that must be printed on the customer’s receipt. 
   * @return systemTraceAuditNumber
  **/
  @ApiModelProperty(value = "This field is returned only for **American Express Direct** and **CyberSource through VisaNet**.  **American Express Direct**  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  **CyberSource through VisaNet**  System trace number that must be printed on the customer’s receipt. ")
  public String getSystemTraceAuditNumber() {
    return systemTraceAuditNumber;
  }

  public void setSystemTraceAuditNumber(String systemTraceAuditNumber) {
    this.systemTraceAuditNumber = systemTraceAuditNumber;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation paymentAccountReferenceNumber(String paymentAccountReferenceNumber) {
    this.paymentAccountReferenceNumber = paymentAccountReferenceNumber;
    return this;
  }

   /**
   * Visa-generated reference number that identifies a card-present transaction for which youprovided one of the following:   - Visa primary account number (PAN)  - Visa-generated token for a PAN  This reference number serves as a link to the cardholder account and to all transactions for that account. 
   * @return paymentAccountReferenceNumber
  **/
  @ApiModelProperty(value = "Visa-generated reference number that identifies a card-present transaction for which youprovided one of the following:   - Visa primary account number (PAN)  - Visa-generated token for a PAN  This reference number serves as a link to the cardholder account and to all transactions for that account. ")
  public String getPaymentAccountReferenceNumber() {
    return paymentAccountReferenceNumber;
  }

  public void setPaymentAccountReferenceNumber(String paymentAccountReferenceNumber) {
    this.paymentAccountReferenceNumber = paymentAccountReferenceNumber;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation transactionIntegrityCode(String transactionIntegrityCode) {
    this.transactionIntegrityCode = transactionIntegrityCode;
    return this;
  }

   /**
   * Transaction integrity classification provided by Mastercard. This value specifies Mastercard’s evaluation of the transaction’s safety and security. This field is returned only for **CyberSource through VisaNet**.  For card-present transactions, possible values:   - **A1**: EMV or token in a secure, trusted environment  - **B1**: EMV or chip equivalent  - **C1**: Magnetic stripe  - **E1**: Key entered  - **U0**: Unclassified  For card-not-present transactions, possible values:   - **A2**: Digital transactions  - **B2**: Authenticated checkout  - **C2**: Transaction validation  - **D2**: Enhanced data  - **E2**: Generic messaging  - **U0**: Unclassified  For information about these values, contact Mastercard or your acquirer. 
   * @return transactionIntegrityCode
  **/
  @ApiModelProperty(value = "Transaction integrity classification provided by Mastercard. This value specifies Mastercard’s evaluation of the transaction’s safety and security. This field is returned only for **CyberSource through VisaNet**.  For card-present transactions, possible values:   - **A1**: EMV or token in a secure, trusted environment  - **B1**: EMV or chip equivalent  - **C1**: Magnetic stripe  - **E1**: Key entered  - **U0**: Unclassified  For card-not-present transactions, possible values:   - **A2**: Digital transactions  - **B2**: Authenticated checkout  - **C2**: Transaction validation  - **D2**: Enhanced data  - **E2**: Generic messaging  - **U0**: Unclassified  For information about these values, contact Mastercard or your acquirer. ")
  public String getTransactionIntegrityCode() {
    return transactionIntegrityCode;
  }

  public void setTransactionIntegrityCode(String transactionIntegrityCode) {
    this.transactionIntegrityCode = transactionIntegrityCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation amexVerbalAuthReferenceNumber(String amexVerbalAuthReferenceNumber) {
    this.amexVerbalAuthReferenceNumber = amexVerbalAuthReferenceNumber;
    return this;
  }

   /**
   * Referral response number for a verbal authorization with FDMS Nashville when using an American Express card. Give this number to American Express when you call them for the verbal authorization. 
   * @return amexVerbalAuthReferenceNumber
  **/
  @ApiModelProperty(value = "Referral response number for a verbal authorization with FDMS Nashville when using an American Express card. Give this number to American Express when you call them for the verbal authorization. ")
  public String getAmexVerbalAuthReferenceNumber() {
    return amexVerbalAuthReferenceNumber;
  }

  public void setAmexVerbalAuthReferenceNumber(String amexVerbalAuthReferenceNumber) {
    this.amexVerbalAuthReferenceNumber = amexVerbalAuthReferenceNumber;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation salesSlipNumber(BigDecimal salesSlipNumber) {
    this.salesSlipNumber = salesSlipNumber;
    return this;
  }

   /**
   * Transaction identifier that CyberSource generates. You have the option of printing the sales slip number on the receipt.  This field is supported only for **JCN Gateway**. 
   * maximum: 99999
   * @return salesSlipNumber
  **/
  @ApiModelProperty(value = "Transaction identifier that CyberSource generates. You have the option of printing the sales slip number on the receipt.  This field is supported only for **JCN Gateway**. ")
  public BigDecimal getSalesSlipNumber() {
    return salesSlipNumber;
  }

  public void setSalesSlipNumber(BigDecimal salesSlipNumber) {
    this.salesSlipNumber = salesSlipNumber;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation masterCardServiceCode(String masterCardServiceCode) {
    this.masterCardServiceCode = masterCardServiceCode;
    return this;
  }

   /**
   * Mastercard service that was used for the transaction. Mastercard provides this value to CyberSource.  Possible value:  - 53: Mastercard card-on-file token service 
   * @return masterCardServiceCode
  **/
  @ApiModelProperty(value = "Mastercard service that was used for the transaction. Mastercard provides this value to CyberSource.  Possible value:  - 53: Mastercard card-on-file token service ")
  public String getMasterCardServiceCode() {
    return masterCardServiceCode;
  }

  public void setMasterCardServiceCode(String masterCardServiceCode) {
    this.masterCardServiceCode = masterCardServiceCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation masterCardServiceReplyCode(String masterCardServiceReplyCode) {
    this.masterCardServiceReplyCode = masterCardServiceReplyCode;
    return this;
  }

   /**
   * Result of the Mastercard card-on-file token service. Mastercard provides this value to CyberSource.  Possible values:   - **C**: Service completed successfully.  - **F**: One of the following:    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 81 for an authorization or      authorization reversal.    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 01 for a tokenized request.    - Token requestor ID is missing or formatted incorrectly.  - **I**: One of the following:    - Invalid token requestor ID.    - Suspended or deactivated token.    - Invalid token (not in mapping table).  - **T**: Invalid combination of token requestor ID and token.  - **U**: Expired token.  - **W**: Primary account number (PAN) listed in electronic warning bulletin.  Note This field is returned only for **CyberSource through VisaNet**. 
   * @return masterCardServiceReplyCode
  **/
  @ApiModelProperty(value = "Result of the Mastercard card-on-file token service. Mastercard provides this value to CyberSource.  Possible values:   - **C**: Service completed successfully.  - **F**: One of the following:    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 81 for an authorization or      authorization reversal.    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 01 for a tokenized request.    - Token requestor ID is missing or formatted incorrectly.  - **I**: One of the following:    - Invalid token requestor ID.    - Suspended or deactivated token.    - Invalid token (not in mapping table).  - **T**: Invalid combination of token requestor ID and token.  - **U**: Expired token.  - **W**: Primary account number (PAN) listed in electronic warning bulletin.  Note This field is returned only for **CyberSource through VisaNet**. ")
  public String getMasterCardServiceReplyCode() {
    return masterCardServiceReplyCode;
  }

  public void setMasterCardServiceReplyCode(String masterCardServiceReplyCode) {
    this.masterCardServiceReplyCode = masterCardServiceReplyCode;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation masterCardAuthenticationType(String masterCardAuthenticationType) {
    this.masterCardAuthenticationType = masterCardAuthenticationType;
    return this;
  }

   /**
   * Type of authentication for which the transaction qualifies as determined by the Mastercard authentication service, which confirms the identity of the cardholder. Mastercard provides this value to CyberSource.  Possible values:   - **1**: Transaction qualifies for Mastercard authentication type 1.  - **2**: Transaction qualifies for Mastercard authentication type 2. 
   * @return masterCardAuthenticationType
  **/
  @ApiModelProperty(value = "Type of authentication for which the transaction qualifies as determined by the Mastercard authentication service, which confirms the identity of the cardholder. Mastercard provides this value to CyberSource.  Possible values:   - **1**: Transaction qualifies for Mastercard authentication type 1.  - **2**: Transaction qualifies for Mastercard authentication type 2. ")
  public String getMasterCardAuthenticationType() {
    return masterCardAuthenticationType;
  }

  public void setMasterCardAuthenticationType(String masterCardAuthenticationType) {
    this.masterCardAuthenticationType = masterCardAuthenticationType;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the Processor. 
   * @return name
  **/
  @ApiModelProperty(value = "Name of the Processor. ")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation routing(PtsV2PaymentsPost201ResponseProcessorInformationRouting routing) {
    this.routing = routing;
    return this;
  }

   /**
   * Get routing
   * @return routing
  **/
  @ApiModelProperty(value = "")
  public PtsV2PaymentsPost201ResponseProcessorInformationRouting getRouting() {
    return routing;
  }

  public void setRouting(PtsV2PaymentsPost201ResponseProcessorInformationRouting routing) {
    this.routing = routing;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformation merchantNumber(String merchantNumber) {
    this.merchantNumber = merchantNumber;
    return this;
  }

   /**
   * Identifier that was assigned to you by your acquirer.  This value must be printed on the receipt.  This field is supported only on **American Express Direct**, **FDC Nashville Global**, and **SIX**. 
   * @return merchantNumber
  **/
  @ApiModelProperty(value = "Identifier that was assigned to you by your acquirer.  This value must be printed on the receipt.  This field is supported only on **American Express Direct**, **FDC Nashville Global**, and **SIX**. ")
  public String getMerchantNumber() {
    return merchantNumber;
  }

  public void setMerchantNumber(String merchantNumber) {
    this.merchantNumber = merchantNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PtsV2PaymentsPost201ResponseProcessorInformation ptsV2PaymentsPost201ResponseProcessorInformation = (PtsV2PaymentsPost201ResponseProcessorInformation) o;
    return Objects.equals(this.authIndicator, ptsV2PaymentsPost201ResponseProcessorInformation.authIndicator) &&
        Objects.equals(this.approvalCode, ptsV2PaymentsPost201ResponseProcessorInformation.approvalCode) &&
        Objects.equals(this.transactionId, ptsV2PaymentsPost201ResponseProcessorInformation.transactionId) &&
        Objects.equals(this.networkTransactionId, ptsV2PaymentsPost201ResponseProcessorInformation.networkTransactionId) &&
        Objects.equals(this.providerTransactionId, ptsV2PaymentsPost201ResponseProcessorInformation.providerTransactionId) &&
        Objects.equals(this.responseCode, ptsV2PaymentsPost201ResponseProcessorInformation.responseCode) &&
        Objects.equals(this.responseCodeSource, ptsV2PaymentsPost201ResponseProcessorInformation.responseCodeSource) &&
        Objects.equals(this.responseDetails, ptsV2PaymentsPost201ResponseProcessorInformation.responseDetails) &&
        Objects.equals(this.responseCategoryCode, ptsV2PaymentsPost201ResponseProcessorInformation.responseCategoryCode) &&
        Objects.equals(this.forwardedAcquirerCode, ptsV2PaymentsPost201ResponseProcessorInformation.forwardedAcquirerCode) &&
        Objects.equals(this.avs, ptsV2PaymentsPost201ResponseProcessorInformation.avs) &&
        Objects.equals(this.cardVerification, ptsV2PaymentsPost201ResponseProcessorInformation.cardVerification) &&
        Objects.equals(this.merchantAdvice, ptsV2PaymentsPost201ResponseProcessorInformation.merchantAdvice) &&
        Objects.equals(this.electronicVerificationResults, ptsV2PaymentsPost201ResponseProcessorInformation.electronicVerificationResults) &&
        Objects.equals(this.achVerification, ptsV2PaymentsPost201ResponseProcessorInformation.achVerification) &&
        Objects.equals(this.customer, ptsV2PaymentsPost201ResponseProcessorInformation.customer) &&
        Objects.equals(this.consumerAuthenticationResponse, ptsV2PaymentsPost201ResponseProcessorInformation.consumerAuthenticationResponse) &&
        Objects.equals(this.systemTraceAuditNumber, ptsV2PaymentsPost201ResponseProcessorInformation.systemTraceAuditNumber) &&
        Objects.equals(this.paymentAccountReferenceNumber, ptsV2PaymentsPost201ResponseProcessorInformation.paymentAccountReferenceNumber) &&
        Objects.equals(this.transactionIntegrityCode, ptsV2PaymentsPost201ResponseProcessorInformation.transactionIntegrityCode) &&
        Objects.equals(this.amexVerbalAuthReferenceNumber, ptsV2PaymentsPost201ResponseProcessorInformation.amexVerbalAuthReferenceNumber) &&
        Objects.equals(this.salesSlipNumber, ptsV2PaymentsPost201ResponseProcessorInformation.salesSlipNumber) &&
        Objects.equals(this.masterCardServiceCode, ptsV2PaymentsPost201ResponseProcessorInformation.masterCardServiceCode) &&
        Objects.equals(this.masterCardServiceReplyCode, ptsV2PaymentsPost201ResponseProcessorInformation.masterCardServiceReplyCode) &&
        Objects.equals(this.masterCardAuthenticationType, ptsV2PaymentsPost201ResponseProcessorInformation.masterCardAuthenticationType) &&
        Objects.equals(this.name, ptsV2PaymentsPost201ResponseProcessorInformation.name) &&
        Objects.equals(this.routing, ptsV2PaymentsPost201ResponseProcessorInformation.routing) &&
        Objects.equals(this.merchantNumber, ptsV2PaymentsPost201ResponseProcessorInformation.merchantNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authIndicator, approvalCode, transactionId, networkTransactionId, providerTransactionId, responseCode, responseCodeSource, responseDetails, responseCategoryCode, forwardedAcquirerCode, avs, cardVerification, merchantAdvice, electronicVerificationResults, achVerification, customer, consumerAuthenticationResponse, systemTraceAuditNumber, paymentAccountReferenceNumber, transactionIntegrityCode, amexVerbalAuthReferenceNumber, salesSlipNumber, masterCardServiceCode, masterCardServiceReplyCode, masterCardAuthenticationType, name, routing, merchantNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PtsV2PaymentsPost201ResponseProcessorInformation {\n");
    
    sb.append("    authIndicator: ").append(toIndentedString(authIndicator)).append("\n");
    sb.append("    approvalCode: ").append(toIndentedString(approvalCode)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    networkTransactionId: ").append(toIndentedString(networkTransactionId)).append("\n");
    sb.append("    providerTransactionId: ").append(toIndentedString(providerTransactionId)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    responseCodeSource: ").append(toIndentedString(responseCodeSource)).append("\n");
    sb.append("    responseDetails: ").append(toIndentedString(responseDetails)).append("\n");
    sb.append("    responseCategoryCode: ").append(toIndentedString(responseCategoryCode)).append("\n");
    sb.append("    forwardedAcquirerCode: ").append(toIndentedString(forwardedAcquirerCode)).append("\n");
    sb.append("    avs: ").append(toIndentedString(avs)).append("\n");
    sb.append("    cardVerification: ").append(toIndentedString(cardVerification)).append("\n");
    sb.append("    merchantAdvice: ").append(toIndentedString(merchantAdvice)).append("\n");
    sb.append("    electronicVerificationResults: ").append(toIndentedString(electronicVerificationResults)).append("\n");
    sb.append("    achVerification: ").append(toIndentedString(achVerification)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    consumerAuthenticationResponse: ").append(toIndentedString(consumerAuthenticationResponse)).append("\n");
    sb.append("    systemTraceAuditNumber: ").append(toIndentedString(systemTraceAuditNumber)).append("\n");
    sb.append("    paymentAccountReferenceNumber: ").append(toIndentedString(paymentAccountReferenceNumber)).append("\n");
    sb.append("    transactionIntegrityCode: ").append(toIndentedString(transactionIntegrityCode)).append("\n");
    sb.append("    amexVerbalAuthReferenceNumber: ").append(toIndentedString(amexVerbalAuthReferenceNumber)).append("\n");
    sb.append("    salesSlipNumber: ").append(toIndentedString(salesSlipNumber)).append("\n");
    sb.append("    masterCardServiceCode: ").append(toIndentedString(masterCardServiceCode)).append("\n");
    sb.append("    masterCardServiceReplyCode: ").append(toIndentedString(masterCardServiceReplyCode)).append("\n");
    sb.append("    masterCardAuthenticationType: ").append(toIndentedString(masterCardAuthenticationType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    routing: ").append(toIndentedString(routing)).append("\n");
    sb.append("    merchantNumber: ").append(toIndentedString(merchantNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

