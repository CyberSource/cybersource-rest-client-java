/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Invoicingv2invoicesClientReferenceInformationPartner
 */

public class Invoicingv2invoicesClientReferenceInformationPartner {
  @SerializedName("developerId")
  private String developerId = null;

  @SerializedName("solutionId")
  private String solutionId = null;

  public Invoicingv2invoicesClientReferenceInformationPartner developerId(String developerId) {
    this.developerId = developerId;
    return this;
  }

   /**
   * Identifier for the developer that integrated a partner solution with Cybersource. Send this value with all requests that are sent through a partner solution built by that developer. Cybersource assigns the ID to the developer.  **Note** A developerId set to 999 means the submitted developer ID is incorrect. 
   * @return developerId
  **/
  @ApiModelProperty(value = "Identifier for the developer that integrated a partner solution with Cybersource. Send this value with all requests that are sent through a partner solution built by that developer. Cybersource assigns the ID to the developer.  **Note** A developerId set to 999 means the submitted developer ID is incorrect. ")
  public String getDeveloperId() {
    return developerId;
  }

  public void setDeveloperId(String developerId) {
    this.developerId = developerId;
  }

  public Invoicingv2invoicesClientReferenceInformationPartner solutionId(String solutionId) {
    this.solutionId = solutionId;
    return this;
  }

   /**
   * Identifier for the partner that integrated with Cybersource. Send this value with all requests sent through the partner solution. Cybersource assigns the ID to the partner.  **Note** A solutionId set to 999 means the submitted solutionId is incorrect. 
   * @return solutionId
  **/
  @ApiModelProperty(value = "Identifier for the partner that integrated with Cybersource. Send this value with all requests sent through the partner solution. Cybersource assigns the ID to the partner.  **Note** A solutionId set to 999 means the submitted solutionId is incorrect. ")
  public String getSolutionId() {
    return solutionId;
  }

  public void setSolutionId(String solutionId) {
    this.solutionId = solutionId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Invoicingv2invoicesClientReferenceInformationPartner invoicingv2invoicesClientReferenceInformationPartner = (Invoicingv2invoicesClientReferenceInformationPartner) o;
    return Objects.equals(this.developerId, invoicingv2invoicesClientReferenceInformationPartner.developerId) &&
        Objects.equals(this.solutionId, invoicingv2invoicesClientReferenceInformationPartner.solutionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(developerId, solutionId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Invoicingv2invoicesClientReferenceInformationPartner {\n");
    
    if (developerId != null) sb.append("    developerId: ").append(toIndentedString(developerId)).append("\n");
    if (solutionId != null) sb.append("    solutionId: ").append(toIndentedString(solutionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

