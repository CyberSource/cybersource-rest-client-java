/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Ptsv2paymentsRecipientInformation
 */

public class Ptsv2paymentsRecipientInformation {
  @SerializedName("accountId")
  private String accountId = null;

  @SerializedName("accountType")
  private String accountType = null;

  @SerializedName("firstName")
  private String firstName = null;

  @SerializedName("middleName")
  private String middleName = null;

  @SerializedName("lastName")
  private String lastName = null;

  @SerializedName("address1")
  private String address1 = null;

  @SerializedName("administrativeArea")
  private String administrativeArea = null;

  @SerializedName("postalCode")
  private String postalCode = null;

  @SerializedName("country")
  private String country = null;

  @SerializedName("dateOfBirth")
  private String dateOfBirth = null;

  @SerializedName("beneficiaryId")
  private String beneficiaryId = null;

  @SerializedName("beneficiaryName")
  private String beneficiaryName = null;

  @SerializedName("beneficiaryAddress")
  private String beneficiaryAddress = null;

  @SerializedName("aliasName")
  private String aliasName = null;

  @SerializedName("nationality")
  private String nationality = null;

  @SerializedName("countryOfBirth")
  private String countryOfBirth = null;

  @SerializedName("occupation")
  private String occupation = null;

  @SerializedName("email")
  private String email = null;

  @SerializedName("locality")
  private String locality = null;

  public Ptsv2paymentsRecipientInformation accountId(String accountId) {
    this.accountId = accountId;
    return this;
  }

   /**
   * Identifier for the recipient&#39;s account. This field is applicable for AFT transactions. 
   * @return accountId
  **/
  @ApiModelProperty(value = "Identifier for the recipient's account. This field is applicable for AFT transactions. ")
  public String getAccountId() {
    return accountId;
  }

  public void setAccountId(String accountId) {
    this.accountId = accountId;
  }

  public Ptsv2paymentsRecipientInformation accountType(String accountType) {
    this.accountType = accountType;
    return this;
  }

   /**
   * Identifies the recipient&#39;s account type. This field is applicable for AFT transactions.  Valid values are:   - &#x60;00&#x60; for Other   - &#x60;01&#x60; for Routing Transit Number (RTN) + Bank Account Number (BAN)   - &#x60;02&#x60; for International Bank Account Number (IBAN)   - &#x60;03&#x60; for Card Account   - &#x60;06&#x60; for Bank Account Number (BAN) + Bank Identification Code (BIC), also known as a SWIFT code 
   * @return accountType
  **/
  @ApiModelProperty(value = "Identifies the recipient's account type. This field is applicable for AFT transactions.  Valid values are:   - `00` for Other   - `01` for Routing Transit Number (RTN) + Bank Account Number (BAN)   - `02` for International Bank Account Number (IBAN)   - `03` for Card Account   - `06` for Bank Account Number (BAN) + Bank Identification Code (BIC), also known as a SWIFT code ")
  public String getAccountType() {
    return accountType;
  }

  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }

  public Ptsv2paymentsRecipientInformation firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

   /**
   * First name of the recipient. This field is applicable for AFT transactions.    Only alpha numeric values are supported. Special characters not in the standard ASCII character set, are not supported and will be stripped before being sent to sent to the processor. 
   * @return firstName
  **/
  @ApiModelProperty(value = "First name of the recipient. This field is applicable for AFT transactions.    Only alpha numeric values are supported. Special characters not in the standard ASCII character set, are not supported and will be stripped before being sent to sent to the processor. ")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public Ptsv2paymentsRecipientInformation middleName(String middleName) {
    this.middleName = middleName;
    return this;
  }

   /**
   * Middle name of the recipient. This field is applicable for AFT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set, are not supported and will be stripped before being sent to sent to the processor. 
   * @return middleName
  **/
  @ApiModelProperty(value = "Middle name of the recipient. This field is applicable for AFT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set, are not supported and will be stripped before being sent to sent to the processor. ")
  public String getMiddleName() {
    return middleName;
  }

  public void setMiddleName(String middleName) {
    this.middleName = middleName;
  }

  public Ptsv2paymentsRecipientInformation lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name of the recipient. This field is applicable for AFT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set, are not supported and will be stripped before being sent to sent to the processor. 
   * @return lastName
  **/
  @ApiModelProperty(value = "Last name of the recipient. This field is applicable for AFT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set, are not supported and will be stripped before being sent to sent to the processor. ")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public Ptsv2paymentsRecipientInformation address1(String address1) {
    this.address1 = address1;
    return this;
  }

   /**
   * The street address of the recipient This field is applicable for AFT and OCT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set are not supported and will be stripped before being sent to sent to the processor.          
   * @return address1
  **/
  @ApiModelProperty(value = "The street address of the recipient This field is applicable for AFT and OCT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set are not supported and will be stripped before being sent to sent to the processor.          ")
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(String address1) {
    this.address1 = address1;
  }

  public Ptsv2paymentsRecipientInformation administrativeArea(String administrativeArea) {
    this.administrativeArea = administrativeArea;
    return this;
  }

   /**
   * The state or province of the recipient. This field is applicable for AFT transactions when the recipient country is US or CA. Else it is optional.  Must be a two character value 
   * @return administrativeArea
  **/
  @ApiModelProperty(value = "The state or province of the recipient. This field is applicable for AFT transactions when the recipient country is US or CA. Else it is optional.  Must be a two character value ")
  public String getAdministrativeArea() {
    return administrativeArea;
  }

  public void setAdministrativeArea(String administrativeArea) {
    this.administrativeArea = administrativeArea;
  }

  public Ptsv2paymentsRecipientInformation postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Partial postal code for the recipient&#39;s address. For example, if the postal code is **NN5 7SG**, the value for this field should be the first part of the postal code: **NN5**. This field is a _pass-through_, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor. 
   * @return postalCode
  **/
  @ApiModelProperty(value = "Partial postal code for the recipient's address. For example, if the postal code is **NN5 7SG**, the value for this field should be the first part of the postal code: **NN5**. This field is a _pass-through_, which means that CyberSource does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor. ")
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }

  public Ptsv2paymentsRecipientInformation country(String country) {
    this.country = country;
    return this;
  }

   /**
   * The country associated with the address of the recipient. This field is applicable for AFT and OCT transactions.  Must be a two character ISO country code.  For example, see [ISO Country Code](https://developer.cybersource.com/docs/cybs/en-us/country-codes/reference/all/na/country-codes/country-codes.html) 
   * @return country
  **/
  @ApiModelProperty(value = "The country associated with the address of the recipient. This field is applicable for AFT and OCT transactions.  Must be a two character ISO country code.  For example, see [ISO Country Code](https://developer.cybersource.com/docs/cybs/en-us/country-codes/reference/all/na/country-codes/country-codes.html) ")
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public Ptsv2paymentsRecipientInformation dateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

   /**
   * Recipient&#39;s date of birth. **Format**: &#x60;YYYYMMDD&#x60;.  This field is a &#x60;pass-through&#x60;, which means that CyberSource ensures that the value is eight numeric characters but otherwise does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor. 
   * @return dateOfBirth
  **/
  @ApiModelProperty(value = "Recipient's date of birth. **Format**: `YYYYMMDD`.  This field is a `pass-through`, which means that CyberSource ensures that the value is eight numeric characters but otherwise does not verify the value or modify it in any way before sending it to the processor. If the field is not required for the transaction, CyberSource does not forward it to the processor. ")
  public String getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }

  public Ptsv2paymentsRecipientInformation beneficiaryId(String beneficiaryId) {
    this.beneficiaryId = beneficiaryId;
    return this;
  }

   /**
   * Only for e-wallets: ID, username, hash or anything uniquely identifying the ultimate beneficiary. 
   * @return beneficiaryId
  **/
  @ApiModelProperty(value = "Only for e-wallets: ID, username, hash or anything uniquely identifying the ultimate beneficiary. ")
  public String getBeneficiaryId() {
    return beneficiaryId;
  }

  public void setBeneficiaryId(String beneficiaryId) {
    this.beneficiaryId = beneficiaryId;
  }

  public Ptsv2paymentsRecipientInformation beneficiaryName(String beneficiaryName) {
    this.beneficiaryName = beneficiaryName;
    return this;
  }

   /**
   * Only for e-wallets: The ultimate beneficiary&#39;s full name. 
   * @return beneficiaryName
  **/
  @ApiModelProperty(value = "Only for e-wallets: The ultimate beneficiary's full name. ")
  public String getBeneficiaryName() {
    return beneficiaryName;
  }

  public void setBeneficiaryName(String beneficiaryName) {
    this.beneficiaryName = beneficiaryName;
  }

  public Ptsv2paymentsRecipientInformation beneficiaryAddress(String beneficiaryAddress) {
    this.beneficiaryAddress = beneficiaryAddress;
    return this;
  }

   /**
   * Only for e-wallets: The ultimate beneficiary&#39;s street address (street, zip code, city), excluding the country. Example: \&quot;Main street 1, 12345, Barcelona 
   * @return beneficiaryAddress
  **/
  @ApiModelProperty(value = "Only for e-wallets: The ultimate beneficiary's street address (street, zip code, city), excluding the country. Example: \"Main street 1, 12345, Barcelona ")
  public String getBeneficiaryAddress() {
    return beneficiaryAddress;
  }

  public void setBeneficiaryAddress(String beneficiaryAddress) {
    this.beneficiaryAddress = beneficiaryAddress;
  }

  public Ptsv2paymentsRecipientInformation aliasName(String aliasName) {
    this.aliasName = aliasName;
    return this;
  }

   /**
   * Account owner alias name. 
   * @return aliasName
  **/
  @ApiModelProperty(value = "Account owner alias name. ")
  public String getAliasName() {
    return aliasName;
  }

  public void setAliasName(String aliasName) {
    this.aliasName = aliasName;
  }

  public Ptsv2paymentsRecipientInformation nationality(String nationality) {
    this.nationality = nationality;
    return this;
  }

   /**
   * Account Owner Nationality
   * @return nationality
  **/
  @ApiModelProperty(value = "Account Owner Nationality")
  public String getNationality() {
    return nationality;
  }

  public void setNationality(String nationality) {
    this.nationality = nationality;
  }

  public Ptsv2paymentsRecipientInformation countryOfBirth(String countryOfBirth) {
    this.countryOfBirth = countryOfBirth;
    return this;
  }

   /**
   * Account Owner Country of Birth
   * @return countryOfBirth
  **/
  @ApiModelProperty(value = "Account Owner Country of Birth")
  public String getCountryOfBirth() {
    return countryOfBirth;
  }

  public void setCountryOfBirth(String countryOfBirth) {
    this.countryOfBirth = countryOfBirth;
  }

  public Ptsv2paymentsRecipientInformation occupation(String occupation) {
    this.occupation = occupation;
    return this;
  }

   /**
   * Account Owner Occupation
   * @return occupation
  **/
  @ApiModelProperty(value = "Account Owner Occupation")
  public String getOccupation() {
    return occupation;
  }

  public void setOccupation(String occupation) {
    this.occupation = occupation;
  }

  public Ptsv2paymentsRecipientInformation email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Account Owner email address
   * @return email
  **/
  @ApiModelProperty(value = "Account Owner email address")
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public Ptsv2paymentsRecipientInformation locality(String locality) {
    this.locality = locality;
    return this;
  }

   /**
   * The city of the recipient. This field is applicable for AFT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set are not supported and will be stripped before being sent to sent to the processor. 
   * @return locality
  **/
  @ApiModelProperty(value = "The city of the recipient. This field is applicable for AFT transactions.  Only alpha numeric values are supported. Special characters not in the standard ASCII character set are not supported and will be stripped before being sent to sent to the processor. ")
  public String getLocality() {
    return locality;
  }

  public void setLocality(String locality) {
    this.locality = locality;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ptsv2paymentsRecipientInformation ptsv2paymentsRecipientInformation = (Ptsv2paymentsRecipientInformation) o;
    return Objects.equals(this.accountId, ptsv2paymentsRecipientInformation.accountId) &&
        Objects.equals(this.accountType, ptsv2paymentsRecipientInformation.accountType) &&
        Objects.equals(this.firstName, ptsv2paymentsRecipientInformation.firstName) &&
        Objects.equals(this.middleName, ptsv2paymentsRecipientInformation.middleName) &&
        Objects.equals(this.lastName, ptsv2paymentsRecipientInformation.lastName) &&
        Objects.equals(this.address1, ptsv2paymentsRecipientInformation.address1) &&
        Objects.equals(this.administrativeArea, ptsv2paymentsRecipientInformation.administrativeArea) &&
        Objects.equals(this.postalCode, ptsv2paymentsRecipientInformation.postalCode) &&
        Objects.equals(this.country, ptsv2paymentsRecipientInformation.country) &&
        Objects.equals(this.dateOfBirth, ptsv2paymentsRecipientInformation.dateOfBirth) &&
        Objects.equals(this.beneficiaryId, ptsv2paymentsRecipientInformation.beneficiaryId) &&
        Objects.equals(this.beneficiaryName, ptsv2paymentsRecipientInformation.beneficiaryName) &&
        Objects.equals(this.beneficiaryAddress, ptsv2paymentsRecipientInformation.beneficiaryAddress) &&
        Objects.equals(this.aliasName, ptsv2paymentsRecipientInformation.aliasName) &&
        Objects.equals(this.nationality, ptsv2paymentsRecipientInformation.nationality) &&
        Objects.equals(this.countryOfBirth, ptsv2paymentsRecipientInformation.countryOfBirth) &&
        Objects.equals(this.occupation, ptsv2paymentsRecipientInformation.occupation) &&
        Objects.equals(this.email, ptsv2paymentsRecipientInformation.email) &&
        Objects.equals(this.locality, ptsv2paymentsRecipientInformation.locality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, accountType, firstName, middleName, lastName, address1, administrativeArea, postalCode, country, dateOfBirth, beneficiaryId, beneficiaryName, beneficiaryAddress, aliasName, nationality, countryOfBirth, occupation, email, locality);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ptsv2paymentsRecipientInformation {\n");
    
    if (accountId != null) sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    if (accountType != null) sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    if (firstName != null) sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    if (middleName != null) sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    if (lastName != null) sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    if (address1 != null) sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    if (administrativeArea != null) sb.append("    administrativeArea: ").append(toIndentedString(administrativeArea)).append("\n");
    if (postalCode != null) sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    if (country != null) sb.append("    country: ").append(toIndentedString(country)).append("\n");
    if (dateOfBirth != null) sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    if (beneficiaryId != null) sb.append("    beneficiaryId: ").append(toIndentedString(beneficiaryId)).append("\n");
    if (beneficiaryName != null) sb.append("    beneficiaryName: ").append(toIndentedString(beneficiaryName)).append("\n");
    if (beneficiaryAddress != null) sb.append("    beneficiaryAddress: ").append(toIndentedString(beneficiaryAddress)).append("\n");
    if (aliasName != null) sb.append("    aliasName: ").append(toIndentedString(aliasName)).append("\n");
    if (nationality != null) sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    if (countryOfBirth != null) sb.append("    countryOfBirth: ").append(toIndentedString(countryOfBirth)).append("\n");
    if (occupation != null) sb.append("    occupation: ").append(toIndentedString(occupation)).append("\n");
    if (email != null) sb.append("    email: ").append(toIndentedString(email)).append("\n");
    if (locality != null) sb.append("    locality: ").append(toIndentedString(locality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

