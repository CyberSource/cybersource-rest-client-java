/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Ptsv1pushfundstransferSenderInformationPaymentInformationCard
 */

public class Ptsv1pushfundstransferSenderInformationPaymentInformationCard {
  @SerializedName("type")
  private String type = null;

  @SerializedName("securityCode")
  private String securityCode = null;

  @SerializedName("sourceAccountType")
  private String sourceAccountType = null;

  @SerializedName("number")
  private String number = null;

  @SerializedName("expirationMonth")
  private String expirationMonth = null;

  @SerializedName("expirationYear")
  private String expirationYear = null;

  public Ptsv1pushfundstransferSenderInformationPaymentInformationCard type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Three-digit value that indicates the card type.  IMPORTANT It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values:  - &#x60;001&#x60;: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value 001 for Visa Electron. - &#x60;002&#x60;: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. 
   * @return type
  **/
  @ApiModelProperty(value = "Three-digit value that indicates the card type.  IMPORTANT It is strongly recommended that you include the card type field in request messages even if it is optional for your processor and card type. Omitting the card type can cause the transaction to be processed with the wrong card type.  Possible values:  - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value 001 for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. ")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Ptsv1pushfundstransferSenderInformationPaymentInformationCard securityCode(String securityCode) {
    this.securityCode = securityCode;
    return this;
  }

   /**
   * 3-digit value that indicates the card Cvv2Value. Values can be 0-9.  This field is supported in Mastercard Send. 
   * @return securityCode
  **/
  @ApiModelProperty(value = "3-digit value that indicates the card Cvv2Value. Values can be 0-9.  This field is supported in Mastercard Send. ")
  public String getSecurityCode() {
    return securityCode;
  }

  public void setSecurityCode(String securityCode) {
    this.securityCode = securityCode;
  }

  public Ptsv1pushfundstransferSenderInformationPaymentInformationCard sourceAccountType(String sourceAccountType) {
    this.sourceAccountType = sourceAccountType;
    return this;
  }

   /**
   * Flag that specifies the type of account associated with the card. The cardholder provides this information during the payment process.  Valid values for Visa Platform Connect: - &#x60;CHECKING&#x60;: Checking account - &#x60;CREDIT&#x60;: Credit card account - &#x60;SAVING&#x60;: Saving account - &#x60;LINE_OF_CREDIT&#x60;: Line of credit or credit portion of combo card - &#x60;PREPAID&#x60;: Prepaid card account or prepaid portion of combo card - &#x60;UNIVERSAL&#x60;: Universal account  Valid values for Mastercard Send: - &#x60;00&#x60;: Other, - &#x60;01&#x60;: RTN + Bank Account, - &#x60;02&#x60;: IBAN, - &#x60;03&#x60;: Card Account, - &#x60;04&#x60;: Email, - &#x60;05&#x60;: Phone Number, - &#x60;06&#x60;: Bank account number (BAN) + Bank Identification Сode (BIC), - &#x60;07&#x60;: Wallet ID, - &#x60;08&#x60;: Social Network ID. Numeric, 2 characters.  This field is supported in Mastercard Send. 
   * @return sourceAccountType
  **/
  @ApiModelProperty(value = "Flag that specifies the type of account associated with the card. The cardholder provides this information during the payment process.  Valid values for Visa Platform Connect: - `CHECKING`: Checking account - `CREDIT`: Credit card account - `SAVING`: Saving account - `LINE_OF_CREDIT`: Line of credit or credit portion of combo card - `PREPAID`: Prepaid card account or prepaid portion of combo card - `UNIVERSAL`: Universal account  Valid values for Mastercard Send: - `00`: Other, - `01`: RTN + Bank Account, - `02`: IBAN, - `03`: Card Account, - `04`: Email, - `05`: Phone Number, - `06`: Bank account number (BAN) + Bank Identification Сode (BIC), - `07`: Wallet ID, - `08`: Social Network ID. Numeric, 2 characters.  This field is supported in Mastercard Send. ")
  public String getSourceAccountType() {
    return sourceAccountType;
  }

  public void setSourceAccountType(String sourceAccountType) {
    this.sourceAccountType = sourceAccountType;
  }

  public Ptsv1pushfundstransferSenderInformationPaymentInformationCard number(String number) {
    this.number = number;
    return this;
  }

   /**
   * The customer&#39;s payment card number, also known as the Primary Account Number (PAN).  This field is supported in Mastercard Send. 
   * @return number
  **/
  @ApiModelProperty(value = "The customer's payment card number, also known as the Primary Account Number (PAN).  This field is supported in Mastercard Send. ")
  public String getNumber() {
    return number;
  }

  public void setNumber(String number) {
    this.number = number;
  }

  public Ptsv1pushfundstransferSenderInformationPaymentInformationCard expirationMonth(String expirationMonth) {
    this.expirationMonth = expirationMonth;
    return this;
  }

   /**
   * Two-digit month in which the payment card expires.  Format: MM.  Valid values: 01 through 12. Leading 0 is required.  This field is supported for Mastercard Send. 
   * @return expirationMonth
  **/
  @ApiModelProperty(value = "Two-digit month in which the payment card expires.  Format: MM.  Valid values: 01 through 12. Leading 0 is required.  This field is supported for Mastercard Send. ")
  public String getExpirationMonth() {
    return expirationMonth;
  }

  public void setExpirationMonth(String expirationMonth) {
    this.expirationMonth = expirationMonth;
  }

  public Ptsv1pushfundstransferSenderInformationPaymentInformationCard expirationYear(String expirationYear) {
    this.expirationYear = expirationYear;
    return this;
  }

   /**
   * Four-digit year in which the payment card expires.  This field is supported for Mastercard Send. 
   * @return expirationYear
  **/
  @ApiModelProperty(value = "Four-digit year in which the payment card expires.  This field is supported for Mastercard Send. ")
  public String getExpirationYear() {
    return expirationYear;
  }

  public void setExpirationYear(String expirationYear) {
    this.expirationYear = expirationYear;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ptsv1pushfundstransferSenderInformationPaymentInformationCard ptsv1pushfundstransferSenderInformationPaymentInformationCard = (Ptsv1pushfundstransferSenderInformationPaymentInformationCard) o;
    return Objects.equals(this.type, ptsv1pushfundstransferSenderInformationPaymentInformationCard.type) &&
        Objects.equals(this.securityCode, ptsv1pushfundstransferSenderInformationPaymentInformationCard.securityCode) &&
        Objects.equals(this.sourceAccountType, ptsv1pushfundstransferSenderInformationPaymentInformationCard.sourceAccountType) &&
        Objects.equals(this.number, ptsv1pushfundstransferSenderInformationPaymentInformationCard.number) &&
        Objects.equals(this.expirationMonth, ptsv1pushfundstransferSenderInformationPaymentInformationCard.expirationMonth) &&
        Objects.equals(this.expirationYear, ptsv1pushfundstransferSenderInformationPaymentInformationCard.expirationYear);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, securityCode, sourceAccountType, number, expirationMonth, expirationYear);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ptsv1pushfundstransferSenderInformationPaymentInformationCard {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    securityCode: ").append(toIndentedString(securityCode)).append("\n");
    sb.append("    sourceAccountType: ").append(toIndentedString(sourceAccountType)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    expirationMonth: ").append(toIndentedString(expirationMonth)).append("\n");
    sb.append("    expirationYear: ").append(toIndentedString(expirationYear)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

