/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import Model.InlineResponse2018OrderInformationCurrencyConversionOffer;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * InlineResponse2018OrderInformationCurrencyConversion
 */

public class InlineResponse2018OrderInformationCurrencyConversion {
  @SerializedName("type")
  private String type = null;

  @SerializedName("reconciliationId")
  private String reconciliationId = null;

  @SerializedName("offer")
  private List<InlineResponse2018OrderInformationCurrencyConversionOffer> offer = null;

  @SerializedName("disclaimer")
  private String disclaimer = null;

  public InlineResponse2018OrderInformationCurrencyConversion type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Valid Values: - &#x60;DCC&#x60;: Dynamic Currency Conversion - &#x60;MCP&#x60;: Multi-Currency Pricing This should be echo&#39;d from the request 
   * @return type
  **/
  @ApiModelProperty(value = "Valid Values: - `DCC`: Dynamic Currency Conversion - `MCP`: Multi-Currency Pricing This should be echo'd from the request ")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public InlineResponse2018OrderInformationCurrencyConversion reconciliationId(String reconciliationId) {
    this.reconciliationId = reconciliationId;
    return this;
  }

   /**
   * Unique identifier generated by the DCC provider.
   * @return reconciliationId
  **/
  @ApiModelProperty(required = true, value = "Unique identifier generated by the DCC provider.")
  public String getReconciliationId() {
    return reconciliationId;
  }

  public void setReconciliationId(String reconciliationId) {
    this.reconciliationId = reconciliationId;
  }

  public InlineResponse2018OrderInformationCurrencyConversion offer(List<InlineResponse2018OrderInformationCurrencyConversionOffer> offer) {
    this.offer = offer;
    return this;
  }

  public InlineResponse2018OrderInformationCurrencyConversion addOfferItem(InlineResponse2018OrderInformationCurrencyConversionOffer offerItem) {
    if (this.offer == null) {
      this.offer = new ArrayList<InlineResponse2018OrderInformationCurrencyConversionOffer>();
    }
    this.offer.add(offerItem);
    return this;
  }

   /**
   * When type is DCC this is a single item. When type is MCP this is an array that repeats for each currency that&#39;s configured by the currency conversion provider for the merchant. 
   * @return offer
  **/
  @ApiModelProperty(value = "When type is DCC this is a single item. When type is MCP this is an array that repeats for each currency that's configured by the currency conversion provider for the merchant. ")
  public List<InlineResponse2018OrderInformationCurrencyConversionOffer> getOffer() {
    return offer;
  }

  public void setOffer(List<InlineResponse2018OrderInformationCurrencyConversionOffer> offer) {
    this.offer = offer;
  }

  public InlineResponse2018OrderInformationCurrencyConversion disclaimer(String disclaimer) {
    this.disclaimer = disclaimer;
    return this;
  }

   /**
   * This text is intended to inform customers about their opt-in choices. It should include details such  as the amount, exchange rate, currency, mark-up, and any other regulated requirements, such as  the mark-up over the ECB rate, if applicable. It is mandatory for DCC (Dynamic Currency  Conversion) and optional otherwise. This information will be displayed on the screen and printed on  the receipt without modification. 
   * @return disclaimer
  **/
  @ApiModelProperty(value = "This text is intended to inform customers about their opt-in choices. It should include details such  as the amount, exchange rate, currency, mark-up, and any other regulated requirements, such as  the mark-up over the ECB rate, if applicable. It is mandatory for DCC (Dynamic Currency  Conversion) and optional otherwise. This information will be displayed on the screen and printed on  the receipt without modification. ")
  public String getDisclaimer() {
    return disclaimer;
  }

  public void setDisclaimer(String disclaimer) {
    this.disclaimer = disclaimer;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2018OrderInformationCurrencyConversion inlineResponse2018OrderInformationCurrencyConversion = (InlineResponse2018OrderInformationCurrencyConversion) o;
    return Objects.equals(this.type, inlineResponse2018OrderInformationCurrencyConversion.type) &&
        Objects.equals(this.reconciliationId, inlineResponse2018OrderInformationCurrencyConversion.reconciliationId) &&
        Objects.equals(this.offer, inlineResponse2018OrderInformationCurrencyConversion.offer) &&
        Objects.equals(this.disclaimer, inlineResponse2018OrderInformationCurrencyConversion.disclaimer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, reconciliationId, offer, disclaimer);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2018OrderInformationCurrencyConversion {\n");
    
    if (type != null) sb.append("    type: ").append(toIndentedString(type)).append("\n");
    if (reconciliationId != null) sb.append("    reconciliationId: ").append(toIndentedString(reconciliationId)).append("\n");
    if (offer != null) sb.append("    offer: ").append(toIndentedString(offer)).append("\n");
    if (disclaimer != null) sb.append("    disclaimer: ").append(toIndentedString(disclaimer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

