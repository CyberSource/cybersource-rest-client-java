/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Ptsv2billingagreementsConsumerAuthenticationInformation
 */

public class Ptsv2billingagreementsConsumerAuthenticationInformation {
  @SerializedName("authenticationTransactionContextId")
  private String authenticationTransactionContextId = null;

  @SerializedName("cavv")
  private String cavv = null;

  @SerializedName("transactionToken")
  private String transactionToken = null;

  @SerializedName("xid")
  private String xid = null;

  public Ptsv2billingagreementsConsumerAuthenticationInformation authenticationTransactionContextId(String authenticationTransactionContextId) {
    this.authenticationTransactionContextId = authenticationTransactionContextId;
    return this;
  }

   /**
   * Payer authentication transaction identifier passed to link the validation and authorization calls. 
   * @return authenticationTransactionContextId
  **/
  @ApiModelProperty(value = "Payer authentication transaction identifier passed to link the validation and authorization calls. ")
  public String getAuthenticationTransactionContextId() {
    return authenticationTransactionContextId;
  }

  public void setAuthenticationTransactionContextId(String authenticationTransactionContextId) {
    this.authenticationTransactionContextId = authenticationTransactionContextId;
  }

  public Ptsv2billingagreementsConsumerAuthenticationInformation cavv(String cavv) {
    this.cavv = cavv;
    return this;
  }

   /**
   * Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor. 
   * @return cavv
  **/
  @ApiModelProperty(value = "Unique identifier generated by the card-issuing bank for Visa, American Express, JCB, Diners Club, and Discover transactions after the customer is authenticated. The value is in base64. When you request the card authorization service, CyberSource automatically converts the value, not the field name, to the format required by your payment processor. ")
  public String getCavv() {
    return cavv;
  }

  public void setCavv(String cavv) {
    this.cavv = cavv;
  }

  public Ptsv2billingagreementsConsumerAuthenticationInformation transactionToken(String transactionToken) {
    this.transactionToken = transactionToken;
    return this;
  }

   /**
   * Web based token used to authenticate consumer with Rupay authentication provider. 
   * @return transactionToken
  **/
  @ApiModelProperty(value = "Web based token used to authenticate consumer with Rupay authentication provider. ")
  public String getTransactionToken() {
    return transactionToken;
  }

  public void setTransactionToken(String transactionToken) {
    this.transactionToken = transactionToken;
  }

  public Ptsv2billingagreementsConsumerAuthenticationInformation xid(String xid) {
    this.xid = xid;
    return this;
  }

   /**
   * Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**&#x60;&#x3D;spa&#x60;) 
   * @return xid
  **/
  @ApiModelProperty(value = "Transaction identifier generated by CyberSource for successful enrollment or validation checks. Use this value, which is in base64, to match an outgoing PAReq with an incoming PARes. CyberSource forwards the XID with the card authorization service to these payment processors in these cases: - Barclays - Streamline (when the **ecommerceIndicator**`=spa`) ")
  public String getXid() {
    return xid;
  }

  public void setXid(String xid) {
    this.xid = xid;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ptsv2billingagreementsConsumerAuthenticationInformation ptsv2billingagreementsConsumerAuthenticationInformation = (Ptsv2billingagreementsConsumerAuthenticationInformation) o;
    return Objects.equals(this.authenticationTransactionContextId, ptsv2billingagreementsConsumerAuthenticationInformation.authenticationTransactionContextId) &&
        Objects.equals(this.cavv, ptsv2billingagreementsConsumerAuthenticationInformation.cavv) &&
        Objects.equals(this.transactionToken, ptsv2billingagreementsConsumerAuthenticationInformation.transactionToken) &&
        Objects.equals(this.xid, ptsv2billingagreementsConsumerAuthenticationInformation.xid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationTransactionContextId, cavv, transactionToken, xid);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ptsv2billingagreementsConsumerAuthenticationInformation {\n");
    
    sb.append("    authenticationTransactionContextId: ").append(toIndentedString(authenticationTransactionContextId)).append("\n");
    sb.append("    cavv: ").append(toIndentedString(cavv)).append("\n");
    sb.append("    transactionToken: ").append(toIndentedString(transactionToken)).append("\n");
    sb.append("    xid: ").append(toIndentedString(xid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

