/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import Model.TmsBinLookupPaymentAccountInformationCardBrands;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * TmsBinLookupPaymentAccountInformationCard
 */

public class TmsBinLookupPaymentAccountInformationCard {
  @SerializedName("type")
  private String type = null;

  @SerializedName("brandName")
  private String brandName = null;

  @SerializedName("currency")
  private String currency = null;

  @SerializedName("maxLength")
  private String maxLength = null;

  @SerializedName("credentialType")
  private String credentialType = null;

  @SerializedName("brands")
  private List<TmsBinLookupPaymentAccountInformationCardBrands> brands = null;

  public TmsBinLookupPaymentAccountInformationCard type(String type) {
    this.type = type;
    return this;
  }

   /**
   * This field contains the 3-digit value that indicates the card type.  Possible values: - &#x60;001&#x60;: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value &#x60;001&#x60; for Visa Electron. - &#x60;002&#x60;: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - &#x60;003&#x60;: American Express - &#x60;004&#x60;: Discover - &#x60;005&#x60;: Diners Club - &#x60;006&#x60;: Carte Blanche[^1] - &#x60;007&#x60;: JCB[^1] - &#x60;008&#x60;: Optima - &#x60;011&#x60;: Twinpay Credit Card - &#x60;012&#x60;: Twinpay Debit Card - &#x60;013&#x60;: Walmart - &#x60;014&#x60;: Enroute[^1] - &#x60;015&#x60;: Lowes Consumer - &#x60;016&#x60;: Home Depot Consumer - &#x60;017&#x60;: MBNA - &#x60;018&#x60;: Dick&#39;s Sportwear - &#x60;019&#x60;: Casual Corner - &#x60;020&#x60;: Sears - &#x60;021&#x60;: JAL[^1] - &#x60;023&#x60;: Disney Card - &#x60;024&#x60;: Switch/Solo - &#x60;025&#x60;: Sams Club Consumer - &#x60;026&#x60;: Sams Club Business - &#x60;027&#x60;: Nicos - &#x60;029&#x60;: Bebe - &#x60;030&#x60;: Restoration Hardware - &#x60;031&#x60;: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use &#x60;001&#x60; for all Visa card types. - &#x60;032&#x60;: Solo - &#x60;033&#x60;: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use &#x60;001&#x60; for all Visa card types. - &#x60;034&#x60;: Dankort[^1] - &#x60;035&#x60;: Laser - &#x60;036&#x60;: Cartes Bancaires[^1] - &#x60;037&#x60;: Carta Si[^1] - &#x60;039&#x60;: Encoded account number[^1] - &#x60;040&#x60;: UATP[^1] - &#x60;041&#x60;: HOUSEHOLD - &#x60;042&#x60;: Maestro (International)[^1] - &#x60;043&#x60;: GE MONEY - &#x60;044&#x60;: Korean Cards - &#x60;045&#x60;: Style - &#x60;046&#x60;: J.Crew - &#x60;050&#x60;: Hipercard[^2,3] - &#x60;051&#x60;: Aura - &#x60;052&#x60;: Redecard - &#x60;053&#x60;: Orico Card - &#x60;054&#x60;: Elo[^3] - &#x60;055&#x60;: Capital One Private Label - &#x60;058&#x60;: Carnet - &#x60;059&#x60;: ValueLink - &#x60;061&#x60;: RuPay - &#x60;062&#x60;: China UnionPay - &#x60;063&#x60;: Falabella Private Label - &#x60;064&#x60;: Prompt Card - &#x60;065&#x60;: Korean Domestic - &#x60;066&#x60;: Banricompras  [^1]: For this card type, you must include the &#x60;paymentInformation.card.type&#x60; or &#x60;paymentInformation.tokenizedCard.type&#x60; field in your request for an authorization or a stand-alone credit.  [^2]: For this card type on Cielo 3.0, you must include the &#x60;paymentInformation.card.type&#x60; or &#x60;paymentInformation.tokenizedCard.type&#x60; field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5.  [^3]: For this card type on Getnet and Rede, you must include the &#x60;paymentInformation.card.type&#x60; or &#x60;paymentInformation.tokenizedCard.type&#x60; field in a request for an authorization or a stand-alone credit. 
   * @return type
  **/
  @ApiModelProperty(value = "This field contains the 3-digit value that indicates the card type.  Possible values: - `001`: Visa. For card-present transactions on all processors except SIX, the Visa Electron card type is processed the same way that the Visa debit card is processed. Use card type value `001` for Visa Electron. - `002`: Mastercard, Eurocard[^1], which is a European regional brand of Mastercard. - `003`: American Express - `004`: Discover - `005`: Diners Club - `006`: Carte Blanche[^1] - `007`: JCB[^1] - `008`: Optima - `011`: Twinpay Credit Card - `012`: Twinpay Debit Card - `013`: Walmart - `014`: Enroute[^1] - `015`: Lowes Consumer - `016`: Home Depot Consumer - `017`: MBNA - `018`: Dick's Sportwear - `019`: Casual Corner - `020`: Sears - `021`: JAL[^1] - `023`: Disney Card - `024`: Switch/Solo - `025`: Sams Club Consumer - `026`: Sams Club Business - `027`: Nicos - `029`: Bebe - `030`: Restoration Hardware - `031`: Delta[^1]: Use this value only for Ingenico ePayments. For other processors, use `001` for all Visa card types. - `032`: Solo - `033`: Visa Electron[^1]. Use this value only for Ingenico ePayments and SIX. For other processors, use `001` for all Visa card types. - `034`: Dankort[^1] - `035`: Laser - `036`: Cartes Bancaires[^1] - `037`: Carta Si[^1] - `039`: Encoded account number[^1] - `040`: UATP[^1] - `041`: HOUSEHOLD - `042`: Maestro (International)[^1] - `043`: GE MONEY - `044`: Korean Cards - `045`: Style - `046`: J.Crew - `050`: Hipercard[^2,3] - `051`: Aura - `052`: Redecard - `053`: Orico Card - `054`: Elo[^3] - `055`: Capital One Private Label - `058`: Carnet - `059`: ValueLink - `061`: RuPay - `062`: China UnionPay - `063`: Falabella Private Label - `064`: Prompt Card - `065`: Korean Domestic - `066`: Banricompras  [^1]: For this card type, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in your request for an authorization or a stand-alone credit.  [^2]: For this card type on Cielo 3.0, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. This card type is not supported on Cielo 1.5.  [^3]: For this card type on Getnet and Rede, you must include the `paymentInformation.card.type` or `paymentInformation.tokenizedCard.type` field in a request for an authorization or a stand-alone credit. ")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public TmsBinLookupPaymentAccountInformationCard brandName(String brandName) {
    this.brandName = brandName;
    return this;
  }

   /**
   * This field contains the card brand name.   Some of the possible values (not an exhaustive list) are -    - VISA   - MASTERCARD   - AMERICAN EXPRESS   - DISCOVER   - DINERS CLUB   - CARTE BLANCHE   - JCB   - OPTIMA   - TWINPAY CREDIT CARD   - TWINPAY DEBIT CARD   - WALMART   - ENROUTE   - LOWES CONSUMER   - HOME DEPOT CONSUMER   - MBNA   - DICKS SPORTWEAR   - CASUAL CORNER   - SEARS   - JAL   - DISNEY CARD   - SWITCH/SOLO   - SAMS CLUB CONSUMER   - SAMS CLUB BUSINESS   - NICOS HOUSE CARD   - BEBE   - RESTORATION HARDWARE   - DELTA ONLINE   - SOLO   - VISA ELECTRON   - DANKORT   - LASER   - CARTE BANCAIRE   - CARTA SI   - ENCODED ACCOUNT   - UATP   - HOUSEHOLD   - MAESTRO   - GE CAPITAL   - KOREAN CARDS   - STYLE CARDS   - JCREW   - MEIJER   - HIPERCARD   - AURA   - REDECARD   - ORICO HOUSE CARD   - ELO   - CAPITAL ONE PRIVATE LABEL   - CARNET   - RUPAY   - CHINA UNION PAY   - FALABELLA PRIVATE LABEL   - PROMPTCARD   - KOREAN DOMESTIC   - BANRICOMPRAS 
   * @return brandName
  **/
  @ApiModelProperty(value = "This field contains the card brand name.   Some of the possible values (not an exhaustive list) are -    - VISA   - MASTERCARD   - AMERICAN EXPRESS   - DISCOVER   - DINERS CLUB   - CARTE BLANCHE   - JCB   - OPTIMA   - TWINPAY CREDIT CARD   - TWINPAY DEBIT CARD   - WALMART   - ENROUTE   - LOWES CONSUMER   - HOME DEPOT CONSUMER   - MBNA   - DICKS SPORTWEAR   - CASUAL CORNER   - SEARS   - JAL   - DISNEY CARD   - SWITCH/SOLO   - SAMS CLUB CONSUMER   - SAMS CLUB BUSINESS   - NICOS HOUSE CARD   - BEBE   - RESTORATION HARDWARE   - DELTA ONLINE   - SOLO   - VISA ELECTRON   - DANKORT   - LASER   - CARTE BANCAIRE   - CARTA SI   - ENCODED ACCOUNT   - UATP   - HOUSEHOLD   - MAESTRO   - GE CAPITAL   - KOREAN CARDS   - STYLE CARDS   - JCREW   - MEIJER   - HIPERCARD   - AURA   - REDECARD   - ORICO HOUSE CARD   - ELO   - CAPITAL ONE PRIVATE LABEL   - CARNET   - RUPAY   - CHINA UNION PAY   - FALABELLA PRIVATE LABEL   - PROMPTCARD   - KOREAN DOMESTIC   - BANRICOMPRAS ")
  public String getBrandName() {
    return brandName;
  }

  public void setBrandName(String brandName) {
    this.brandName = brandName;
  }

  public TmsBinLookupPaymentAccountInformationCard currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * This field indicates the 3-letter [ISO Standard Currency Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf) for the card currency. 
   * @return currency
  **/
  @ApiModelProperty(value = "This field indicates the 3-letter [ISO Standard Currency Codes](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf) for the card currency. ")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public TmsBinLookupPaymentAccountInformationCard maxLength(String maxLength) {
    this.maxLength = maxLength;
    return this;
  }

   /**
   * This field contains the max length of the card. 
   * @return maxLength
  **/
  @ApiModelProperty(value = "This field contains the max length of the card. ")
  public String getMaxLength() {
    return maxLength;
  }

  public void setMaxLength(String maxLength) {
    this.maxLength = maxLength;
  }

  public TmsBinLookupPaymentAccountInformationCard credentialType(String credentialType) {
    this.credentialType = credentialType;
    return this;
  }

   /**
   * This field contains the type of the payment credential. Possible values:   - PAN   - TOKEN  
   * @return credentialType
  **/
  @ApiModelProperty(value = "This field contains the type of the payment credential. Possible values:   - PAN   - TOKEN  ")
  public String getCredentialType() {
    return credentialType;
  }

  public void setCredentialType(String credentialType) {
    this.credentialType = credentialType;
  }

  public TmsBinLookupPaymentAccountInformationCard brands(List<TmsBinLookupPaymentAccountInformationCardBrands> brands) {
    this.brands = brands;
    return this;
  }

  public TmsBinLookupPaymentAccountInformationCard addBrandsItem(TmsBinLookupPaymentAccountInformationCardBrands brandsItem) {
    if (this.brands == null) {
      this.brands = new ArrayList<TmsBinLookupPaymentAccountInformationCardBrands>();
    }
    this.brands.add(brandsItem);
    return this;
  }

   /**
   * Array of brands
   * @return brands
  **/
  @ApiModelProperty(value = "Array of brands")
  public List<TmsBinLookupPaymentAccountInformationCardBrands> getBrands() {
    return brands;
  }

  public void setBrands(List<TmsBinLookupPaymentAccountInformationCardBrands> brands) {
    this.brands = brands;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TmsBinLookupPaymentAccountInformationCard tmsBinLookupPaymentAccountInformationCard = (TmsBinLookupPaymentAccountInformationCard) o;
    return Objects.equals(this.type, tmsBinLookupPaymentAccountInformationCard.type) &&
        Objects.equals(this.brandName, tmsBinLookupPaymentAccountInformationCard.brandName) &&
        Objects.equals(this.currency, tmsBinLookupPaymentAccountInformationCard.currency) &&
        Objects.equals(this.maxLength, tmsBinLookupPaymentAccountInformationCard.maxLength) &&
        Objects.equals(this.credentialType, tmsBinLookupPaymentAccountInformationCard.credentialType) &&
        Objects.equals(this.brands, tmsBinLookupPaymentAccountInformationCard.brands);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, brandName, currency, maxLength, credentialType, brands);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TmsBinLookupPaymentAccountInformationCard {\n");
    
    if (type != null) sb.append("    type: ").append(toIndentedString(type)).append("\n");
    if (brandName != null) sb.append("    brandName: ").append(toIndentedString(brandName)).append("\n");
    if (currency != null) sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    if (maxLength != null) sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    if (credentialType != null) sb.append("    credentialType: ").append(toIndentedString(credentialType)).append("\n");
    if (brands != null) sb.append("    brands: ").append(toIndentedString(brands)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

