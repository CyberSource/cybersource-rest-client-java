/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import Model.Ptsv2paymentsPointOfSaleInformationEmv;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Ptsv2paymentsPointOfSaleInformation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-12-09T12:23:03.938+05:30")
public class Ptsv2paymentsPointOfSaleInformation {
  @SerializedName("terminalId")
  private String terminalId = null;

  @SerializedName("terminalSerialNumber")
  private String terminalSerialNumber = null;

  @SerializedName("laneNumber")
  private String laneNumber = null;

  @SerializedName("catLevel")
  private Integer catLevel = null;

  @SerializedName("entryMode")
  private String entryMode = null;

  @SerializedName("terminalCapability")
  private Integer terminalCapability = null;

  @SerializedName("pinEntryCapability")
  private Integer pinEntryCapability = null;

  @SerializedName("operatingEnvironment")
  private String operatingEnvironment = null;

  @SerializedName("emv")
  private Ptsv2paymentsPointOfSaleInformationEmv emv = null;

  @SerializedName("amexCapnData")
  private String amexCapnData = null;

  @SerializedName("trackData")
  private String trackData = null;

  @SerializedName("storeAndForwardIndicator")
  private String storeAndForwardIndicator = null;

  @SerializedName("cardholderVerificationMethod")
  private List<String> cardholderVerificationMethod = null;

  @SerializedName("terminalInputCapability")
  private List<String> terminalInputCapability = null;

  @SerializedName("terminalCardCaptureCapability")
  private String terminalCardCaptureCapability = null;

  @SerializedName("terminalOutputCapability")
  private String terminalOutputCapability = null;

  @SerializedName("terminalPinCapability")
  private Integer terminalPinCapability = null;

  @SerializedName("deviceId")
  private String deviceId = null;

  @SerializedName("pinBlockEncodingFormat")
  private Integer pinBlockEncodingFormat = null;

  @SerializedName("encryptedPin")
  private String encryptedPin = null;

  @SerializedName("encryptedKeySerialNumber")
  private String encryptedKeySerialNumber = null;

  @SerializedName("partnerSdkVersion")
  private String partnerSdkVersion = null;

  public Ptsv2paymentsPointOfSaleInformation terminalId(String terminalId) {
    this.terminalId = terminalId;
    return this;
  }

   /**
   * Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  #### FDC Nashville Global To have your account configured to support this field, contact CyberSource Customer Support. This value must be a value that FDC Nashville Global issued to you.  For details, see the &#x60;terminal_id&#x60; field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  **For Payouts**: This field is applicable for CtV. 
   * @return terminalId
  **/
  @ApiModelProperty(value = "Identifier for the terminal at your retail location. You can define this value yourself, but consult the processor for requirements.  #### FDC Nashville Global To have your account configured to support this field, contact CyberSource Customer Support. This value must be a value that FDC Nashville Global issued to you.  For details, see the `terminal_id` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm)  **For Payouts**: This field is applicable for CtV. ")
  public String getTerminalId() {
    return terminalId;
  }

  public void setTerminalId(String terminalId) {
    this.terminalId = terminalId;
  }

  public Ptsv2paymentsPointOfSaleInformation terminalSerialNumber(String terminalSerialNumber) {
    this.terminalSerialNumber = terminalSerialNumber;
    return this;
  }

   /**
   * Terminal serial number assigned by the hardware manufacturer. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX.  For details, see the &#x60;terminal_serial_number&#x60; field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) 
   * @return terminalSerialNumber
  **/
  @ApiModelProperty(value = "Terminal serial number assigned by the hardware manufacturer. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX.  For details, see the `terminal_serial_number` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) ")
  public String getTerminalSerialNumber() {
    return terminalSerialNumber;
  }

  public void setTerminalSerialNumber(String terminalSerialNumber) {
    this.terminalSerialNumber = terminalSerialNumber;
  }

  public Ptsv2paymentsPointOfSaleInformation laneNumber(String laneNumber) {
    this.laneNumber = laneNumber;
    return this;
  }

   /**
   * Identifier for an alternate terminal at your retail location. You define the value for this field.  This field is supported only for MasterCard transactions on FDC Nashville Global. Use the &#x60;terminalId&#x60; field to identify the main terminal at your retail location. If your retail location has multiple terminals, use this &#x60;laneNumber&#x60; field to identify the terminal used for the transaction.  This field is a pass-through, which means that CyberSource does not check the value or modify the value in any way before sending it to the processor. 
   * @return laneNumber
  **/
  @ApiModelProperty(value = "Identifier for an alternate terminal at your retail location. You define the value for this field.  This field is supported only for MasterCard transactions on FDC Nashville Global. Use the `terminalId` field to identify the main terminal at your retail location. If your retail location has multiple terminals, use this `laneNumber` field to identify the terminal used for the transaction.  This field is a pass-through, which means that CyberSource does not check the value or modify the value in any way before sending it to the processor. ")
  public String getLaneNumber() {
    return laneNumber;
  }

  public void setLaneNumber(String laneNumber) {
    this.laneNumber = laneNumber;
  }

  public Ptsv2paymentsPointOfSaleInformation catLevel(Integer catLevel) {
    this.catLevel = catLevel;
    return this;
  }

   /**
   * Type of cardholder-activated terminal. Possible values:   - 1: Automated dispensing machine  - 2: Self-service terminal  - 3: Limited amount terminal  - 4: In-flight commerce (IFC) terminal  - 5: Radio frequency device  - 6: Mobile acceptance terminal  - 7: Electronic cash register  - 8: E-commerce device at your location  - 9: Terminal or cash register that uses a dialup connection to connect to the transaction processing network  #### Chase Paymentech Solutions Only values 1, 2, and 3 are supported.  #### FDC Nashville Global Only values 7, 8, and 9 are supported.  #### GPN Only values 6, 7, 8, and 9 are supported.  #### TSYS Acquiring Solutions Only value 6 is supported. For details, see the &#x60;cat_level&#x60; field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) 
   * minimum: 1
   * maximum: 9
   * @return catLevel
  **/
  @ApiModelProperty(value = "Type of cardholder-activated terminal. Possible values:   - 1: Automated dispensing machine  - 2: Self-service terminal  - 3: Limited amount terminal  - 4: In-flight commerce (IFC) terminal  - 5: Radio frequency device  - 6: Mobile acceptance terminal  - 7: Electronic cash register  - 8: E-commerce device at your location  - 9: Terminal or cash register that uses a dialup connection to connect to the transaction processing network  #### Chase Paymentech Solutions Only values 1, 2, and 3 are supported.  #### FDC Nashville Global Only values 7, 8, and 9 are supported.  #### GPN Only values 6, 7, 8, and 9 are supported.  #### TSYS Acquiring Solutions Only value 6 is supported. For details, see the `cat_level` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) ")
  public Integer getCatLevel() {
    return catLevel;
  }

  public void setCatLevel(Integer catLevel) {
    this.catLevel = catLevel;
  }

  public Ptsv2paymentsPointOfSaleInformation entryMode(String entryMode) {
    this.entryMode = entryMode;
    return this;
  }

   /**
   * Method of entering credit card information into the POS terminal. Possible values:   - &#x60;contact&#x60;: Read from direct contact with chip card.  - &#x60;contactless&#x60;: Read from a contactless interface using chip data.  - &#x60;keyed&#x60;: Manually keyed into POS terminal.  - &#x60;msd&#x60;: Read from a contactless interface using magnetic stripe data (MSD).  - &#x60;swiped&#x60;: Read from credit card magnetic stripe.  The contact, contactless, and msd values are supported only for EMV transactions.  For details, see the &#x60;pos_entry_mode&#x60; field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) 
   * @return entryMode
  **/
  @ApiModelProperty(value = "Method of entering credit card information into the POS terminal. Possible values:   - `contact`: Read from direct contact with chip card.  - `contactless`: Read from a contactless interface using chip data.  - `keyed`: Manually keyed into POS terminal.  - `msd`: Read from a contactless interface using magnetic stripe data (MSD).  - `swiped`: Read from credit card magnetic stripe.  The contact, contactless, and msd values are supported only for EMV transactions.  For details, see the `pos_entry_mode` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) ")
  public String getEntryMode() {
    return entryMode;
  }

  public void setEntryMode(String entryMode) {
    this.entryMode = entryMode;
  }

  public Ptsv2paymentsPointOfSaleInformation terminalCapability(Integer terminalCapability) {
    this.terminalCapability = terminalCapability;
    return this;
  }

   /**
   * POS terminal’s capability. Possible values:   - &#x60;1&#x60;: Terminal has a magnetic stripe reader only.  - &#x60;2&#x60;: Terminal has a magnetic stripe reader and manual entry capability.  - &#x60;3&#x60;: Terminal has manual entry capability only.  - &#x60;4&#x60;: Terminal can read chip cards.  - &#x60;5&#x60;: Terminal can read contactless chip cards.  The values of 4 and 5 are supported only for EMV transactions. * Applicable only for CTV for Payouts.  For processor-specific details, see the &#x60;terminal_capability&#x60; field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) 
   * minimum: 1
   * maximum: 5
   * @return terminalCapability
  **/
  @ApiModelProperty(value = "POS terminal’s capability. Possible values:   - `1`: Terminal has a magnetic stripe reader only.  - `2`: Terminal has a magnetic stripe reader and manual entry capability.  - `3`: Terminal has manual entry capability only.  - `4`: Terminal can read chip cards.  - `5`: Terminal can read contactless chip cards.  The values of 4 and 5 are supported only for EMV transactions. * Applicable only for CTV for Payouts.  For processor-specific details, see the `terminal_capability` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) ")
  public Integer getTerminalCapability() {
    return terminalCapability;
  }

  public void setTerminalCapability(Integer terminalCapability) {
    this.terminalCapability = terminalCapability;
  }

  public Ptsv2paymentsPointOfSaleInformation pinEntryCapability(Integer pinEntryCapability) {
    this.pinEntryCapability = pinEntryCapability;
    return this;
  }

   /**
   * A one-digit code that identifies the capability of terminal to capture PINs.  This code does not necessarily mean that a PIN was entered or is included in this message.  POS terminal’s capability. Possible values: - &#x60;1&#x60;: Terminal has a magnetic stripe reader only. - &#x60;2&#x60;: Terminal has a magnetic stripe reader and manual entry capability. - &#x60;3&#x60;: Terminal has manual entry capability only. - &#x60;4&#x60;: Terminal can read chip cards.* - &#x60;5&#x60;: Terminal can read contactless chip cards.* * The values of 4 and 5 are supported only for EMV transactions.  For Payouts: This field is applicable for CtV.  For details, see the &#x60;terminal_capability&#x60; field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) 
   * minimum: 1
   * maximum: 1
   * @return pinEntryCapability
  **/
  @ApiModelProperty(value = "A one-digit code that identifies the capability of terminal to capture PINs.  This code does not necessarily mean that a PIN was entered or is included in this message.  POS terminal’s capability. Possible values: - `1`: Terminal has a magnetic stripe reader only. - `2`: Terminal has a magnetic stripe reader and manual entry capability. - `3`: Terminal has manual entry capability only. - `4`: Terminal can read chip cards.* - `5`: Terminal can read contactless chip cards.* * The values of 4 and 5 are supported only for EMV transactions.  For Payouts: This field is applicable for CtV.  For details, see the `terminal_capability` field description in [Card-Present Processing Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/Retail_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) ")
  public Integer getPinEntryCapability() {
    return pinEntryCapability;
  }

  public void setPinEntryCapability(Integer pinEntryCapability) {
    this.pinEntryCapability = pinEntryCapability;
  }

  public Ptsv2paymentsPointOfSaleInformation operatingEnvironment(String operatingEnvironment) {
    this.operatingEnvironment = operatingEnvironment;
    return this;
  }

   /**
   * Operating environment.  Possible values for all card types except Mastercard: - &#x60;0&#x60;: No terminal used or unknown environment. - &#x60;1&#x60;: On merchant premises, attended. - &#x60;2&#x60;: On merchant premises, unattended. Examples: oil, kiosks, self-checkout, mobile telephone, personal digital assistant (PDA). - &#x60;3&#x60;: Off merchant premises, attended. Examples: portable POS devices at trade shows, at service calls, or in taxis. - &#x60;4&#x60;: Off merchant premises, unattended. Examples: vending machines, home computer, mobile telephone, PDA. - &#x60;5&#x60;: On premises of cardholder, unattended. - &#x60;9&#x60;: Unknown delivery mode. - &#x60;S&#x60;: Electronic delivery of product. Examples: music, software, or eTickets that are downloaded over the internet. - &#x60;T&#x60;: Physical delivery of product. Examples: music or software that is delivered by mail or by a courier.  #### Possible values for Mastercard: - &#x60;2&#x60;: On merchant premises, unattended, or cardholder terminal. Examples: oil, kiosks, self-checkout, home computer, mobile telephone, personal digital assistant (PDA). Cardholder terminal is supported only for Mastercard transactions on CyberSource through VisaNet. - &#x60;4&#x60;: Off merchant premises, unattended, or cardholder terminal. Examples: vending machines, home computer, mobile telephone, PDA. Cardholder terminal is supported only for Mastercard transactions on CyberSource through VisaNet.  This field is supported only for American Express Direct and CyberSource through VisaNet. 
   * @return operatingEnvironment
  **/
  @ApiModelProperty(value = "Operating environment.  Possible values for all card types except Mastercard: - `0`: No terminal used or unknown environment. - `1`: On merchant premises, attended. - `2`: On merchant premises, unattended. Examples: oil, kiosks, self-checkout, mobile telephone, personal digital assistant (PDA). - `3`: Off merchant premises, attended. Examples: portable POS devices at trade shows, at service calls, or in taxis. - `4`: Off merchant premises, unattended. Examples: vending machines, home computer, mobile telephone, PDA. - `5`: On premises of cardholder, unattended. - `9`: Unknown delivery mode. - `S`: Electronic delivery of product. Examples: music, software, or eTickets that are downloaded over the internet. - `T`: Physical delivery of product. Examples: music or software that is delivered by mail or by a courier.  #### Possible values for Mastercard: - `2`: On merchant premises, unattended, or cardholder terminal. Examples: oil, kiosks, self-checkout, home computer, mobile telephone, personal digital assistant (PDA). Cardholder terminal is supported only for Mastercard transactions on CyberSource through VisaNet. - `4`: Off merchant premises, unattended, or cardholder terminal. Examples: vending machines, home computer, mobile telephone, PDA. Cardholder terminal is supported only for Mastercard transactions on CyberSource through VisaNet.  This field is supported only for American Express Direct and CyberSource through VisaNet. ")
  public String getOperatingEnvironment() {
    return operatingEnvironment;
  }

  public void setOperatingEnvironment(String operatingEnvironment) {
    this.operatingEnvironment = operatingEnvironment;
  }

  public Ptsv2paymentsPointOfSaleInformation emv(Ptsv2paymentsPointOfSaleInformationEmv emv) {
    this.emv = emv;
    return this;
  }

   /**
   * Get emv
   * @return emv
  **/
  @ApiModelProperty(value = "")
  public Ptsv2paymentsPointOfSaleInformationEmv getEmv() {
    return emv;
  }

  public void setEmv(Ptsv2paymentsPointOfSaleInformationEmv emv) {
    this.emv = emv;
  }

  public Ptsv2paymentsPointOfSaleInformation amexCapnData(String amexCapnData) {
    this.amexCapnData = amexCapnData;
    return this;
  }

   /**
   * Point-of-sale details for the transaction. This value is returned only for **American Express Direct**. CyberSource generates this value, which consists of a series of codes that identify terminal capability, security data, and specific conditions present at the time the transaction occurred. To comply with the CAPN requirements, this value must be included in all subsequent follow-on requests, such as captures and follow-on credits.  When you perform authorizations, captures, and credits through CyberSource, CyberSource passes this value from the authorization service to the subsequent services for you. However, when you perform authorizations through CyberSource and perform subsequent services through other financial institutions, you must ensure that your requests for captures and credits include this value.  For details, see &#x60;auth_pos_data&#x60; field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) 
   * @return amexCapnData
  **/
  @ApiModelProperty(value = "Point-of-sale details for the transaction. This value is returned only for **American Express Direct**. CyberSource generates this value, which consists of a series of codes that identify terminal capability, security data, and specific conditions present at the time the transaction occurred. To comply with the CAPN requirements, this value must be included in all subsequent follow-on requests, such as captures and follow-on credits.  When you perform authorizations, captures, and credits through CyberSource, CyberSource passes this value from the authorization service to the subsequent services for you. However, when you perform authorizations through CyberSource and perform subsequent services through other financial institutions, you must ensure that your requests for captures and credits include this value.  For details, see `auth_pos_data` field description in [Credit Card Services Using the SCMP API.](https://apps.cybersource.com/library/documentation/dev_guides/CC_Svcs_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) ")
  public String getAmexCapnData() {
    return amexCapnData;
  }

  public void setAmexCapnData(String amexCapnData) {
    this.amexCapnData = amexCapnData;
  }

  public Ptsv2paymentsPointOfSaleInformation trackData(String trackData) {
    this.trackData = trackData;
    return this;
  }

   /**
   * Card’s track 1 and 2 data. For all processors except FDMS Nashville, this value consists of one of the following:   - Track 1 data  - Track 2 data  - Data for both tracks 1 and 2  For FDMS Nashville, this value consists of one of the following:  - Track 1 data  - Data for both tracks 1 and 2  Example: %B4111111111111111^SMITH/JOHN ^1612101976110000868000000?;4111111111111111&#x3D;16121019761186800000? 
   * @return trackData
  **/
  @ApiModelProperty(value = "Card’s track 1 and 2 data. For all processors except FDMS Nashville, this value consists of one of the following:   - Track 1 data  - Track 2 data  - Data for both tracks 1 and 2  For FDMS Nashville, this value consists of one of the following:  - Track 1 data  - Data for both tracks 1 and 2  Example: %B4111111111111111^SMITH/JOHN ^1612101976110000868000000?;4111111111111111=16121019761186800000? ")
  public String getTrackData() {
    return trackData;
  }

  public void setTrackData(String trackData) {
    this.trackData = trackData;
  }

  public Ptsv2paymentsPointOfSaleInformation storeAndForwardIndicator(String storeAndForwardIndicator) {
    this.storeAndForwardIndicator = storeAndForwardIndicator;
    return this;
  }

   /**
   * When connectivity is unavailable, the client software that is installed on the POS terminal can store a transaction in its memory and send it for authorization when connectivity is restored. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  Possible values: - Y: Transaction was stored and then forwarded. - N (default): Transaction was not stored and then forwarded.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. 
   * @return storeAndForwardIndicator
  **/
  @ApiModelProperty(value = "When connectivity is unavailable, the client software that is installed on the POS terminal can store a transaction in its memory and send it for authorization when connectivity is restored. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  Possible values: - Y: Transaction was stored and then forwarded. - N (default): Transaction was not stored and then forwarded.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. ")
  public String getStoreAndForwardIndicator() {
    return storeAndForwardIndicator;
  }

  public void setStoreAndForwardIndicator(String storeAndForwardIndicator) {
    this.storeAndForwardIndicator = storeAndForwardIndicator;
  }

  public Ptsv2paymentsPointOfSaleInformation cardholderVerificationMethod(List<String> cardholderVerificationMethod) {
    this.cardholderVerificationMethod = cardholderVerificationMethod;
    return this;
  }

  public Ptsv2paymentsPointOfSaleInformation addCardholderVerificationMethodItem(String cardholderVerificationMethodItem) {
    if (this.cardholderVerificationMethod == null) {
      this.cardholderVerificationMethod = new ArrayList<String>();
    }
    this.cardholderVerificationMethod.add(cardholderVerificationMethodItem);
    return this;
  }

   /**
   * Get cardholderVerificationMethod
   * @return cardholderVerificationMethod
  **/
  @ApiModelProperty(example = "[\"PIN\",\"Signature\"]", value = "")
  public List<String> getCardholderVerificationMethod() {
    return cardholderVerificationMethod;
  }

  public void setCardholderVerificationMethod(List<String> cardholderVerificationMethod) {
    this.cardholderVerificationMethod = cardholderVerificationMethod;
  }

  public Ptsv2paymentsPointOfSaleInformation terminalInputCapability(List<String> terminalInputCapability) {
    this.terminalInputCapability = terminalInputCapability;
    return this;
  }

  public Ptsv2paymentsPointOfSaleInformation addTerminalInputCapabilityItem(String terminalInputCapabilityItem) {
    if (this.terminalInputCapability == null) {
      this.terminalInputCapability = new ArrayList<String>();
    }
    this.terminalInputCapability.add(terminalInputCapabilityItem);
    return this;
  }

   /**
   * Get terminalInputCapability
   * @return terminalInputCapability
  **/
  @ApiModelProperty(example = "[\"Keyed\",\"Swiped\",\"Contact\",\"QRcode\"]", value = "")
  public List<String> getTerminalInputCapability() {
    return terminalInputCapability;
  }

  public void setTerminalInputCapability(List<String> terminalInputCapability) {
    this.terminalInputCapability = terminalInputCapability;
  }

  public Ptsv2paymentsPointOfSaleInformation terminalCardCaptureCapability(String terminalCardCaptureCapability) {
    this.terminalCardCaptureCapability = terminalCardCaptureCapability;
    return this;
  }

   /**
   * Indicates whether the terminal can capture the card.  Possible values: - 1: Terminal can capture card. - 0: Terminal cannot capture card.  This field is supported only on American Express Direct. 
   * @return terminalCardCaptureCapability
  **/
  @ApiModelProperty(value = "Indicates whether the terminal can capture the card.  Possible values: - 1: Terminal can capture card. - 0: Terminal cannot capture card.  This field is supported only on American Express Direct. ")
  public String getTerminalCardCaptureCapability() {
    return terminalCardCaptureCapability;
  }

  public void setTerminalCardCaptureCapability(String terminalCardCaptureCapability) {
    this.terminalCardCaptureCapability = terminalCardCaptureCapability;
  }

  public Ptsv2paymentsPointOfSaleInformation terminalOutputCapability(String terminalOutputCapability) {
    this.terminalOutputCapability = terminalOutputCapability;
    return this;
  }

   /**
   * Indicates whether the terminal can print or display messages.  Possible values: - 1: Neither - 2: Print only - 3: Display only - 4: Print and display  This field is supported only on American Express Direct. 
   * @return terminalOutputCapability
  **/
  @ApiModelProperty(value = "Indicates whether the terminal can print or display messages.  Possible values: - 1: Neither - 2: Print only - 3: Display only - 4: Print and display  This field is supported only on American Express Direct. ")
  public String getTerminalOutputCapability() {
    return terminalOutputCapability;
  }

  public void setTerminalOutputCapability(String terminalOutputCapability) {
    this.terminalOutputCapability = terminalOutputCapability;
  }

  public Ptsv2paymentsPointOfSaleInformation terminalPinCapability(Integer terminalPinCapability) {
    this.terminalPinCapability = terminalPinCapability;
    return this;
  }

   /**
   * Maximum PIN length that the terminal can capture.  Possible values: -  0: No PIN capture capability -  1: PIN capture capability unknown -  4: Four characters -  5: Five characters -  6: Six characters -  7: Seven characters -  8: Eight characters -  9: Nine characters - 10: Ten characters - 11: Eleven characters - 12: Twelve characters  This field is supported only on American Express Direct and SIX. 
   * @return terminalPinCapability
  **/
  @ApiModelProperty(value = "Maximum PIN length that the terminal can capture.  Possible values: -  0: No PIN capture capability -  1: PIN capture capability unknown -  4: Four characters -  5: Five characters -  6: Six characters -  7: Seven characters -  8: Eight characters -  9: Nine characters - 10: Ten characters - 11: Eleven characters - 12: Twelve characters  This field is supported only on American Express Direct and SIX. ")
  public Integer getTerminalPinCapability() {
    return terminalPinCapability;
  }

  public void setTerminalPinCapability(Integer terminalPinCapability) {
    this.terminalPinCapability = terminalPinCapability;
  }

  public Ptsv2paymentsPointOfSaleInformation deviceId(String deviceId) {
    this.deviceId = deviceId;
    return this;
  }

   /**
   * Value created by the client software that uniquely identifies the POS device. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. 
   * @return deviceId
  **/
  @ApiModelProperty(value = "Value created by the client software that uniquely identifies the POS device. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. ")
  public String getDeviceId() {
    return deviceId;
  }

  public void setDeviceId(String deviceId) {
    this.deviceId = deviceId;
  }

  public Ptsv2paymentsPointOfSaleInformation pinBlockEncodingFormat(Integer pinBlockEncodingFormat) {
    this.pinBlockEncodingFormat = pinBlockEncodingFormat;
    return this;
  }

   /**
   * Format that is used to encode the PIN block. This value is provided by the client software that is installed on the POS terminal.  Possible values: - 0: ISO 9564 format 0 - 1: ISO 9564 format 1 - 2: ISO 9564 format 2 - 3: ISO 9564 format 3  In the Credit Card Guide for the auth service: This field is supported only on American Express Direct, FDC Nashville Global, and SIX. 
   * maximum: 9
   * @return pinBlockEncodingFormat
  **/
  @ApiModelProperty(value = "Format that is used to encode the PIN block. This value is provided by the client software that is installed on the POS terminal.  Possible values: - 0: ISO 9564 format 0 - 1: ISO 9564 format 1 - 2: ISO 9564 format 2 - 3: ISO 9564 format 3  In the Credit Card Guide for the auth service: This field is supported only on American Express Direct, FDC Nashville Global, and SIX. ")
  public Integer getPinBlockEncodingFormat() {
    return pinBlockEncodingFormat;
  }

  public void setPinBlockEncodingFormat(Integer pinBlockEncodingFormat) {
    this.pinBlockEncodingFormat = pinBlockEncodingFormat;
  }

  public Ptsv2paymentsPointOfSaleInformation encryptedPin(String encryptedPin) {
    this.encryptedPin = encryptedPin;
    return this;
  }

   /**
   * Encrypted PIN.  This value is provided by the client software that is installed on the POS terminal.  In the Credit Card Guide for the auth service: This field is supported only on American Express Direct, FDC Nashville Global, and SIX. 
   * @return encryptedPin
  **/
  @ApiModelProperty(value = "Encrypted PIN.  This value is provided by the client software that is installed on the POS terminal.  In the Credit Card Guide for the auth service: This field is supported only on American Express Direct, FDC Nashville Global, and SIX. ")
  public String getEncryptedPin() {
    return encryptedPin;
  }

  public void setEncryptedPin(String encryptedPin) {
    this.encryptedPin = encryptedPin;
  }

  public Ptsv2paymentsPointOfSaleInformation encryptedKeySerialNumber(String encryptedKeySerialNumber) {
    this.encryptedKeySerialNumber = encryptedKeySerialNumber;
    return this;
  }

   /**
   * This is a combination of the device&#39;s unique identifier and a transaction counter that is used in the process of decrypting the encrypted PIN.  For all terminals that are using derived unique key per transaction (DUKPT) encryption, this is generated as a single number within the terminal. 
   * @return encryptedKeySerialNumber
  **/
  @ApiModelProperty(value = "This is a combination of the device's unique identifier and a transaction counter that is used in the process of decrypting the encrypted PIN.  For all terminals that are using derived unique key per transaction (DUKPT) encryption, this is generated as a single number within the terminal. ")
  public String getEncryptedKeySerialNumber() {
    return encryptedKeySerialNumber;
  }

  public void setEncryptedKeySerialNumber(String encryptedKeySerialNumber) {
    this.encryptedKeySerialNumber = encryptedKeySerialNumber;
  }

  public Ptsv2paymentsPointOfSaleInformation partnerSdkVersion(String partnerSdkVersion) {
    this.partnerSdkVersion = partnerSdkVersion;
    return this;
  }

   /**
   * Version of the software installed on the POS terminal. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. 
   * @return partnerSdkVersion
  **/
  @ApiModelProperty(value = "Version of the software installed on the POS terminal. This value is provided by the client software that is installed on the POS terminal.  CyberSource does not forward this value to the processor. Instead, the value is forwarded to the CyberSource reporting functionality.  This field is supported only on American Express Direct, FDC Nashville Global, and SIX. ")
  public String getPartnerSdkVersion() {
    return partnerSdkVersion;
  }

  public void setPartnerSdkVersion(String partnerSdkVersion) {
    this.partnerSdkVersion = partnerSdkVersion;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ptsv2paymentsPointOfSaleInformation ptsv2paymentsPointOfSaleInformation = (Ptsv2paymentsPointOfSaleInformation) o;
    return Objects.equals(this.terminalId, ptsv2paymentsPointOfSaleInformation.terminalId) &&
        Objects.equals(this.terminalSerialNumber, ptsv2paymentsPointOfSaleInformation.terminalSerialNumber) &&
        Objects.equals(this.laneNumber, ptsv2paymentsPointOfSaleInformation.laneNumber) &&
        Objects.equals(this.catLevel, ptsv2paymentsPointOfSaleInformation.catLevel) &&
        Objects.equals(this.entryMode, ptsv2paymentsPointOfSaleInformation.entryMode) &&
        Objects.equals(this.terminalCapability, ptsv2paymentsPointOfSaleInformation.terminalCapability) &&
        Objects.equals(this.pinEntryCapability, ptsv2paymentsPointOfSaleInformation.pinEntryCapability) &&
        Objects.equals(this.operatingEnvironment, ptsv2paymentsPointOfSaleInformation.operatingEnvironment) &&
        Objects.equals(this.emv, ptsv2paymentsPointOfSaleInformation.emv) &&
        Objects.equals(this.amexCapnData, ptsv2paymentsPointOfSaleInformation.amexCapnData) &&
        Objects.equals(this.trackData, ptsv2paymentsPointOfSaleInformation.trackData) &&
        Objects.equals(this.storeAndForwardIndicator, ptsv2paymentsPointOfSaleInformation.storeAndForwardIndicator) &&
        Objects.equals(this.cardholderVerificationMethod, ptsv2paymentsPointOfSaleInformation.cardholderVerificationMethod) &&
        Objects.equals(this.terminalInputCapability, ptsv2paymentsPointOfSaleInformation.terminalInputCapability) &&
        Objects.equals(this.terminalCardCaptureCapability, ptsv2paymentsPointOfSaleInformation.terminalCardCaptureCapability) &&
        Objects.equals(this.terminalOutputCapability, ptsv2paymentsPointOfSaleInformation.terminalOutputCapability) &&
        Objects.equals(this.terminalPinCapability, ptsv2paymentsPointOfSaleInformation.terminalPinCapability) &&
        Objects.equals(this.deviceId, ptsv2paymentsPointOfSaleInformation.deviceId) &&
        Objects.equals(this.pinBlockEncodingFormat, ptsv2paymentsPointOfSaleInformation.pinBlockEncodingFormat) &&
        Objects.equals(this.encryptedPin, ptsv2paymentsPointOfSaleInformation.encryptedPin) &&
        Objects.equals(this.encryptedKeySerialNumber, ptsv2paymentsPointOfSaleInformation.encryptedKeySerialNumber) &&
        Objects.equals(this.partnerSdkVersion, ptsv2paymentsPointOfSaleInformation.partnerSdkVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(terminalId, terminalSerialNumber, laneNumber, catLevel, entryMode, terminalCapability, pinEntryCapability, operatingEnvironment, emv, amexCapnData, trackData, storeAndForwardIndicator, cardholderVerificationMethod, terminalInputCapability, terminalCardCaptureCapability, terminalOutputCapability, terminalPinCapability, deviceId, pinBlockEncodingFormat, encryptedPin, encryptedKeySerialNumber, partnerSdkVersion);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ptsv2paymentsPointOfSaleInformation {\n");
    
    sb.append("    terminalId: ").append(toIndentedString(terminalId)).append("\n");
    sb.append("    terminalSerialNumber: ").append(toIndentedString(terminalSerialNumber)).append("\n");
    sb.append("    laneNumber: ").append(toIndentedString(laneNumber)).append("\n");
    sb.append("    catLevel: ").append(toIndentedString(catLevel)).append("\n");
    sb.append("    entryMode: ").append(toIndentedString(entryMode)).append("\n");
    sb.append("    terminalCapability: ").append(toIndentedString(terminalCapability)).append("\n");
    sb.append("    pinEntryCapability: ").append(toIndentedString(pinEntryCapability)).append("\n");
    sb.append("    operatingEnvironment: ").append(toIndentedString(operatingEnvironment)).append("\n");
    sb.append("    emv: ").append(toIndentedString(emv)).append("\n");
    sb.append("    amexCapnData: ").append(toIndentedString(amexCapnData)).append("\n");
    sb.append("    trackData: ").append(toIndentedString(trackData)).append("\n");
    sb.append("    storeAndForwardIndicator: ").append(toIndentedString(storeAndForwardIndicator)).append("\n");
    sb.append("    cardholderVerificationMethod: ").append(toIndentedString(cardholderVerificationMethod)).append("\n");
    sb.append("    terminalInputCapability: ").append(toIndentedString(terminalInputCapability)).append("\n");
    sb.append("    terminalCardCaptureCapability: ").append(toIndentedString(terminalCardCaptureCapability)).append("\n");
    sb.append("    terminalOutputCapability: ").append(toIndentedString(terminalOutputCapability)).append("\n");
    sb.append("    terminalPinCapability: ").append(toIndentedString(terminalPinCapability)).append("\n");
    sb.append("    deviceId: ").append(toIndentedString(deviceId)).append("\n");
    sb.append("    pinBlockEncodingFormat: ").append(toIndentedString(pinBlockEncodingFormat)).append("\n");
    sb.append("    encryptedPin: ").append(toIndentedString(encryptedPin)).append("\n");
    sb.append("    encryptedKeySerialNumber: ").append(toIndentedString(encryptedKeySerialNumber)).append("\n");
    sb.append("    partnerSdkVersion: ").append(toIndentedString(partnerSdkVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

