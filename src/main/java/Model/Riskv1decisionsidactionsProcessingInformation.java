/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Riskv1decisionsidactionsProcessingInformation
 */

public class Riskv1decisionsidactionsProcessingInformation {
  @SerializedName("actionList")
  private List<String> actionList = null;

  public Riskv1decisionsidactionsProcessingInformation actionList(List<String> actionList) {
    this.actionList = actionList;
    return this;
  }

  public Riskv1decisionsidactionsProcessingInformation addActionListItem(String actionListItem) {
    if (this.actionList == null) {
      this.actionList = new ArrayList<String>();
    }
    this.actionList.add(actionListItem);
    return this;
  }

   /**
   * Follow-on action to apply to the case after the decision is successfully applied. Possible values are one of the following: - &#x60;CAPTURE&#x60; - &#x60;REVERSE&#x60;  If decision is ACCEPT, then CAPTURE can be used in actionList. If decision is REJECT, then REVERSE can be used. 
   * @return actionList
  **/
  @ApiModelProperty(example = "[\"CAPTURE\",\"REVERSE\"]", value = "Follow-on action to apply to the case after the decision is successfully applied. Possible values are one of the following: - `CAPTURE` - `REVERSE`  If decision is ACCEPT, then CAPTURE can be used in actionList. If decision is REJECT, then REVERSE can be used. ")
  public List<String> getActionList() {
    return actionList;
  }

  public void setActionList(List<String> actionList) {
    this.actionList = actionList;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Riskv1decisionsidactionsProcessingInformation riskv1decisionsidactionsProcessingInformation = (Riskv1decisionsidactionsProcessingInformation) o;
    return Objects.equals(this.actionList, riskv1decisionsidactionsProcessingInformation.actionList);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionList);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Riskv1decisionsidactionsProcessingInformation {\n");
    
    sb.append("    actionList: ").append(toIndentedString(actionList)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

