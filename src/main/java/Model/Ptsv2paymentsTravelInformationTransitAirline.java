/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import Model.Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation;
import Model.Ptsv2paymentsTravelInformationTransitAirlineLegs;
import Model.Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Ptsv2paymentsTravelInformationTransitAirline
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2022-01-19T16:20:04.317+05:30")
public class Ptsv2paymentsTravelInformationTransitAirline {
  @SerializedName("bookingReferenceNumber")
  private String bookingReferenceNumber = null;

  @SerializedName("carrierName")
  private String carrierName = null;

  @SerializedName("ticketIssuer")
  private Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer ticketIssuer = null;

  @SerializedName("ticketNumber")
  private String ticketNumber = null;

  @SerializedName("checkDigit")
  private String checkDigit = null;

  @SerializedName("restrictedTicketIndicator")
  private Integer restrictedTicketIndicator = null;

  @SerializedName("transactionType")
  private Integer transactionType = null;

  @SerializedName("extendedPaymentCode")
  private String extendedPaymentCode = null;

  @SerializedName("passengerName")
  private String passengerName = null;

  @SerializedName("customerCode")
  private String customerCode = null;

  @SerializedName("documentType")
  private String documentType = null;

  @SerializedName("documentNumber")
  private String documentNumber = null;

  @SerializedName("documentNumberOfParts")
  private Integer documentNumberOfParts = null;

  @SerializedName("invoiceNumber")
  private String invoiceNumber = null;

  @SerializedName("invoiceDate")
  private Integer invoiceDate = null;

  @SerializedName("additionalCharges")
  private String additionalCharges = null;

  @SerializedName("totalFeeAmount")
  private String totalFeeAmount = null;

  @SerializedName("clearingSequence")
  private String clearingSequence = null;

  @SerializedName("clearingCount")
  private String clearingCount = null;

  @SerializedName("totalClearingAmount")
  private String totalClearingAmount = null;

  @SerializedName("numberOfPassengers")
  private Integer numberOfPassengers = null;

  @SerializedName("reservationSystemCode")
  private String reservationSystemCode = null;

  @SerializedName("processIdentifier")
  private String processIdentifier = null;

  @SerializedName("ticketIssueDate")
  private String ticketIssueDate = null;

  @SerializedName("electronicTicketIndicator")
  private Boolean electronicTicketIndicator = null;

  @SerializedName("originalTicketNumber")
  private String originalTicketNumber = null;

  @SerializedName("purchaseType")
  private String purchaseType = null;

  @SerializedName("creditReasonIndicator")
  private String creditReasonIndicator = null;

  @SerializedName("ticketChangeIndicator")
  private String ticketChangeIndicator = null;

  @SerializedName("planNumber")
  private String planNumber = null;

  @SerializedName("arrivalDate")
  private String arrivalDate = null;

  @SerializedName("restrictedTicketDesciption")
  private String restrictedTicketDesciption = null;

  @SerializedName("exchangeTicketAmount")
  private String exchangeTicketAmount = null;

  @SerializedName("exchangeTicketFeeAmount")
  private String exchangeTicketFeeAmount = null;

  @SerializedName("reservationType")
  private String reservationType = null;

  @SerializedName("boardingFeeAmount")
  private String boardingFeeAmount = null;

  @SerializedName("legs")
  private List<Ptsv2paymentsTravelInformationTransitAirlineLegs> legs = null;

  @SerializedName("ancillaryInformation")
  private Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation ancillaryInformation = null;

  public Ptsv2paymentsTravelInformationTransitAirline bookingReferenceNumber(String bookingReferenceNumber) {
    this.bookingReferenceNumber = bookingReferenceNumber;
    return this;
  }

   /**
   * Reference number for the airline booking. Required if ticket numbers are not issued. 
   * @return bookingReferenceNumber
  **/
  @ApiModelProperty(value = "Reference number for the airline booking. Required if ticket numbers are not issued. ")
  public String getBookingReferenceNumber() {
    return bookingReferenceNumber;
  }

  public void setBookingReferenceNumber(String bookingReferenceNumber) {
    this.bookingReferenceNumber = bookingReferenceNumber;
  }

  public Ptsv2paymentsTravelInformationTransitAirline carrierName(String carrierName) {
    this.carrierName = carrierName;
    return this;
  }

   /**
   * Airline that generated the ticket. Format: English characters only. Optional request field. 
   * @return carrierName
  **/
  @ApiModelProperty(value = "Airline that generated the ticket. Format: English characters only. Optional request field. ")
  public String getCarrierName() {
    return carrierName;
  }

  public void setCarrierName(String carrierName) {
    this.carrierName = carrierName;
  }

  public Ptsv2paymentsTravelInformationTransitAirline ticketIssuer(Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer ticketIssuer) {
    this.ticketIssuer = ticketIssuer;
    return this;
  }

   /**
   * Get ticketIssuer
   * @return ticketIssuer
  **/
  @ApiModelProperty(value = "")
  public Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer getTicketIssuer() {
    return ticketIssuer;
  }

  public void setTicketIssuer(Ptsv2paymentsTravelInformationTransitAirlineTicketIssuer ticketIssuer) {
    this.ticketIssuer = ticketIssuer;
  }

  public Ptsv2paymentsTravelInformationTransitAirline ticketNumber(String ticketNumber) {
    this.ticketNumber = ticketNumber;
    return this;
  }

   /**
   * Ticket number. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. 
   * @return ticketNumber
  **/
  @ApiModelProperty(value = "Ticket number. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. ")
  public String getTicketNumber() {
    return ticketNumber;
  }

  public void setTicketNumber(String ticketNumber) {
    this.ticketNumber = ticketNumber;
  }

  public Ptsv2paymentsTravelInformationTransitAirline checkDigit(String checkDigit) {
    this.checkDigit = checkDigit;
    return this;
  }

   /**
   * Check digit for the ticket number. CyberSource recommends that you validate the check digit. With Discover and Diners Club, a valid ticket number has these characteristics: - The value is numeric. - The first three digits are a valid IATA2 license plate carrier code. - The last digit is a check digit or zero (0). - All remaining digits are nonzero. 
   * @return checkDigit
  **/
  @ApiModelProperty(value = "Check digit for the ticket number. CyberSource recommends that you validate the check digit. With Discover and Diners Club, a valid ticket number has these characteristics: - The value is numeric. - The first three digits are a valid IATA2 license plate carrier code. - The last digit is a check digit or zero (0). - All remaining digits are nonzero. ")
  public String getCheckDigit() {
    return checkDigit;
  }

  public void setCheckDigit(String checkDigit) {
    this.checkDigit = checkDigit;
  }

  public Ptsv2paymentsTravelInformationTransitAirline restrictedTicketIndicator(Integer restrictedTicketIndicator) {
    this.restrictedTicketIndicator = restrictedTicketIndicator;
    return this;
  }

   /**
   * Flag that indicates whether or not the ticket is restricted (nonrefundable). Possible values: - 0: No restriction (refundable) - 1: Restricted (nonrefundable) Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. 
   * @return restrictedTicketIndicator
  **/
  @ApiModelProperty(value = "Flag that indicates whether or not the ticket is restricted (nonrefundable). Possible values: - 0: No restriction (refundable) - 1: Restricted (nonrefundable) Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. ")
  public Integer getRestrictedTicketIndicator() {
    return restrictedTicketIndicator;
  }

  public void setRestrictedTicketIndicator(Integer restrictedTicketIndicator) {
    this.restrictedTicketIndicator = restrictedTicketIndicator;
  }

  public Ptsv2paymentsTravelInformationTransitAirline transactionType(Integer transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Type of charge. Possible values: - 01: Charge is for an airline ticket - 02: Charge is for an item that is not an airline ticket 
   * @return transactionType
  **/
  @ApiModelProperty(value = "Type of charge. Possible values: - 01: Charge is for an airline ticket - 02: Charge is for an item that is not an airline ticket ")
  public Integer getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(Integer transactionType) {
    this.transactionType = transactionType;
  }

  public Ptsv2paymentsTravelInformationTransitAirline extendedPaymentCode(String extendedPaymentCode) {
    this.extendedPaymentCode = extendedPaymentCode;
    return this;
  }

   /**
   * The field is not currently supported. 
   * @return extendedPaymentCode
  **/
  @ApiModelProperty(value = "The field is not currently supported. ")
  public String getExtendedPaymentCode() {
    return extendedPaymentCode;
  }

  public void setExtendedPaymentCode(String extendedPaymentCode) {
    this.extendedPaymentCode = extendedPaymentCode;
  }

  public Ptsv2paymentsTravelInformationTransitAirline passengerName(String passengerName) {
    this.passengerName = passengerName;
    return this;
  }

   /**
   * Name of the passenger to whom the ticket was issued.  This will always be a single passenger&#39;s name. If there are more than one passengers, provide only the primary passenger&#39;s name. Do not include special characters such as commas, hyphens, or apostrophes. Only ASCII characters are supported. Format: English characters only. Optional request field. 
   * @return passengerName
  **/
  @ApiModelProperty(value = "Name of the passenger to whom the ticket was issued.  This will always be a single passenger's name. If there are more than one passengers, provide only the primary passenger's name. Do not include special characters such as commas, hyphens, or apostrophes. Only ASCII characters are supported. Format: English characters only. Optional request field. ")
  public String getPassengerName() {
    return passengerName;
  }

  public void setPassengerName(String passengerName) {
    this.passengerName = passengerName;
  }

  public Ptsv2paymentsTravelInformationTransitAirline customerCode(String customerCode) {
    this.customerCode = customerCode;
    return this;
  }

   /**
   * Reference number or code that identifies the cardholder. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. 
   * @return customerCode
  **/
  @ApiModelProperty(value = "Reference number or code that identifies the cardholder. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. ")
  public String getCustomerCode() {
    return customerCode;
  }

  public void setCustomerCode(String customerCode) {
    this.customerCode = customerCode;
  }

  public Ptsv2paymentsTravelInformationTransitAirline documentType(String documentType) {
    this.documentType = documentType;
    return this;
  }

   /**
   * Airline document type code that specifies the purpose of the transaction. Format: English characters only. Optional request field.  | Code | Description | | --- | --- | | 01 | Passenger ticket | | 02 | Additional collection | | 03 | Excess baggage | | 04 | Miscellaneous charge order (MCO) or prepaid ticket authorization | | 05 | Special service ticket | | 06 | Supported refund | | 07 | Unsupported refund | | 08 | Lost ticket application | | 09 | Tour order voucher | | 10 | Ticket by mail | | 11 | Undercharge adjustment | | 12 | Group ticket | | 13 | Exchange adjustment | | 14 | SPD or air freight | | 15 | In-flight adjustment | | 16 | Agency passenger ticket | | 17 | Agency tour order or voucher | | 18 | Agency miscellaneous charge order (MCO) | | 19 | Agency exchange order | | 20 | Agency group ticket | | 21 | Debit adjustment for duplicate refund or use | | 22 | In-flight merchandise order | | 23 | Catalogue merchandise order | | 24 | In-flight phone charges | | 25 | Frequent flyer fee or purchase | | 26 | Kennel charge | | 27 | Animal transportation charge | | 28 | Firearms case | | 29 | Upgrade charge | | 30 | Credit for unused transportation | | 31 | Credit for class of service adjustment | | 32 | Credit for denied boarding | | 33 | Credit for miscellaneous refund | | 34 | Credit for lost ticket refund | | 35 | Credit for exchange refund | | 36 | Credit for overcharge adjustment | | 37 | Credit for multiple Unused tickets | | 38 | Exchange order | | 39 | Self-service ticket | | 41 | In-flight duty-free purchase | | 42 | Senior citizen discount booklets | | 43 | Club membership fee | | 44 | Coupon book | | 45 | In-flight charges | | 46 | Tour deposit | | 47 | Frequent flyer overnight delivery charge | | 48 | Frequent flyer fulfillment | | 49 | Small package delivery | | 50 | Vendor sale | | 51 | Miscellaneous taxes or fees | | 52 | Travel agency fee | | 60 | Vendor refund or credit | | 64 | Duty free sale | | 65 | Preferred seat upgrade | | 66 | Cabin upgrade | | 67 | Lounge or club access or day pass | | 68 | Agent assisted reservation or ticketing fee | | 69 | Ticket change or cancel fee | | 70 | Trip insurance | | 71 | Unaccompanied minor | | 72 | Standby fee | | 73 | Curbside baggage | | 74 | In-flight medical equipment | | 75 | Ticket or pass print fee | | 76 | Checked sporting or special equipment | | 77 | Dry ice fee | | 78 | Mail or postage fee | | 79 | Club membership fee or temporary trial | | 80 | Frequent flyer activation or reinstatement | | 81 | Gift certificate | | 82 | Onboard or in-flight prepaid voucher | | 83 | Optional services fee | | 84 | Advance purchase for excess baggage | | 85 | Advance purchase for preferred seat upgrade | | 86 | Advance purchase for cabin upgrade | | 87 | Advance purchase for optional services | | 88 | WiFi | | 89 | Packages | | 90 | In-flight entertainment or internet access | | 91 | Overweight bag fee | | 92 | Sleep sets | | 93 | Special purchase fee | 
   * @return documentType
  **/
  @ApiModelProperty(value = "Airline document type code that specifies the purpose of the transaction. Format: English characters only. Optional request field.  | Code | Description | | --- | --- | | 01 | Passenger ticket | | 02 | Additional collection | | 03 | Excess baggage | | 04 | Miscellaneous charge order (MCO) or prepaid ticket authorization | | 05 | Special service ticket | | 06 | Supported refund | | 07 | Unsupported refund | | 08 | Lost ticket application | | 09 | Tour order voucher | | 10 | Ticket by mail | | 11 | Undercharge adjustment | | 12 | Group ticket | | 13 | Exchange adjustment | | 14 | SPD or air freight | | 15 | In-flight adjustment | | 16 | Agency passenger ticket | | 17 | Agency tour order or voucher | | 18 | Agency miscellaneous charge order (MCO) | | 19 | Agency exchange order | | 20 | Agency group ticket | | 21 | Debit adjustment for duplicate refund or use | | 22 | In-flight merchandise order | | 23 | Catalogue merchandise order | | 24 | In-flight phone charges | | 25 | Frequent flyer fee or purchase | | 26 | Kennel charge | | 27 | Animal transportation charge | | 28 | Firearms case | | 29 | Upgrade charge | | 30 | Credit for unused transportation | | 31 | Credit for class of service adjustment | | 32 | Credit for denied boarding | | 33 | Credit for miscellaneous refund | | 34 | Credit for lost ticket refund | | 35 | Credit for exchange refund | | 36 | Credit for overcharge adjustment | | 37 | Credit for multiple Unused tickets | | 38 | Exchange order | | 39 | Self-service ticket | | 41 | In-flight duty-free purchase | | 42 | Senior citizen discount booklets | | 43 | Club membership fee | | 44 | Coupon book | | 45 | In-flight charges | | 46 | Tour deposit | | 47 | Frequent flyer overnight delivery charge | | 48 | Frequent flyer fulfillment | | 49 | Small package delivery | | 50 | Vendor sale | | 51 | Miscellaneous taxes or fees | | 52 | Travel agency fee | | 60 | Vendor refund or credit | | 64 | Duty free sale | | 65 | Preferred seat upgrade | | 66 | Cabin upgrade | | 67 | Lounge or club access or day pass | | 68 | Agent assisted reservation or ticketing fee | | 69 | Ticket change or cancel fee | | 70 | Trip insurance | | 71 | Unaccompanied minor | | 72 | Standby fee | | 73 | Curbside baggage | | 74 | In-flight medical equipment | | 75 | Ticket or pass print fee | | 76 | Checked sporting or special equipment | | 77 | Dry ice fee | | 78 | Mail or postage fee | | 79 | Club membership fee or temporary trial | | 80 | Frequent flyer activation or reinstatement | | 81 | Gift certificate | | 82 | Onboard or in-flight prepaid voucher | | 83 | Optional services fee | | 84 | Advance purchase for excess baggage | | 85 | Advance purchase for preferred seat upgrade | | 86 | Advance purchase for cabin upgrade | | 87 | Advance purchase for optional services | | 88 | WiFi | | 89 | Packages | | 90 | In-flight entertainment or internet access | | 91 | Overweight bag fee | | 92 | Sleep sets | | 93 | Special purchase fee | ")
  public String getDocumentType() {
    return documentType;
  }

  public void setDocumentType(String documentType) {
    this.documentType = documentType;
  }

  public Ptsv2paymentsTravelInformationTransitAirline documentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
    return this;
  }

   /**
   * The field is not currently supported. 
   * @return documentNumber
  **/
  @ApiModelProperty(value = "The field is not currently supported. ")
  public String getDocumentNumber() {
    return documentNumber;
  }

  public void setDocumentNumber(String documentNumber) {
    this.documentNumber = documentNumber;
  }

  public Ptsv2paymentsTravelInformationTransitAirline documentNumberOfParts(Integer documentNumberOfParts) {
    this.documentNumberOfParts = documentNumberOfParts;
    return this;
  }

   /**
   * The field is not currently supported. 
   * @return documentNumberOfParts
  **/
  @ApiModelProperty(value = "The field is not currently supported. ")
  public Integer getDocumentNumberOfParts() {
    return documentNumberOfParts;
  }

  public void setDocumentNumberOfParts(Integer documentNumberOfParts) {
    this.documentNumberOfParts = documentNumberOfParts;
  }

  public Ptsv2paymentsTravelInformationTransitAirline invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

   /**
   * Invoice number for the airline transaction. 
   * @return invoiceNumber
  **/
  @ApiModelProperty(value = "Invoice number for the airline transaction. ")
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }

  public Ptsv2paymentsTravelInformationTransitAirline invoiceDate(Integer invoiceDate) {
    this.invoiceDate = invoiceDate;
    return this;
  }

   /**
   * Invoice date. The format is YYYYMMDD. If this value is included in the request, it is used in the creation of the invoice number. See \&quot;Invoice Number,\&quot; 
   * @return invoiceDate
  **/
  @ApiModelProperty(value = "Invoice date. The format is YYYYMMDD. If this value is included in the request, it is used in the creation of the invoice number. See \"Invoice Number,\" ")
  public Integer getInvoiceDate() {
    return invoiceDate;
  }

  public void setInvoiceDate(Integer invoiceDate) {
    this.invoiceDate = invoiceDate;
  }

  public Ptsv2paymentsTravelInformationTransitAirline additionalCharges(String additionalCharges) {
    this.additionalCharges = additionalCharges;
    return this;
  }

   /**
   * Description of the charge if the charge does not involve an airline ticket. For example: Excess baggage. 
   * @return additionalCharges
  **/
  @ApiModelProperty(value = "Description of the charge if the charge does not involve an airline ticket. For example: Excess baggage. ")
  public String getAdditionalCharges() {
    return additionalCharges;
  }

  public void setAdditionalCharges(String additionalCharges) {
    this.additionalCharges = additionalCharges;
  }

  public Ptsv2paymentsTravelInformationTransitAirline totalFeeAmount(String totalFeeAmount) {
    this.totalFeeAmount = totalFeeAmount;
    return this;
  }

   /**
   * Total fee for the ticket. This value cannot exceed &#x60;99999999999999999999&#x60; (twenty 9s). Format: English characters only. Optional request field. 
   * @return totalFeeAmount
  **/
  @ApiModelProperty(value = "Total fee for the ticket. This value cannot exceed `99999999999999999999` (twenty 9s). Format: English characters only. Optional request field. ")
  public String getTotalFeeAmount() {
    return totalFeeAmount;
  }

  public void setTotalFeeAmount(String totalFeeAmount) {
    this.totalFeeAmount = totalFeeAmount;
  }

  public Ptsv2paymentsTravelInformationTransitAirline clearingSequence(String clearingSequence) {
    this.clearingSequence = clearingSequence;
    return this;
  }

   /**
   * Number that identifies the clearing message when multiple clearing messages are allowed per authorized transaction. Each clearing message linked to one authorization request must include a unique clearing sequence number between 1 and the total number of clearing records. Format: English characters only. Optional request field. 
   * @return clearingSequence
  **/
  @ApiModelProperty(value = "Number that identifies the clearing message when multiple clearing messages are allowed per authorized transaction. Each clearing message linked to one authorization request must include a unique clearing sequence number between 1 and the total number of clearing records. Format: English characters only. Optional request field. ")
  public String getClearingSequence() {
    return clearingSequence;
  }

  public void setClearingSequence(String clearingSequence) {
    this.clearingSequence = clearingSequence;
  }

  public Ptsv2paymentsTravelInformationTransitAirline clearingCount(String clearingCount) {
    this.clearingCount = clearingCount;
    return this;
  }

   /**
   * Total number of clearing messages associated with the authorization request. Format: English characters only. Optional request field. 
   * @return clearingCount
  **/
  @ApiModelProperty(value = "Total number of clearing messages associated with the authorization request. Format: English characters only. Optional request field. ")
  public String getClearingCount() {
    return clearingCount;
  }

  public void setClearingCount(String clearingCount) {
    this.clearingCount = clearingCount;
  }

  public Ptsv2paymentsTravelInformationTransitAirline totalClearingAmount(String totalClearingAmount) {
    this.totalClearingAmount = totalClearingAmount;
    return this;
  }

   /**
   * Total clearing amount for all transactions in the clearing count set. This value cannot exceed &#x60;99999999999999999999&#x60; (twenty 9s). Format: English characters only. If this field is not set and if the total amount from the original authorization is not NULL, the total clearing amount is set to the total amount from the original authorization. 
   * @return totalClearingAmount
  **/
  @ApiModelProperty(value = "Total clearing amount for all transactions in the clearing count set. This value cannot exceed `99999999999999999999` (twenty 9s). Format: English characters only. If this field is not set and if the total amount from the original authorization is not NULL, the total clearing amount is set to the total amount from the original authorization. ")
  public String getTotalClearingAmount() {
    return totalClearingAmount;
  }

  public void setTotalClearingAmount(String totalClearingAmount) {
    this.totalClearingAmount = totalClearingAmount;
  }

  public Ptsv2paymentsTravelInformationTransitAirline numberOfPassengers(Integer numberOfPassengers) {
    this.numberOfPassengers = numberOfPassengers;
    return this;
  }

   /**
   * Number of passengers for whom the ticket was issued. Format: English characters only. Optional request field. 
   * @return numberOfPassengers
  **/
  @ApiModelProperty(value = "Number of passengers for whom the ticket was issued. Format: English characters only. Optional request field. ")
  public Integer getNumberOfPassengers() {
    return numberOfPassengers;
  }

  public void setNumberOfPassengers(Integer numberOfPassengers) {
    this.numberOfPassengers = numberOfPassengers;
  }

  public Ptsv2paymentsTravelInformationTransitAirline reservationSystemCode(String reservationSystemCode) {
    this.reservationSystemCode = reservationSystemCode;
    return this;
  }

   /**
   * Code that specifies the computerized reservation system used to make the reservation and purchase the ticket. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. 
   * @return reservationSystemCode
  **/
  @ApiModelProperty(value = "Code that specifies the computerized reservation system used to make the reservation and purchase the ticket. Format: English characters only. Restricted string data type that indicates a sequence of letters, numbers, and spaces; special characters are not included. Optional request field. ")
  public String getReservationSystemCode() {
    return reservationSystemCode;
  }

  public void setReservationSystemCode(String reservationSystemCode) {
    this.reservationSystemCode = reservationSystemCode;
  }

  public Ptsv2paymentsTravelInformationTransitAirline processIdentifier(String processIdentifier) {
    this.processIdentifier = processIdentifier;
    return this;
  }

   /**
   * Airline process identifier. This value is the airline’s three-digit IATA1 code which is used to process extended payment airline tickets. 
   * @return processIdentifier
  **/
  @ApiModelProperty(value = "Airline process identifier. This value is the airline’s three-digit IATA1 code which is used to process extended payment airline tickets. ")
  public String getProcessIdentifier() {
    return processIdentifier;
  }

  public void setProcessIdentifier(String processIdentifier) {
    this.processIdentifier = processIdentifier;
  }

  public Ptsv2paymentsTravelInformationTransitAirline ticketIssueDate(String ticketIssueDate) {
    this.ticketIssueDate = ticketIssueDate;
    return this;
  }

   /**
   * Date on which the transaction occurred. Format: &#x60;YYYYMMDD&#x60; Format: English characters only. Optional request field. 
   * @return ticketIssueDate
  **/
  @ApiModelProperty(value = "Date on which the transaction occurred. Format: `YYYYMMDD` Format: English characters only. Optional request field. ")
  public String getTicketIssueDate() {
    return ticketIssueDate;
  }

  public void setTicketIssueDate(String ticketIssueDate) {
    this.ticketIssueDate = ticketIssueDate;
  }

  public Ptsv2paymentsTravelInformationTransitAirline electronicTicketIndicator(Boolean electronicTicketIndicator) {
    this.electronicTicketIndicator = electronicTicketIndicator;
    return this;
  }

   /**
   * Flag that indicates whether an electronic ticket was issued. Possible values: - &#x60;true&#x60; - &#x60;false&#x60; Optional request field. 
   * @return electronicTicketIndicator
  **/
  @ApiModelProperty(value = "Flag that indicates whether an electronic ticket was issued. Possible values: - `true` - `false` Optional request field. ")
  public Boolean getElectronicTicketIndicator() {
    return electronicTicketIndicator;
  }

  public void setElectronicTicketIndicator(Boolean electronicTicketIndicator) {
    this.electronicTicketIndicator = electronicTicketIndicator;
  }

  public Ptsv2paymentsTravelInformationTransitAirline originalTicketNumber(String originalTicketNumber) {
    this.originalTicketNumber = originalTicketNumber;
    return this;
  }

   /**
   * Original ticket number when the transaction is for a replacement ticket. 
   * @return originalTicketNumber
  **/
  @ApiModelProperty(value = "Original ticket number when the transaction is for a replacement ticket. ")
  public String getOriginalTicketNumber() {
    return originalTicketNumber;
  }

  public void setOriginalTicketNumber(String originalTicketNumber) {
    this.originalTicketNumber = originalTicketNumber;
  }

  public Ptsv2paymentsTravelInformationTransitAirline purchaseType(String purchaseType) {
    this.purchaseType = purchaseType;
    return this;
  }

   /**
   * Type of purchase. Possible values: - &#x60;EXC&#x60;: Exchange ticket - &#x60;MSC&#x60;: Miscellaneous (not a ticket purchase and not a transaction related to an exchange ticket) - &#x60;REF&#x60;: Refund - &#x60;TKT&#x60;: Ticket Format: English characters only. Optional request field. 
   * @return purchaseType
  **/
  @ApiModelProperty(value = "Type of purchase. Possible values: - `EXC`: Exchange ticket - `MSC`: Miscellaneous (not a ticket purchase and not a transaction related to an exchange ticket) - `REF`: Refund - `TKT`: Ticket Format: English characters only. Optional request field. ")
  public String getPurchaseType() {
    return purchaseType;
  }

  public void setPurchaseType(String purchaseType) {
    this.purchaseType = purchaseType;
  }

  public Ptsv2paymentsTravelInformationTransitAirline creditReasonIndicator(String creditReasonIndicator) {
    this.creditReasonIndicator = creditReasonIndicator;
    return this;
  }

   /**
   * Reason for the credit. Possible values: - &#x60;A&#x60;: Cancellation of the ancillary passenger transport purchase. - &#x60;B&#x60;: Cancellation of the airline ticket and the passenger transport ancillary purchase. - &#x60;C&#x60;: Cancellation of the airline ticket. - &#x60;O&#x60;: Other. - &#x60;P&#x60;: Partial refund of the airline ticket. Format: English characters only.  Optional request field. 
   * @return creditReasonIndicator
  **/
  @ApiModelProperty(value = "Reason for the credit. Possible values: - `A`: Cancellation of the ancillary passenger transport purchase. - `B`: Cancellation of the airline ticket and the passenger transport ancillary purchase. - `C`: Cancellation of the airline ticket. - `O`: Other. - `P`: Partial refund of the airline ticket. Format: English characters only.  Optional request field. ")
  public String getCreditReasonIndicator() {
    return creditReasonIndicator;
  }

  public void setCreditReasonIndicator(String creditReasonIndicator) {
    this.creditReasonIndicator = creditReasonIndicator;
  }

  public Ptsv2paymentsTravelInformationTransitAirline ticketChangeIndicator(String ticketChangeIndicator) {
    this.ticketChangeIndicator = ticketChangeIndicator;
    return this;
  }

   /**
   * Type of update. Possible values: - &#x60;C&#x60;: Change to the existing ticket. - &#x60;N&#x60;: New ticket. Format: English characters only Optional request field. 
   * @return ticketChangeIndicator
  **/
  @ApiModelProperty(value = "Type of update. Possible values: - `C`: Change to the existing ticket. - `N`: New ticket. Format: English characters only Optional request field. ")
  public String getTicketChangeIndicator() {
    return ticketChangeIndicator;
  }

  public void setTicketChangeIndicator(String ticketChangeIndicator) {
    this.ticketChangeIndicator = ticketChangeIndicator;
  }

  public Ptsv2paymentsTravelInformationTransitAirline planNumber(String planNumber) {
    this.planNumber = planNumber;
    return this;
  }

   /**
   * Plan number based on the fare. This value is provided by the airline. Format: English characters only. Optional request field. 
   * @return planNumber
  **/
  @ApiModelProperty(value = "Plan number based on the fare. This value is provided by the airline. Format: English characters only. Optional request field. ")
  public String getPlanNumber() {
    return planNumber;
  }

  public void setPlanNumber(String planNumber) {
    this.planNumber = planNumber;
  }

  public Ptsv2paymentsTravelInformationTransitAirline arrivalDate(String arrivalDate) {
    this.arrivalDate = arrivalDate;
    return this;
  }

   /**
   * Date of arrival for the last leg of the trip. Format: &#x60;MMDDYYYY&#x60; English characters only. Optional request field. 
   * @return arrivalDate
  **/
  @ApiModelProperty(value = "Date of arrival for the last leg of the trip. Format: `MMDDYYYY` English characters only. Optional request field. ")
  public String getArrivalDate() {
    return arrivalDate;
  }

  public void setArrivalDate(String arrivalDate) {
    this.arrivalDate = arrivalDate;
  }

  public Ptsv2paymentsTravelInformationTransitAirline restrictedTicketDesciption(String restrictedTicketDesciption) {
    this.restrictedTicketDesciption = restrictedTicketDesciption;
    return this;
  }

   /**
   * Text that describes the ticket limitations, such as _nonrefundable_. Format: English characters only. Optional request field. 
   * @return restrictedTicketDesciption
  **/
  @ApiModelProperty(value = "Text that describes the ticket limitations, such as _nonrefundable_. Format: English characters only. Optional request field. ")
  public String getRestrictedTicketDesciption() {
    return restrictedTicketDesciption;
  }

  public void setRestrictedTicketDesciption(String restrictedTicketDesciption) {
    this.restrictedTicketDesciption = restrictedTicketDesciption;
  }

  public Ptsv2paymentsTravelInformationTransitAirline exchangeTicketAmount(String exchangeTicketAmount) {
    this.exchangeTicketAmount = exchangeTicketAmount;
    return this;
  }

   /**
   * Amount of the exchanged ticket. Format: English characters only. 
   * @return exchangeTicketAmount
  **/
  @ApiModelProperty(value = "Amount of the exchanged ticket. Format: English characters only. ")
  public String getExchangeTicketAmount() {
    return exchangeTicketAmount;
  }

  public void setExchangeTicketAmount(String exchangeTicketAmount) {
    this.exchangeTicketAmount = exchangeTicketAmount;
  }

  public Ptsv2paymentsTravelInformationTransitAirline exchangeTicketFeeAmount(String exchangeTicketFeeAmount) {
    this.exchangeTicketFeeAmount = exchangeTicketFeeAmount;
    return this;
  }

   /**
   * Fee for exchanging the ticket. Format: English characters only. Optional request field. 
   * @return exchangeTicketFeeAmount
  **/
  @ApiModelProperty(value = "Fee for exchanging the ticket. Format: English characters only. Optional request field. ")
  public String getExchangeTicketFeeAmount() {
    return exchangeTicketFeeAmount;
  }

  public void setExchangeTicketFeeAmount(String exchangeTicketFeeAmount) {
    this.exchangeTicketFeeAmount = exchangeTicketFeeAmount;
  }

  public Ptsv2paymentsTravelInformationTransitAirline reservationType(String reservationType) {
    this.reservationType = reservationType;
    return this;
  }

   /**
   * The field is not currently supported. 
   * @return reservationType
  **/
  @ApiModelProperty(value = "The field is not currently supported. ")
  public String getReservationType() {
    return reservationType;
  }

  public void setReservationType(String reservationType) {
    this.reservationType = reservationType;
  }

  public Ptsv2paymentsTravelInformationTransitAirline boardingFeeAmount(String boardingFeeAmount) {
    this.boardingFeeAmount = boardingFeeAmount;
    return this;
  }

   /**
   * Boarding fee. 
   * @return boardingFeeAmount
  **/
  @ApiModelProperty(value = "Boarding fee. ")
  public String getBoardingFeeAmount() {
    return boardingFeeAmount;
  }

  public void setBoardingFeeAmount(String boardingFeeAmount) {
    this.boardingFeeAmount = boardingFeeAmount;
  }

  public Ptsv2paymentsTravelInformationTransitAirline legs(List<Ptsv2paymentsTravelInformationTransitAirlineLegs> legs) {
    this.legs = legs;
    return this;
  }

  public Ptsv2paymentsTravelInformationTransitAirline addLegsItem(Ptsv2paymentsTravelInformationTransitAirlineLegs legsItem) {
    if (this.legs == null) {
      this.legs = new ArrayList<Ptsv2paymentsTravelInformationTransitAirlineLegs>();
    }
    this.legs.add(legsItem);
    return this;
  }

   /**
   * Get legs
   * @return legs
  **/
  @ApiModelProperty(value = "")
  public List<Ptsv2paymentsTravelInformationTransitAirlineLegs> getLegs() {
    return legs;
  }

  public void setLegs(List<Ptsv2paymentsTravelInformationTransitAirlineLegs> legs) {
    this.legs = legs;
  }

  public Ptsv2paymentsTravelInformationTransitAirline ancillaryInformation(Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation ancillaryInformation) {
    this.ancillaryInformation = ancillaryInformation;
    return this;
  }

   /**
   * Get ancillaryInformation
   * @return ancillaryInformation
  **/
  @ApiModelProperty(value = "")
  public Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation getAncillaryInformation() {
    return ancillaryInformation;
  }

  public void setAncillaryInformation(Ptsv2paymentsTravelInformationTransitAirlineAncillaryInformation ancillaryInformation) {
    this.ancillaryInformation = ancillaryInformation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ptsv2paymentsTravelInformationTransitAirline ptsv2paymentsTravelInformationTransitAirline = (Ptsv2paymentsTravelInformationTransitAirline) o;
    return Objects.equals(this.bookingReferenceNumber, ptsv2paymentsTravelInformationTransitAirline.bookingReferenceNumber) &&
        Objects.equals(this.carrierName, ptsv2paymentsTravelInformationTransitAirline.carrierName) &&
        Objects.equals(this.ticketIssuer, ptsv2paymentsTravelInformationTransitAirline.ticketIssuer) &&
        Objects.equals(this.ticketNumber, ptsv2paymentsTravelInformationTransitAirline.ticketNumber) &&
        Objects.equals(this.checkDigit, ptsv2paymentsTravelInformationTransitAirline.checkDigit) &&
        Objects.equals(this.restrictedTicketIndicator, ptsv2paymentsTravelInformationTransitAirline.restrictedTicketIndicator) &&
        Objects.equals(this.transactionType, ptsv2paymentsTravelInformationTransitAirline.transactionType) &&
        Objects.equals(this.extendedPaymentCode, ptsv2paymentsTravelInformationTransitAirline.extendedPaymentCode) &&
        Objects.equals(this.passengerName, ptsv2paymentsTravelInformationTransitAirline.passengerName) &&
        Objects.equals(this.customerCode, ptsv2paymentsTravelInformationTransitAirline.customerCode) &&
        Objects.equals(this.documentType, ptsv2paymentsTravelInformationTransitAirline.documentType) &&
        Objects.equals(this.documentNumber, ptsv2paymentsTravelInformationTransitAirline.documentNumber) &&
        Objects.equals(this.documentNumberOfParts, ptsv2paymentsTravelInformationTransitAirline.documentNumberOfParts) &&
        Objects.equals(this.invoiceNumber, ptsv2paymentsTravelInformationTransitAirline.invoiceNumber) &&
        Objects.equals(this.invoiceDate, ptsv2paymentsTravelInformationTransitAirline.invoiceDate) &&
        Objects.equals(this.additionalCharges, ptsv2paymentsTravelInformationTransitAirline.additionalCharges) &&
        Objects.equals(this.totalFeeAmount, ptsv2paymentsTravelInformationTransitAirline.totalFeeAmount) &&
        Objects.equals(this.clearingSequence, ptsv2paymentsTravelInformationTransitAirline.clearingSequence) &&
        Objects.equals(this.clearingCount, ptsv2paymentsTravelInformationTransitAirline.clearingCount) &&
        Objects.equals(this.totalClearingAmount, ptsv2paymentsTravelInformationTransitAirline.totalClearingAmount) &&
        Objects.equals(this.numberOfPassengers, ptsv2paymentsTravelInformationTransitAirline.numberOfPassengers) &&
        Objects.equals(this.reservationSystemCode, ptsv2paymentsTravelInformationTransitAirline.reservationSystemCode) &&
        Objects.equals(this.processIdentifier, ptsv2paymentsTravelInformationTransitAirline.processIdentifier) &&
        Objects.equals(this.ticketIssueDate, ptsv2paymentsTravelInformationTransitAirline.ticketIssueDate) &&
        Objects.equals(this.electronicTicketIndicator, ptsv2paymentsTravelInformationTransitAirline.electronicTicketIndicator) &&
        Objects.equals(this.originalTicketNumber, ptsv2paymentsTravelInformationTransitAirline.originalTicketNumber) &&
        Objects.equals(this.purchaseType, ptsv2paymentsTravelInformationTransitAirline.purchaseType) &&
        Objects.equals(this.creditReasonIndicator, ptsv2paymentsTravelInformationTransitAirline.creditReasonIndicator) &&
        Objects.equals(this.ticketChangeIndicator, ptsv2paymentsTravelInformationTransitAirline.ticketChangeIndicator) &&
        Objects.equals(this.planNumber, ptsv2paymentsTravelInformationTransitAirline.planNumber) &&
        Objects.equals(this.arrivalDate, ptsv2paymentsTravelInformationTransitAirline.arrivalDate) &&
        Objects.equals(this.restrictedTicketDesciption, ptsv2paymentsTravelInformationTransitAirline.restrictedTicketDesciption) &&
        Objects.equals(this.exchangeTicketAmount, ptsv2paymentsTravelInformationTransitAirline.exchangeTicketAmount) &&
        Objects.equals(this.exchangeTicketFeeAmount, ptsv2paymentsTravelInformationTransitAirline.exchangeTicketFeeAmount) &&
        Objects.equals(this.reservationType, ptsv2paymentsTravelInformationTransitAirline.reservationType) &&
        Objects.equals(this.boardingFeeAmount, ptsv2paymentsTravelInformationTransitAirline.boardingFeeAmount) &&
        Objects.equals(this.legs, ptsv2paymentsTravelInformationTransitAirline.legs) &&
        Objects.equals(this.ancillaryInformation, ptsv2paymentsTravelInformationTransitAirline.ancillaryInformation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bookingReferenceNumber, carrierName, ticketIssuer, ticketNumber, checkDigit, restrictedTicketIndicator, transactionType, extendedPaymentCode, passengerName, customerCode, documentType, documentNumber, documentNumberOfParts, invoiceNumber, invoiceDate, additionalCharges, totalFeeAmount, clearingSequence, clearingCount, totalClearingAmount, numberOfPassengers, reservationSystemCode, processIdentifier, ticketIssueDate, electronicTicketIndicator, originalTicketNumber, purchaseType, creditReasonIndicator, ticketChangeIndicator, planNumber, arrivalDate, restrictedTicketDesciption, exchangeTicketAmount, exchangeTicketFeeAmount, reservationType, boardingFeeAmount, legs, ancillaryInformation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ptsv2paymentsTravelInformationTransitAirline {\n");
    
    sb.append("    bookingReferenceNumber: ").append(toIndentedString(bookingReferenceNumber)).append("\n");
    sb.append("    carrierName: ").append(toIndentedString(carrierName)).append("\n");
    sb.append("    ticketIssuer: ").append(toIndentedString(ticketIssuer)).append("\n");
    sb.append("    ticketNumber: ").append(toIndentedString(ticketNumber)).append("\n");
    sb.append("    checkDigit: ").append(toIndentedString(checkDigit)).append("\n");
    sb.append("    restrictedTicketIndicator: ").append(toIndentedString(restrictedTicketIndicator)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    extendedPaymentCode: ").append(toIndentedString(extendedPaymentCode)).append("\n");
    sb.append("    passengerName: ").append(toIndentedString(passengerName)).append("\n");
    sb.append("    customerCode: ").append(toIndentedString(customerCode)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    documentNumber: ").append(toIndentedString(documentNumber)).append("\n");
    sb.append("    documentNumberOfParts: ").append(toIndentedString(documentNumberOfParts)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    additionalCharges: ").append(toIndentedString(additionalCharges)).append("\n");
    sb.append("    totalFeeAmount: ").append(toIndentedString(totalFeeAmount)).append("\n");
    sb.append("    clearingSequence: ").append(toIndentedString(clearingSequence)).append("\n");
    sb.append("    clearingCount: ").append(toIndentedString(clearingCount)).append("\n");
    sb.append("    totalClearingAmount: ").append(toIndentedString(totalClearingAmount)).append("\n");
    sb.append("    numberOfPassengers: ").append(toIndentedString(numberOfPassengers)).append("\n");
    sb.append("    reservationSystemCode: ").append(toIndentedString(reservationSystemCode)).append("\n");
    sb.append("    processIdentifier: ").append(toIndentedString(processIdentifier)).append("\n");
    sb.append("    ticketIssueDate: ").append(toIndentedString(ticketIssueDate)).append("\n");
    sb.append("    electronicTicketIndicator: ").append(toIndentedString(electronicTicketIndicator)).append("\n");
    sb.append("    originalTicketNumber: ").append(toIndentedString(originalTicketNumber)).append("\n");
    sb.append("    purchaseType: ").append(toIndentedString(purchaseType)).append("\n");
    sb.append("    creditReasonIndicator: ").append(toIndentedString(creditReasonIndicator)).append("\n");
    sb.append("    ticketChangeIndicator: ").append(toIndentedString(ticketChangeIndicator)).append("\n");
    sb.append("    planNumber: ").append(toIndentedString(planNumber)).append("\n");
    sb.append("    arrivalDate: ").append(toIndentedString(arrivalDate)).append("\n");
    sb.append("    restrictedTicketDesciption: ").append(toIndentedString(restrictedTicketDesciption)).append("\n");
    sb.append("    exchangeTicketAmount: ").append(toIndentedString(exchangeTicketAmount)).append("\n");
    sb.append("    exchangeTicketFeeAmount: ").append(toIndentedString(exchangeTicketFeeAmount)).append("\n");
    sb.append("    reservationType: ").append(toIndentedString(reservationType)).append("\n");
    sb.append("    boardingFeeAmount: ").append(toIndentedString(boardingFeeAmount)).append("\n");
    sb.append("    legs: ").append(toIndentedString(legs)).append("\n");
    sb.append("    ancillaryInformation: ").append(toIndentedString(ancillaryInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

