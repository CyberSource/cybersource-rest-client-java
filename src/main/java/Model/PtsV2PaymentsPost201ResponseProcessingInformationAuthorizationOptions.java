/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions
 */

public class PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions {
  @SerializedName("serviceType")
  private String serviceType = null;

  public PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions serviceType(String serviceType) {
    this.serviceType = serviceType;
    return this;
  }

   /**
   * Field is used for back-to-back funding transaction and can be defined as a payment flow that automatically transfers funds through a real-time  funding or a live-load. This type of transaction can also be connected to a purchase.  In back-to-back funding of general purpose card that is used to make a purchase, two separate accounts are involved:  - account one is used to make the purchase - account two is used to automatically fund or reimburse account one  Possible values: - 0B &#x3D; back to back funding transaction - 00 &#x3D; normal transaction - 01 &#x3D; originator hold - 02 &#x3D; Visa deferred OCT hold, default interval - 03 &#x3D; Visa deferred OCT hold, user-defined interval - 09 &#x3D; Cancel pending deferred OCT request - 0I &#x3D; Visa Direct custom program 1 - 0Q &#x3D; uery the status of the deferred OCT - A0 &#x3D; Alias Directory 2 
   * @return serviceType
  **/
  @ApiModelProperty(value = "Field is used for back-to-back funding transaction and can be defined as a payment flow that automatically transfers funds through a real-time  funding or a live-load. This type of transaction can also be connected to a purchase.  In back-to-back funding of general purpose card that is used to make a purchase, two separate accounts are involved:  - account one is used to make the purchase - account two is used to automatically fund or reimburse account one  Possible values: - 0B = back to back funding transaction - 00 = normal transaction - 01 = originator hold - 02 = Visa deferred OCT hold, default interval - 03 = Visa deferred OCT hold, user-defined interval - 09 = Cancel pending deferred OCT request - 0I = Visa Direct custom program 1 - 0Q = uery the status of the deferred OCT - A0 = Alias Directory 2 ")
  public String getServiceType() {
    return serviceType;
  }

  public void setServiceType(String serviceType) {
    this.serviceType = serviceType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions ptsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions = (PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions) o;
    return Objects.equals(this.serviceType, ptsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions.serviceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(serviceType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PtsV2PaymentsPost201ResponseProcessingInformationAuthorizationOptions {\n");
    
    if (serviceType != null) sb.append("    serviceType: ").append(toIndentedString(serviceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

