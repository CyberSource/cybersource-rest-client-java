/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import Model.Boardingv1registrationsOrganizationInformationBusinessInformationAddress;
import Model.Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.joda.time.LocalDate;

/**
 * Boardingv1registrationsOrganizationInformationBusinessInformation
 */

public class Boardingv1registrationsOrganizationInformationBusinessInformation {
  @SerializedName("name")
  private String name = null;

  @SerializedName("doingBusinessAs")
  private String doingBusinessAs = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("startDate")
  private LocalDate startDate = null;

  @SerializedName("address")
  private Boardingv1registrationsOrganizationInformationBusinessInformationAddress address = null;

  /**
   * Merchant perferred time zone Possible Values: - &#39;Pacific/Pago_Pago&#39; - &#39;Pacific/Honolulu&#39; - &#39;America/Anchorage&#39; - &#39;America/Vancouver&#39; - &#39;America/Los_Angeles&#39; - &#39;America/Phoenix&#39; - &#39;America/Edmonton&#39; - &#39;America/Denver&#39; - &#39;America/Winnipeg&#39; - &#39;America/Mexico_City&#39; - &#39;America/Chicago&#39; - &#39;America/Bogota&#39; - &#39;America/Indianapolis&#39; - &#39;America/New_York&#39; - &#39;America/La_Paz&#39; - &#39;America/Halifax&#39; - &#39;America/St_Johns&#39; - &#39;America/Buenos_Aires&#39; - &#39;America/Godthab&#39; - &#39;America/Sao_Paulo&#39; - &#39;America/Noronha&#39; - &#39;Atlantic/Cape_Verde&#39; - &#39;GMT&#39; - &#39;Europe/Dublin&#39; - &#39;Europe/Lisbon&#39; - &#39;Europe/London&#39; - &#39;Africa/Tunis&#39; - &#39;Europe/Vienna&#39; - &#39;Europe/Brussels&#39; - &#39;Europe/Zurich&#39; - &#39;Europe/Prague&#39; - &#39;Europe/Berlin&#39; - &#39;Europe/Copenhagen&#39; - &#39;Europe/Madrid&#39; - &#39;Europe/Budapest&#39; - &#39;Europe/Rome&#39; - &#39;Africa/Tripoli&#39; - &#39;Europe/Monaco&#39; - &#39;Europe/Malta&#39; - &#39;Europe/Amsterdam&#39; - &#39;Europe/Oslo&#39; - &#39;Europe/Warsaw&#39; - &#39;Europe/Stockholm&#39; - &#39;Europe/Belgrade&#39; - &#39;Europe/Paris&#39; - &#39;Africa/Johannesburg&#39; - &#39;Europe/Minsk&#39; - &#39;Africa/Cairo&#39; - &#39;Europe/Helsinki&#39; - &#39;Europe/Athens&#39; - &#39;Asia/Jerusalem&#39; - &#39;Europe/Riga&#39; - &#39;Europe/Bucharest&#39; - &#39;Europe/Istanbul&#39; - &#39;Asia/Riyadh&#39; - &#39;Europe/Moscow&#39; - &#39;Asia/Dubai&#39; - &#39;Asia/Baku&#39; - &#39;Asia/Tbilisi&#39; - &#39;Asia/Calcutta&#39; - &#39;Asia/Katmandu&#39; - &#39;Asia/Dacca&#39; - &#39;Asia/Rangoon&#39; - &#39;Asia/Jakarta&#39; - &#39;Asia/Saigon&#39; - &#39;Asia/Bangkok&#39; - &#39;Australia/Perth&#39; - &#39;Asia/Hong_Kong&#39; - &#39;Asia/Macao&#39; - &#39;Asia/Kuala_Lumpur&#39; - &#39;Asia/Manila&#39; - &#39;Asia/Singapore&#39; - &#39;Asia/Taipei&#39; - &#39;Asia/Shanghai&#39; - &#39;Asia/Seoul&#39; - &#39;Asia/Tokyo&#39; - &#39;Asia/Yakutsk&#39; - &#39;Australia/Adelaide&#39; - &#39;Australia/Brisbane&#39; - &#39;Australia/Broken_Hill&#39; - &#39;Australia/Darwin&#39; - &#39;Australia/Eucla&#39; - &#39;Australia/Hobart&#39; - &#39;Australia/Lindeman&#39; - &#39;Australia/Sydney&#39; - &#39;Australia/Lord_Howe&#39; - &#39;Australia/Melbourne&#39; - &#39;Asia/Magadan&#39; - &#39;Pacific/Norfolk&#39; - &#39;Pacific/Auckland&#39; 
   */
  @JsonAdapter(TimeZoneEnum.Adapter.class)
  public enum TimeZoneEnum {
    PACIFIC_PAGO_PAGO("Pacific/Pago_Pago"),
    
    PACIFIC_HONOLULU("Pacific/Honolulu"),
    
    AMERICA_ANCHORAGE("America/Anchorage"),
    
    AMERICA_VANCOUVER("America/Vancouver"),
    
    AMERICA_LOS_ANGELES("America/Los_Angeles"),
    
    AMERICA_PHOENIX("America/Phoenix"),
    
    AMERICA_EDMONTON("America/Edmonton"),
    
    AMERICA_DENVER("America/Denver"),
    
    AMERICA_WINNIPEG("America/Winnipeg"),
    
    AMERICA_MEXICO_CITY("America/Mexico_City"),
    
    AMERICA_CHICAGO("America/Chicago"),
    
    AMERICA_BOGOTA("America/Bogota"),
    
    AMERICA_INDIANAPOLIS("America/Indianapolis"),
    
    AMERICA_NEW_YORK("America/New_York"),
    
    AMERICA_LA_PAZ("America/La_Paz"),
    
    AMERICA_HALIFAX("America/Halifax"),
    
    AMERICA_ST_JOHNS("America/St_Johns"),
    
    AMERICA_BUENOS_AIRES("America/Buenos_Aires"),
    
    AMERICA_GODTHAB("America/Godthab"),
    
    AMERICA_SAO_PAULO("America/Sao_Paulo"),
    
    AMERICA_NORONHA("America/Noronha"),
    
    ATLANTIC_CAPE_VERDE("Atlantic/Cape_Verde"),
    
    GMT("GMT"),
    
    EUROPE_DUBLIN("Europe/Dublin"),
    
    EUROPE_LISBON("Europe/Lisbon"),
    
    EUROPE_LONDON("Europe/London"),
    
    AFRICA_TUNIS("Africa/Tunis"),
    
    EUROPE_VIENNA("Europe/Vienna"),
    
    EUROPE_BRUSSELS("Europe/Brussels"),
    
    EUROPE_ZURICH("Europe/Zurich"),
    
    EUROPE_PRAGUE("Europe/Prague"),
    
    EUROPE_BERLIN("Europe/Berlin"),
    
    EUROPE_COPENHAGEN("Europe/Copenhagen"),
    
    EUROPE_MADRID("Europe/Madrid"),
    
    EUROPE_BUDAPEST("Europe/Budapest"),
    
    EUROPE_ROME("Europe/Rome"),
    
    AFRICA_TRIPOLI("Africa/Tripoli"),
    
    EUROPE_MONACO("Europe/Monaco"),
    
    EUROPE_MALTA("Europe/Malta"),
    
    EUROPE_AMSTERDAM("Europe/Amsterdam"),
    
    EUROPE_OSLO("Europe/Oslo"),
    
    EUROPE_WARSAW("Europe/Warsaw"),
    
    EUROPE_STOCKHOLM("Europe/Stockholm"),
    
    EUROPE_BELGRADE("Europe/Belgrade"),
    
    EUROPE_PARIS("Europe/Paris"),
    
    AFRICA_JOHANNESBURG("Africa/Johannesburg"),
    
    EUROPE_MINSK("Europe/Minsk"),
    
    AFRICA_CAIRO("Africa/Cairo"),
    
    EUROPE_HELSINKI("Europe/Helsinki"),
    
    EUROPE_ATHENS("Europe/Athens"),
    
    ASIA_JERUSALEM("Asia/Jerusalem"),
    
    EUROPE_RIGA("Europe/Riga"),
    
    EUROPE_BUCHAREST("Europe/Bucharest"),
    
    EUROPE_ISTANBUL("Europe/Istanbul"),
    
    ASIA_RIYADH("Asia/Riyadh"),
    
    EUROPE_MOSCOW("Europe/Moscow"),
    
    ASIA_DUBAI("Asia/Dubai"),
    
    ASIA_BAKU("Asia/Baku"),
    
    ASIA_TBILISI("Asia/Tbilisi"),
    
    ASIA_CALCUTTA("Asia/Calcutta"),
    
    ASIA_KATMANDU("Asia/Katmandu"),
    
    ASIA_DACCA("Asia/Dacca"),
    
    ASIA_RANGOON("Asia/Rangoon"),
    
    ASIA_JAKARTA("Asia/Jakarta"),
    
    ASIA_SAIGON("Asia/Saigon"),
    
    ASIA_BANGKOK("Asia/Bangkok"),
    
    AUSTRALIA_PERTH("Australia/Perth"),
    
    ASIA_HONG_KONG("Asia/Hong_Kong"),
    
    ASIA_MACAO("Asia/Macao"),
    
    ASIA_KUALA_LUMPUR("Asia/Kuala_Lumpur"),
    
    ASIA_MANILA("Asia/Manila"),
    
    ASIA_SINGAPORE("Asia/Singapore"),
    
    ASIA_TAIPEI("Asia/Taipei"),
    
    ASIA_SHANGHAI("Asia/Shanghai"),
    
    ASIA_SEOUL("Asia/Seoul"),
    
    ASIA_TOKYO("Asia/Tokyo"),
    
    ASIA_YAKUTSK("Asia/Yakutsk"),
    
    AUSTRALIA_ADELAIDE("Australia/Adelaide"),
    
    AUSTRALIA_BRISBANE("Australia/Brisbane"),
    
    AUSTRALIA_BROKEN_HILL("Australia/Broken_Hill"),
    
    AUSTRALIA_DARWIN("Australia/Darwin"),
    
    AUSTRALIA_EUCLA("Australia/Eucla"),
    
    AUSTRALIA_HOBART("Australia/Hobart"),
    
    AUSTRALIA_LINDEMAN("Australia/Lindeman"),
    
    AUSTRALIA_SYDNEY("Australia/Sydney"),
    
    AUSTRALIA_LORD_HOWE("Australia/Lord_Howe"),
    
    AUSTRALIA_MELBOURNE("Australia/Melbourne"),
    
    ASIA_MAGADAN("Asia/Magadan"),
    
    PACIFIC_NORFOLK("Pacific/Norfolk"),
    
    PACIFIC_AUCKLAND("Pacific/Auckland");

    private String value;

    TimeZoneEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TimeZoneEnum fromValue(String text) {
      for (TimeZoneEnum b : TimeZoneEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TimeZoneEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TimeZoneEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TimeZoneEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TimeZoneEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("timeZone")
  private TimeZoneEnum timeZone = null;

  @SerializedName("websiteUrl")
  private String websiteUrl = null;

  /**
   * Business type Possible Values:   - &#39;PARTNERSHIP&#39;   - &#39;SOLE_PROPRIETORSHIP&#39;   - &#39;CORPORATION&#39;   - &#39;LLC&#39;   - &#39;NON_PROFIT&#39;   - &#39;TRUST&#39; 
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PARTNERSHIP("PARTNERSHIP"),
    
    SOLE_PROPRIETORSHIP("SOLE_PROPRIETORSHIP"),
    
    CORPORATION("CORPORATION"),
    
    LLC("LLC"),
    
    NON_PROFIT("NON_PROFIT"),
    
    TRUST("TRUST");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("taxId")
  private String taxId = null;

  @SerializedName("phoneNumber")
  private String phoneNumber = null;

  @SerializedName("businessContact")
  private Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact businessContact = null;

  @SerializedName("technicalContact")
  private Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact technicalContact = null;

  @SerializedName("emergencyContact")
  private Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact emergencyContact = null;

  @SerializedName("merchantCategoryCode")
  private String merchantCategoryCode = null;

  public Boardingv1registrationsOrganizationInformationBusinessInformation name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @ApiModelProperty(example = "Betos Restaurant", required = true, value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Boardingv1registrationsOrganizationInformationBusinessInformation doingBusinessAs(String doingBusinessAs) {
    this.doingBusinessAs = doingBusinessAs;
    return this;
  }

   /**
   * Get doingBusinessAs
   * @return doingBusinessAs
  **/
  @ApiModelProperty(example = "Betos Restaurant", value = "")
  public String getDoingBusinessAs() {
    return doingBusinessAs;
  }

  public void setDoingBusinessAs(String doingBusinessAs) {
    this.doingBusinessAs = doingBusinessAs;
  }

  public Boardingv1registrationsOrganizationInformationBusinessInformation description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @ApiModelProperty(example = "International food Restaurant", value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Boardingv1registrationsOrganizationInformationBusinessInformation startDate(LocalDate startDate) {
    this.startDate = startDate;
    return this;
  }

   /**
   * &#x60;Format: YYYY-MM-DD&#x60; Example 2016-08-11 equals August 11, 2016 
   * @return startDate
  **/
  @ApiModelProperty(example = "2019-06-11T00:00:00.000Z", value = "`Format: YYYY-MM-DD` Example 2016-08-11 equals August 11, 2016 ")
  public LocalDate getStartDate() {
    return startDate;
  }

  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }

  public Boardingv1registrationsOrganizationInformationBusinessInformation address(Boardingv1registrationsOrganizationInformationBusinessInformationAddress address) {
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @ApiModelProperty(value = "")
  public Boardingv1registrationsOrganizationInformationBusinessInformationAddress getAddress() {
    return address;
  }

  public void setAddress(Boardingv1registrationsOrganizationInformationBusinessInformationAddress address) {
    this.address = address;
  }

  public Boardingv1registrationsOrganizationInformationBusinessInformation timeZone(TimeZoneEnum timeZone) {
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Merchant perferred time zone Possible Values: - &#39;Pacific/Pago_Pago&#39; - &#39;Pacific/Honolulu&#39; - &#39;America/Anchorage&#39; - &#39;America/Vancouver&#39; - &#39;America/Los_Angeles&#39; - &#39;America/Phoenix&#39; - &#39;America/Edmonton&#39; - &#39;America/Denver&#39; - &#39;America/Winnipeg&#39; - &#39;America/Mexico_City&#39; - &#39;America/Chicago&#39; - &#39;America/Bogota&#39; - &#39;America/Indianapolis&#39; - &#39;America/New_York&#39; - &#39;America/La_Paz&#39; - &#39;America/Halifax&#39; - &#39;America/St_Johns&#39; - &#39;America/Buenos_Aires&#39; - &#39;America/Godthab&#39; - &#39;America/Sao_Paulo&#39; - &#39;America/Noronha&#39; - &#39;Atlantic/Cape_Verde&#39; - &#39;GMT&#39; - &#39;Europe/Dublin&#39; - &#39;Europe/Lisbon&#39; - &#39;Europe/London&#39; - &#39;Africa/Tunis&#39; - &#39;Europe/Vienna&#39; - &#39;Europe/Brussels&#39; - &#39;Europe/Zurich&#39; - &#39;Europe/Prague&#39; - &#39;Europe/Berlin&#39; - &#39;Europe/Copenhagen&#39; - &#39;Europe/Madrid&#39; - &#39;Europe/Budapest&#39; - &#39;Europe/Rome&#39; - &#39;Africa/Tripoli&#39; - &#39;Europe/Monaco&#39; - &#39;Europe/Malta&#39; - &#39;Europe/Amsterdam&#39; - &#39;Europe/Oslo&#39; - &#39;Europe/Warsaw&#39; - &#39;Europe/Stockholm&#39; - &#39;Europe/Belgrade&#39; - &#39;Europe/Paris&#39; - &#39;Africa/Johannesburg&#39; - &#39;Europe/Minsk&#39; - &#39;Africa/Cairo&#39; - &#39;Europe/Helsinki&#39; - &#39;Europe/Athens&#39; - &#39;Asia/Jerusalem&#39; - &#39;Europe/Riga&#39; - &#39;Europe/Bucharest&#39; - &#39;Europe/Istanbul&#39; - &#39;Asia/Riyadh&#39; - &#39;Europe/Moscow&#39; - &#39;Asia/Dubai&#39; - &#39;Asia/Baku&#39; - &#39;Asia/Tbilisi&#39; - &#39;Asia/Calcutta&#39; - &#39;Asia/Katmandu&#39; - &#39;Asia/Dacca&#39; - &#39;Asia/Rangoon&#39; - &#39;Asia/Jakarta&#39; - &#39;Asia/Saigon&#39; - &#39;Asia/Bangkok&#39; - &#39;Australia/Perth&#39; - &#39;Asia/Hong_Kong&#39; - &#39;Asia/Macao&#39; - &#39;Asia/Kuala_Lumpur&#39; - &#39;Asia/Manila&#39; - &#39;Asia/Singapore&#39; - &#39;Asia/Taipei&#39; - &#39;Asia/Shanghai&#39; - &#39;Asia/Seoul&#39; - &#39;Asia/Tokyo&#39; - &#39;Asia/Yakutsk&#39; - &#39;Australia/Adelaide&#39; - &#39;Australia/Brisbane&#39; - &#39;Australia/Broken_Hill&#39; - &#39;Australia/Darwin&#39; - &#39;Australia/Eucla&#39; - &#39;Australia/Hobart&#39; - &#39;Australia/Lindeman&#39; - &#39;Australia/Sydney&#39; - &#39;Australia/Lord_Howe&#39; - &#39;Australia/Melbourne&#39; - &#39;Asia/Magadan&#39; - &#39;Pacific/Norfolk&#39; - &#39;Pacific/Auckland&#39; 
   * @return timeZone
  **/
  @ApiModelProperty(example = "America/Chicago", value = "Merchant perferred time zone Possible Values: - 'Pacific/Pago_Pago' - 'Pacific/Honolulu' - 'America/Anchorage' - 'America/Vancouver' - 'America/Los_Angeles' - 'America/Phoenix' - 'America/Edmonton' - 'America/Denver' - 'America/Winnipeg' - 'America/Mexico_City' - 'America/Chicago' - 'America/Bogota' - 'America/Indianapolis' - 'America/New_York' - 'America/La_Paz' - 'America/Halifax' - 'America/St_Johns' - 'America/Buenos_Aires' - 'America/Godthab' - 'America/Sao_Paulo' - 'America/Noronha' - 'Atlantic/Cape_Verde' - 'GMT' - 'Europe/Dublin' - 'Europe/Lisbon' - 'Europe/London' - 'Africa/Tunis' - 'Europe/Vienna' - 'Europe/Brussels' - 'Europe/Zurich' - 'Europe/Prague' - 'Europe/Berlin' - 'Europe/Copenhagen' - 'Europe/Madrid' - 'Europe/Budapest' - 'Europe/Rome' - 'Africa/Tripoli' - 'Europe/Monaco' - 'Europe/Malta' - 'Europe/Amsterdam' - 'Europe/Oslo' - 'Europe/Warsaw' - 'Europe/Stockholm' - 'Europe/Belgrade' - 'Europe/Paris' - 'Africa/Johannesburg' - 'Europe/Minsk' - 'Africa/Cairo' - 'Europe/Helsinki' - 'Europe/Athens' - 'Asia/Jerusalem' - 'Europe/Riga' - 'Europe/Bucharest' - 'Europe/Istanbul' - 'Asia/Riyadh' - 'Europe/Moscow' - 'Asia/Dubai' - 'Asia/Baku' - 'Asia/Tbilisi' - 'Asia/Calcutta' - 'Asia/Katmandu' - 'Asia/Dacca' - 'Asia/Rangoon' - 'Asia/Jakarta' - 'Asia/Saigon' - 'Asia/Bangkok' - 'Australia/Perth' - 'Asia/Hong_Kong' - 'Asia/Macao' - 'Asia/Kuala_Lumpur' - 'Asia/Manila' - 'Asia/Singapore' - 'Asia/Taipei' - 'Asia/Shanghai' - 'Asia/Seoul' - 'Asia/Tokyo' - 'Asia/Yakutsk' - 'Australia/Adelaide' - 'Australia/Brisbane' - 'Australia/Broken_Hill' - 'Australia/Darwin' - 'Australia/Eucla' - 'Australia/Hobart' - 'Australia/Lindeman' - 'Australia/Sydney' - 'Australia/Lord_Howe' - 'Australia/Melbourne' - 'Asia/Magadan' - 'Pacific/Norfolk' - 'Pacific/Auckland' ")
  public TimeZoneEnum getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(TimeZoneEnum timeZone) {
    this.timeZone = timeZone;
  }

  public Boardingv1registrationsOrganizationInformationBusinessInformation websiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
    return this;
  }

   /**
   * Get websiteUrl
   * @return websiteUrl
  **/
  @ApiModelProperty(example = "www.test.com", value = "")
  public String getWebsiteUrl() {
    return websiteUrl;
  }

  public void setWebsiteUrl(String websiteUrl) {
    this.websiteUrl = websiteUrl;
  }

  public Boardingv1registrationsOrganizationInformationBusinessInformation type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Business type Possible Values:   - &#39;PARTNERSHIP&#39;   - &#39;SOLE_PROPRIETORSHIP&#39;   - &#39;CORPORATION&#39;   - &#39;LLC&#39;   - &#39;NON_PROFIT&#39;   - &#39;TRUST&#39; 
   * @return type
  **/
  @ApiModelProperty(value = "Business type Possible Values:   - 'PARTNERSHIP'   - 'SOLE_PROPRIETORSHIP'   - 'CORPORATION'   - 'LLC'   - 'NON_PROFIT'   - 'TRUST' ")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public Boardingv1registrationsOrganizationInformationBusinessInformation taxId(String taxId) {
    this.taxId = taxId;
    return this;
  }

   /**
   * Get taxId
   * @return taxId
  **/
  @ApiModelProperty(example = "254324", value = "")
  public String getTaxId() {
    return taxId;
  }

  public void setTaxId(String taxId) {
    this.taxId = taxId;
  }

  public Boardingv1registrationsOrganizationInformationBusinessInformation phoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

   /**
   * Get phoneNumber
   * @return phoneNumber
  **/
  @ApiModelProperty(example = "4564561234", value = "")
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }

  public Boardingv1registrationsOrganizationInformationBusinessInformation businessContact(Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact businessContact) {
    this.businessContact = businessContact;
    return this;
  }

   /**
   * Get businessContact
   * @return businessContact
  **/
  @ApiModelProperty(value = "")
  public Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact getBusinessContact() {
    return businessContact;
  }

  public void setBusinessContact(Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact businessContact) {
    this.businessContact = businessContact;
  }

  public Boardingv1registrationsOrganizationInformationBusinessInformation technicalContact(Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact technicalContact) {
    this.technicalContact = technicalContact;
    return this;
  }

   /**
   * Get technicalContact
   * @return technicalContact
  **/
  @ApiModelProperty(value = "")
  public Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact getTechnicalContact() {
    return technicalContact;
  }

  public void setTechnicalContact(Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact technicalContact) {
    this.technicalContact = technicalContact;
  }

  public Boardingv1registrationsOrganizationInformationBusinessInformation emergencyContact(Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact emergencyContact) {
    this.emergencyContact = emergencyContact;
    return this;
  }

   /**
   * Get emergencyContact
   * @return emergencyContact
  **/
  @ApiModelProperty(value = "")
  public Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact getEmergencyContact() {
    return emergencyContact;
  }

  public void setEmergencyContact(Boardingv1registrationsOrganizationInformationBusinessInformationBusinessContact emergencyContact) {
    this.emergencyContact = emergencyContact;
  }

  public Boardingv1registrationsOrganizationInformationBusinessInformation merchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

   /**
   * Industry standard Merchant Category Code (MCC)
   * @return merchantCategoryCode
  **/
  @ApiModelProperty(example = "5300", value = "Industry standard Merchant Category Code (MCC)")
  public String getMerchantCategoryCode() {
    return merchantCategoryCode;
  }

  public void setMerchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Boardingv1registrationsOrganizationInformationBusinessInformation boardingv1registrationsOrganizationInformationBusinessInformation = (Boardingv1registrationsOrganizationInformationBusinessInformation) o;
    return Objects.equals(this.name, boardingv1registrationsOrganizationInformationBusinessInformation.name) &&
        Objects.equals(this.doingBusinessAs, boardingv1registrationsOrganizationInformationBusinessInformation.doingBusinessAs) &&
        Objects.equals(this.description, boardingv1registrationsOrganizationInformationBusinessInformation.description) &&
        Objects.equals(this.startDate, boardingv1registrationsOrganizationInformationBusinessInformation.startDate) &&
        Objects.equals(this.address, boardingv1registrationsOrganizationInformationBusinessInformation.address) &&
        Objects.equals(this.timeZone, boardingv1registrationsOrganizationInformationBusinessInformation.timeZone) &&
        Objects.equals(this.websiteUrl, boardingv1registrationsOrganizationInformationBusinessInformation.websiteUrl) &&
        Objects.equals(this.type, boardingv1registrationsOrganizationInformationBusinessInformation.type) &&
        Objects.equals(this.taxId, boardingv1registrationsOrganizationInformationBusinessInformation.taxId) &&
        Objects.equals(this.phoneNumber, boardingv1registrationsOrganizationInformationBusinessInformation.phoneNumber) &&
        Objects.equals(this.businessContact, boardingv1registrationsOrganizationInformationBusinessInformation.businessContact) &&
        Objects.equals(this.technicalContact, boardingv1registrationsOrganizationInformationBusinessInformation.technicalContact) &&
        Objects.equals(this.emergencyContact, boardingv1registrationsOrganizationInformationBusinessInformation.emergencyContact) &&
        Objects.equals(this.merchantCategoryCode, boardingv1registrationsOrganizationInformationBusinessInformation.merchantCategoryCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, doingBusinessAs, description, startDate, address, timeZone, websiteUrl, type, taxId, phoneNumber, businessContact, technicalContact, emergencyContact, merchantCategoryCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Boardingv1registrationsOrganizationInformationBusinessInformation {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    doingBusinessAs: ").append(toIndentedString(doingBusinessAs)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    websiteUrl: ").append(toIndentedString(websiteUrl)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    businessContact: ").append(toIndentedString(businessContact)).append("\n");
    sb.append("    technicalContact: ").append(toIndentedString(technicalContact)).append("\n");
    sb.append("    emergencyContact: ").append(toIndentedString(emergencyContact)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

