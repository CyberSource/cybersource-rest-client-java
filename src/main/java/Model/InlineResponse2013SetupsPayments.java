/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import Model.InlineResponse2013SetupsPaymentsAlternativePaymentMethods;
import Model.InlineResponse2013SetupsPaymentsCardProcessing;
import Model.InlineResponse2013SetupsPaymentsDigitalPayments;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InlineResponse2013SetupsPayments
 */

public class InlineResponse2013SetupsPayments {
  @SerializedName("cardProcessing")
  private InlineResponse2013SetupsPaymentsCardProcessing cardProcessing = null;

  @SerializedName("alternativePaymentMethods")
  private InlineResponse2013SetupsPaymentsAlternativePaymentMethods alternativePaymentMethods = null;

  @SerializedName("cardPresentConnect")
  private InlineResponse2013SetupsPaymentsCardProcessing cardPresentConnect = null;

  @SerializedName("eCheck")
  private InlineResponse2013SetupsPaymentsCardProcessing eCheck = null;

  @SerializedName("payerAuthentication")
  private InlineResponse2013SetupsPaymentsCardProcessing payerAuthentication = null;

  @SerializedName("digitalPayments")
  private InlineResponse2013SetupsPaymentsDigitalPayments digitalPayments = null;

  @SerializedName("secureAcceptance")
  private InlineResponse2013SetupsPaymentsCardProcessing secureAcceptance = null;

  @SerializedName("virtualTerminal")
  private InlineResponse2013SetupsPaymentsCardProcessing virtualTerminal = null;

  @SerializedName("currencyConversion")
  private InlineResponse2013SetupsPaymentsCardProcessing currencyConversion = null;

  @SerializedName("tax")
  private InlineResponse2013SetupsPaymentsDigitalPayments tax = null;

  @SerializedName("customerInvoicing")
  private InlineResponse2013SetupsPaymentsDigitalPayments customerInvoicing = null;

  @SerializedName("recurringBilling")
  private InlineResponse2013SetupsPaymentsCardProcessing recurringBilling = null;

  @SerializedName("cybsReadyTerminal")
  private InlineResponse2013SetupsPaymentsCardProcessing cybsReadyTerminal = null;

  @SerializedName("paymentOrchestration")
  private InlineResponse2013SetupsPaymentsDigitalPayments paymentOrchestration = null;

  @SerializedName("payouts")
  private InlineResponse2013SetupsPaymentsCardProcessing payouts = null;

  @SerializedName("payByLink")
  private InlineResponse2013SetupsPaymentsDigitalPayments payByLink = null;

  @SerializedName("unifiedCheckout")
  private InlineResponse2013SetupsPaymentsDigitalPayments unifiedCheckout = null;

  @SerializedName("receivablesManager")
  private InlineResponse2013SetupsPaymentsDigitalPayments receivablesManager = null;

  @SerializedName("serviceFee")
  private InlineResponse2013SetupsPaymentsCardProcessing serviceFee = null;

  public InlineResponse2013SetupsPayments cardProcessing(InlineResponse2013SetupsPaymentsCardProcessing cardProcessing) {
    this.cardProcessing = cardProcessing;
    return this;
  }

   /**
   * Get cardProcessing
   * @return cardProcessing
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsCardProcessing getCardProcessing() {
    return cardProcessing;
  }

  public void setCardProcessing(InlineResponse2013SetupsPaymentsCardProcessing cardProcessing) {
    this.cardProcessing = cardProcessing;
  }

  public InlineResponse2013SetupsPayments alternativePaymentMethods(InlineResponse2013SetupsPaymentsAlternativePaymentMethods alternativePaymentMethods) {
    this.alternativePaymentMethods = alternativePaymentMethods;
    return this;
  }

   /**
   * Get alternativePaymentMethods
   * @return alternativePaymentMethods
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsAlternativePaymentMethods getAlternativePaymentMethods() {
    return alternativePaymentMethods;
  }

  public void setAlternativePaymentMethods(InlineResponse2013SetupsPaymentsAlternativePaymentMethods alternativePaymentMethods) {
    this.alternativePaymentMethods = alternativePaymentMethods;
  }

  public InlineResponse2013SetupsPayments cardPresentConnect(InlineResponse2013SetupsPaymentsCardProcessing cardPresentConnect) {
    this.cardPresentConnect = cardPresentConnect;
    return this;
  }

   /**
   * Get cardPresentConnect
   * @return cardPresentConnect
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsCardProcessing getCardPresentConnect() {
    return cardPresentConnect;
  }

  public void setCardPresentConnect(InlineResponse2013SetupsPaymentsCardProcessing cardPresentConnect) {
    this.cardPresentConnect = cardPresentConnect;
  }

  public InlineResponse2013SetupsPayments eCheck(InlineResponse2013SetupsPaymentsCardProcessing eCheck) {
    this.eCheck = eCheck;
    return this;
  }

   /**
   * Get eCheck
   * @return eCheck
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsCardProcessing getECheck() {
    return eCheck;
  }

  public void setECheck(InlineResponse2013SetupsPaymentsCardProcessing eCheck) {
    this.eCheck = eCheck;
  }

  public InlineResponse2013SetupsPayments payerAuthentication(InlineResponse2013SetupsPaymentsCardProcessing payerAuthentication) {
    this.payerAuthentication = payerAuthentication;
    return this;
  }

   /**
   * Get payerAuthentication
   * @return payerAuthentication
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsCardProcessing getPayerAuthentication() {
    return payerAuthentication;
  }

  public void setPayerAuthentication(InlineResponse2013SetupsPaymentsCardProcessing payerAuthentication) {
    this.payerAuthentication = payerAuthentication;
  }

  public InlineResponse2013SetupsPayments digitalPayments(InlineResponse2013SetupsPaymentsDigitalPayments digitalPayments) {
    this.digitalPayments = digitalPayments;
    return this;
  }

   /**
   * Get digitalPayments
   * @return digitalPayments
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsDigitalPayments getDigitalPayments() {
    return digitalPayments;
  }

  public void setDigitalPayments(InlineResponse2013SetupsPaymentsDigitalPayments digitalPayments) {
    this.digitalPayments = digitalPayments;
  }

  public InlineResponse2013SetupsPayments secureAcceptance(InlineResponse2013SetupsPaymentsCardProcessing secureAcceptance) {
    this.secureAcceptance = secureAcceptance;
    return this;
  }

   /**
   * Get secureAcceptance
   * @return secureAcceptance
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsCardProcessing getSecureAcceptance() {
    return secureAcceptance;
  }

  public void setSecureAcceptance(InlineResponse2013SetupsPaymentsCardProcessing secureAcceptance) {
    this.secureAcceptance = secureAcceptance;
  }

  public InlineResponse2013SetupsPayments virtualTerminal(InlineResponse2013SetupsPaymentsCardProcessing virtualTerminal) {
    this.virtualTerminal = virtualTerminal;
    return this;
  }

   /**
   * Get virtualTerminal
   * @return virtualTerminal
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsCardProcessing getVirtualTerminal() {
    return virtualTerminal;
  }

  public void setVirtualTerminal(InlineResponse2013SetupsPaymentsCardProcessing virtualTerminal) {
    this.virtualTerminal = virtualTerminal;
  }

  public InlineResponse2013SetupsPayments currencyConversion(InlineResponse2013SetupsPaymentsCardProcessing currencyConversion) {
    this.currencyConversion = currencyConversion;
    return this;
  }

   /**
   * Get currencyConversion
   * @return currencyConversion
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsCardProcessing getCurrencyConversion() {
    return currencyConversion;
  }

  public void setCurrencyConversion(InlineResponse2013SetupsPaymentsCardProcessing currencyConversion) {
    this.currencyConversion = currencyConversion;
  }

  public InlineResponse2013SetupsPayments tax(InlineResponse2013SetupsPaymentsDigitalPayments tax) {
    this.tax = tax;
    return this;
  }

   /**
   * Get tax
   * @return tax
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsDigitalPayments getTax() {
    return tax;
  }

  public void setTax(InlineResponse2013SetupsPaymentsDigitalPayments tax) {
    this.tax = tax;
  }

  public InlineResponse2013SetupsPayments customerInvoicing(InlineResponse2013SetupsPaymentsDigitalPayments customerInvoicing) {
    this.customerInvoicing = customerInvoicing;
    return this;
  }

   /**
   * Get customerInvoicing
   * @return customerInvoicing
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsDigitalPayments getCustomerInvoicing() {
    return customerInvoicing;
  }

  public void setCustomerInvoicing(InlineResponse2013SetupsPaymentsDigitalPayments customerInvoicing) {
    this.customerInvoicing = customerInvoicing;
  }

  public InlineResponse2013SetupsPayments recurringBilling(InlineResponse2013SetupsPaymentsCardProcessing recurringBilling) {
    this.recurringBilling = recurringBilling;
    return this;
  }

   /**
   * Get recurringBilling
   * @return recurringBilling
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsCardProcessing getRecurringBilling() {
    return recurringBilling;
  }

  public void setRecurringBilling(InlineResponse2013SetupsPaymentsCardProcessing recurringBilling) {
    this.recurringBilling = recurringBilling;
  }

  public InlineResponse2013SetupsPayments cybsReadyTerminal(InlineResponse2013SetupsPaymentsCardProcessing cybsReadyTerminal) {
    this.cybsReadyTerminal = cybsReadyTerminal;
    return this;
  }

   /**
   * Get cybsReadyTerminal
   * @return cybsReadyTerminal
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsCardProcessing getCybsReadyTerminal() {
    return cybsReadyTerminal;
  }

  public void setCybsReadyTerminal(InlineResponse2013SetupsPaymentsCardProcessing cybsReadyTerminal) {
    this.cybsReadyTerminal = cybsReadyTerminal;
  }

  public InlineResponse2013SetupsPayments paymentOrchestration(InlineResponse2013SetupsPaymentsDigitalPayments paymentOrchestration) {
    this.paymentOrchestration = paymentOrchestration;
    return this;
  }

   /**
   * Get paymentOrchestration
   * @return paymentOrchestration
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsDigitalPayments getPaymentOrchestration() {
    return paymentOrchestration;
  }

  public void setPaymentOrchestration(InlineResponse2013SetupsPaymentsDigitalPayments paymentOrchestration) {
    this.paymentOrchestration = paymentOrchestration;
  }

  public InlineResponse2013SetupsPayments payouts(InlineResponse2013SetupsPaymentsCardProcessing payouts) {
    this.payouts = payouts;
    return this;
  }

   /**
   * Get payouts
   * @return payouts
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsCardProcessing getPayouts() {
    return payouts;
  }

  public void setPayouts(InlineResponse2013SetupsPaymentsCardProcessing payouts) {
    this.payouts = payouts;
  }

  public InlineResponse2013SetupsPayments payByLink(InlineResponse2013SetupsPaymentsDigitalPayments payByLink) {
    this.payByLink = payByLink;
    return this;
  }

   /**
   * Get payByLink
   * @return payByLink
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsDigitalPayments getPayByLink() {
    return payByLink;
  }

  public void setPayByLink(InlineResponse2013SetupsPaymentsDigitalPayments payByLink) {
    this.payByLink = payByLink;
  }

  public InlineResponse2013SetupsPayments unifiedCheckout(InlineResponse2013SetupsPaymentsDigitalPayments unifiedCheckout) {
    this.unifiedCheckout = unifiedCheckout;
    return this;
  }

   /**
   * Get unifiedCheckout
   * @return unifiedCheckout
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsDigitalPayments getUnifiedCheckout() {
    return unifiedCheckout;
  }

  public void setUnifiedCheckout(InlineResponse2013SetupsPaymentsDigitalPayments unifiedCheckout) {
    this.unifiedCheckout = unifiedCheckout;
  }

  public InlineResponse2013SetupsPayments receivablesManager(InlineResponse2013SetupsPaymentsDigitalPayments receivablesManager) {
    this.receivablesManager = receivablesManager;
    return this;
  }

   /**
   * Get receivablesManager
   * @return receivablesManager
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsDigitalPayments getReceivablesManager() {
    return receivablesManager;
  }

  public void setReceivablesManager(InlineResponse2013SetupsPaymentsDigitalPayments receivablesManager) {
    this.receivablesManager = receivablesManager;
  }

  public InlineResponse2013SetupsPayments serviceFee(InlineResponse2013SetupsPaymentsCardProcessing serviceFee) {
    this.serviceFee = serviceFee;
    return this;
  }

   /**
   * Get serviceFee
   * @return serviceFee
  **/
  @ApiModelProperty(value = "")
  public InlineResponse2013SetupsPaymentsCardProcessing getServiceFee() {
    return serviceFee;
  }

  public void setServiceFee(InlineResponse2013SetupsPaymentsCardProcessing serviceFee) {
    this.serviceFee = serviceFee;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2013SetupsPayments inlineResponse2013SetupsPayments = (InlineResponse2013SetupsPayments) o;
    return Objects.equals(this.cardProcessing, inlineResponse2013SetupsPayments.cardProcessing) &&
        Objects.equals(this.alternativePaymentMethods, inlineResponse2013SetupsPayments.alternativePaymentMethods) &&
        Objects.equals(this.cardPresentConnect, inlineResponse2013SetupsPayments.cardPresentConnect) &&
        Objects.equals(this.eCheck, inlineResponse2013SetupsPayments.eCheck) &&
        Objects.equals(this.payerAuthentication, inlineResponse2013SetupsPayments.payerAuthentication) &&
        Objects.equals(this.digitalPayments, inlineResponse2013SetupsPayments.digitalPayments) &&
        Objects.equals(this.secureAcceptance, inlineResponse2013SetupsPayments.secureAcceptance) &&
        Objects.equals(this.virtualTerminal, inlineResponse2013SetupsPayments.virtualTerminal) &&
        Objects.equals(this.currencyConversion, inlineResponse2013SetupsPayments.currencyConversion) &&
        Objects.equals(this.tax, inlineResponse2013SetupsPayments.tax) &&
        Objects.equals(this.customerInvoicing, inlineResponse2013SetupsPayments.customerInvoicing) &&
        Objects.equals(this.recurringBilling, inlineResponse2013SetupsPayments.recurringBilling) &&
        Objects.equals(this.cybsReadyTerminal, inlineResponse2013SetupsPayments.cybsReadyTerminal) &&
        Objects.equals(this.paymentOrchestration, inlineResponse2013SetupsPayments.paymentOrchestration) &&
        Objects.equals(this.payouts, inlineResponse2013SetupsPayments.payouts) &&
        Objects.equals(this.payByLink, inlineResponse2013SetupsPayments.payByLink) &&
        Objects.equals(this.unifiedCheckout, inlineResponse2013SetupsPayments.unifiedCheckout) &&
        Objects.equals(this.receivablesManager, inlineResponse2013SetupsPayments.receivablesManager) &&
        Objects.equals(this.serviceFee, inlineResponse2013SetupsPayments.serviceFee);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardProcessing, alternativePaymentMethods, cardPresentConnect, eCheck, payerAuthentication, digitalPayments, secureAcceptance, virtualTerminal, currencyConversion, tax, customerInvoicing, recurringBilling, cybsReadyTerminal, paymentOrchestration, payouts, payByLink, unifiedCheckout, receivablesManager, serviceFee);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2013SetupsPayments {\n");
    
    if (cardProcessing != null) sb.append("    cardProcessing: ").append(toIndentedString(cardProcessing)).append("\n");
    if (alternativePaymentMethods != null) sb.append("    alternativePaymentMethods: ").append(toIndentedString(alternativePaymentMethods)).append("\n");
    if (cardPresentConnect != null) sb.append("    cardPresentConnect: ").append(toIndentedString(cardPresentConnect)).append("\n");
    if (eCheck != null) sb.append("    eCheck: ").append(toIndentedString(eCheck)).append("\n");
    if (payerAuthentication != null) sb.append("    payerAuthentication: ").append(toIndentedString(payerAuthentication)).append("\n");
    if (digitalPayments != null) sb.append("    digitalPayments: ").append(toIndentedString(digitalPayments)).append("\n");
    if (secureAcceptance != null) sb.append("    secureAcceptance: ").append(toIndentedString(secureAcceptance)).append("\n");
    if (virtualTerminal != null) sb.append("    virtualTerminal: ").append(toIndentedString(virtualTerminal)).append("\n");
    if (currencyConversion != null) sb.append("    currencyConversion: ").append(toIndentedString(currencyConversion)).append("\n");
    if (tax != null) sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    if (customerInvoicing != null) sb.append("    customerInvoicing: ").append(toIndentedString(customerInvoicing)).append("\n");
    if (recurringBilling != null) sb.append("    recurringBilling: ").append(toIndentedString(recurringBilling)).append("\n");
    if (cybsReadyTerminal != null) sb.append("    cybsReadyTerminal: ").append(toIndentedString(cybsReadyTerminal)).append("\n");
    if (paymentOrchestration != null) sb.append("    paymentOrchestration: ").append(toIndentedString(paymentOrchestration)).append("\n");
    if (payouts != null) sb.append("    payouts: ").append(toIndentedString(payouts)).append("\n");
    if (payByLink != null) sb.append("    payByLink: ").append(toIndentedString(payByLink)).append("\n");
    if (unifiedCheckout != null) sb.append("    unifiedCheckout: ").append(toIndentedString(unifiedCheckout)).append("\n");
    if (receivablesManager != null) sb.append("    receivablesManager: ").append(toIndentedString(receivablesManager)).append("\n");
    if (serviceFee != null) sb.append("    serviceFee: ").append(toIndentedString(serviceFee)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

