/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * CardProcessingConfigCommonCurrencies1
 */

public class CardProcessingConfigCommonCurrencies1 {
  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("enabledCardPresent")
  private Boolean enabledCardPresent = null;

  @SerializedName("enabledCardNotPresent")
  private Boolean enabledCardNotPresent = null;

  @SerializedName("terminalIds")
  private List<String> terminalIds = null;

  public CardProcessingConfigCommonCurrencies1 enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @ApiModelProperty(value = "")
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public CardProcessingConfigCommonCurrencies1 enabledCardPresent(Boolean enabledCardPresent) {
    this.enabledCardPresent = enabledCardPresent;
    return this;
  }

   /**
   * Indicates whether the card-present transaction is activated for the selected currency. If both enabledCardPresent and enabledCardNotPresent are set to null, then enabledCardPresent will have the value of enabled. 
   * @return enabledCardPresent
  **/
  @ApiModelProperty(value = "Indicates whether the card-present transaction is activated for the selected currency. If both enabledCardPresent and enabledCardNotPresent are set to null, then enabledCardPresent will have the value of enabled. ")
  public Boolean getEnabledCardPresent() {
    return enabledCardPresent;
  }

  public void setEnabledCardPresent(Boolean enabledCardPresent) {
    this.enabledCardPresent = enabledCardPresent;
  }

  public CardProcessingConfigCommonCurrencies1 enabledCardNotPresent(Boolean enabledCardNotPresent) {
    this.enabledCardNotPresent = enabledCardNotPresent;
    return this;
  }

   /**
   * Indicates whether the card-present transaction is activated for the selected currency. If both enabledCardPresent and enabledCardNotPresent are set to null, then enabledCardNotPresent will have the value of enabled. 
   * @return enabledCardNotPresent
  **/
  @ApiModelProperty(value = "Indicates whether the card-present transaction is activated for the selected currency. If both enabledCardPresent and enabledCardNotPresent are set to null, then enabledCardNotPresent will have the value of enabled. ")
  public Boolean getEnabledCardNotPresent() {
    return enabledCardNotPresent;
  }

  public void setEnabledCardNotPresent(Boolean enabledCardNotPresent) {
    this.enabledCardNotPresent = enabledCardNotPresent;
  }

  public CardProcessingConfigCommonCurrencies1 terminalIds(List<String> terminalIds) {
    this.terminalIds = terminalIds;
    return this;
  }

  public CardProcessingConfigCommonCurrencies1 addTerminalIdsItem(String terminalIdsItem) {
    if (this.terminalIds == null) {
      this.terminalIds = new ArrayList<String>();
    }
    this.terminalIds.add(terminalIdsItem);
    return this;
  }

   /**
   * Applicable for Prisma (prisma) processor.
   * @return terminalIds
  **/
  @ApiModelProperty(value = "Applicable for Prisma (prisma) processor.")
  public List<String> getTerminalIds() {
    return terminalIds;
  }

  public void setTerminalIds(List<String> terminalIds) {
    this.terminalIds = terminalIds;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardProcessingConfigCommonCurrencies1 cardProcessingConfigCommonCurrencies1 = (CardProcessingConfigCommonCurrencies1) o;
    return Objects.equals(this.enabled, cardProcessingConfigCommonCurrencies1.enabled) &&
        Objects.equals(this.enabledCardPresent, cardProcessingConfigCommonCurrencies1.enabledCardPresent) &&
        Objects.equals(this.enabledCardNotPresent, cardProcessingConfigCommonCurrencies1.enabledCardNotPresent) &&
        Objects.equals(this.terminalIds, cardProcessingConfigCommonCurrencies1.terminalIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, enabledCardPresent, enabledCardNotPresent, terminalIds);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardProcessingConfigCommonCurrencies1 {\n");
    
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    enabledCardPresent: ").append(toIndentedString(enabledCardPresent)).append("\n");
    sb.append("    enabledCardNotPresent: ").append(toIndentedString(enabledCardNotPresent)).append("\n");
    sb.append("    terminalIds: ").append(toIndentedString(terminalIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

