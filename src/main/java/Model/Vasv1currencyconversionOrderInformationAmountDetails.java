/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Vasv1currencyconversionOrderInformationAmountDetails
 */

public class Vasv1currencyconversionOrderInformationAmountDetails {
  @SerializedName("originalAmount")
  private String originalAmount = null;

  @SerializedName("originalCurrency")
  private String originalCurrency = null;

  public Vasv1currencyconversionOrderInformationAmountDetails originalAmount(String originalAmount) {
    this.originalAmount = originalAmount;
    return this;
  }

   /**
   * The amount of the sale in the merchant&#39;s currency. Mandatory when type&#x3D;DCC, optional otherwise. This value cannot be negative. You can include a decimal point (.), but no other special characters.
   * @return originalAmount
  **/
  @ApiModelProperty(value = "The amount of the sale in the merchant's currency. Mandatory when type=DCC, optional otherwise. This value cannot be negative. You can include a decimal point (.), but no other special characters.")
  public String getOriginalAmount() {
    return originalAmount;
  }

  public void setOriginalAmount(String originalAmount) {
    this.originalAmount = originalAmount;
  }

  public Vasv1currencyconversionOrderInformationAmountDetails originalCurrency(String originalCurrency) {
    this.originalCurrency = originalCurrency;
    return this;
  }

   /**
   * Original currency of the transaction in the merchant&#39;s currency. Mandatory when type&#x3D;DCC, optional otherwise. Use three-character alphabetic [ISO 4271 Currency Codes.](https://developer.cybersource.com/docs/cybs/en-us/currency-codes/reference/all/na/currency-codes/currency-codes.html) 
   * @return originalCurrency
  **/
  @ApiModelProperty(value = "Original currency of the transaction in the merchant's currency. Mandatory when type=DCC, optional otherwise. Use three-character alphabetic [ISO 4271 Currency Codes.](https://developer.cybersource.com/docs/cybs/en-us/currency-codes/reference/all/na/currency-codes/currency-codes.html) ")
  public String getOriginalCurrency() {
    return originalCurrency;
  }

  public void setOriginalCurrency(String originalCurrency) {
    this.originalCurrency = originalCurrency;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vasv1currencyconversionOrderInformationAmountDetails vasv1currencyconversionOrderInformationAmountDetails = (Vasv1currencyconversionOrderInformationAmountDetails) o;
    return Objects.equals(this.originalAmount, vasv1currencyconversionOrderInformationAmountDetails.originalAmount) &&
        Objects.equals(this.originalCurrency, vasv1currencyconversionOrderInformationAmountDetails.originalCurrency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(originalAmount, originalCurrency);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vasv1currencyconversionOrderInformationAmountDetails {\n");
    
    if (originalAmount != null) sb.append("    originalAmount: ").append(toIndentedString(originalAmount)).append("\n");
    if (originalCurrency != null) sb.append("    originalCurrency: ").append(toIndentedString(originalCurrency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

