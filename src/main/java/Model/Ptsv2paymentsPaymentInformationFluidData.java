/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Ptsv2paymentsPaymentInformationFluidData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-05-07T15:32:29.568+05:30")
public class Ptsv2paymentsPaymentInformationFluidData {
  @SerializedName("key")
  private String key = null;

  @SerializedName("descriptor")
  private String descriptor = null;

  @SerializedName("value")
  private String value = null;

  @SerializedName("encoding")
  private String encoding = null;

  public Ptsv2paymentsPaymentInformationFluidData key(String key) {
    this.key = key;
    return this;
  }

   /**
   * The name of the merchant-defined data field. The range of this field starts at 1 and terminiates at 100.
   * @return key
  **/
  @ApiModelProperty(value = "The name of the merchant-defined data field. The range of this field starts at 1 and terminiates at 100.")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public Ptsv2paymentsPaymentInformationFluidData descriptor(String descriptor) {
    this.descriptor = descriptor;
    return this;
  }

   /**
   * The specific string for identifying the payment solution that is sending the encrypted payment data to CyberSource. Valid values: - &#x60;Apple Pay&#x60; - &#x60;Samsung Pay&#x60; **NOTE**: For other payment solutions, the value may be specific to the customer&#39;s mobile device. For example, the descriptor for a Bluefin payment encryption would be a device-generated descriptor. Merchant needs to pass in this value. 
   * @return descriptor
  **/
  @ApiModelProperty(value = "The specific string for identifying the payment solution that is sending the encrypted payment data to CyberSource. Valid values: - `Apple Pay` - `Samsung Pay` **NOTE**: For other payment solutions, the value may be specific to the customer's mobile device. For example, the descriptor for a Bluefin payment encryption would be a device-generated descriptor. Merchant needs to pass in this value. ")
  public String getDescriptor() {
    return descriptor;
  }

  public void setDescriptor(String descriptor) {
    this.descriptor = descriptor;
  }

  public Ptsv2paymentsPaymentInformationFluidData value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Represents the encrypted payment data BLOB. The entry for this field is dependent on the payment solution a merchant uses.  Valid values: - Apple Pay: &#x60;RklEPUNPTU1PTi5BUFBMRS5JTkFQUC5QQVlNRU5U&#x60; - Samsung Pay: &#x60;RklEPUNPTU1PTi5TQU1TVU5HLklOQVBQLlBBWU1FTlQ&#x3D;&#x60; **NOTE**: For other payment solutions, the value of the descriptor may be specific to the customer&#39;s mobile device. For example, the descriptor for a Bluefin payment encryption would be a device-generated descriptor. Merchant needs to pass in this value. 
   * @return value
  **/
  @ApiModelProperty(value = "Represents the encrypted payment data BLOB. The entry for this field is dependent on the payment solution a merchant uses.  Valid values: - Apple Pay: `RklEPUNPTU1PTi5BUFBMRS5JTkFQUC5QQVlNRU5U` - Samsung Pay: `RklEPUNPTU1PTi5TQU1TVU5HLklOQVBQLlBBWU1FTlQ=` **NOTE**: For other payment solutions, the value of the descriptor may be specific to the customer's mobile device. For example, the descriptor for a Bluefin payment encryption would be a device-generated descriptor. Merchant needs to pass in this value. ")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public Ptsv2paymentsPaymentInformationFluidData encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

   /**
   * Encoding method used to encrypt the payment data.  Valid value: Base64 
   * @return encoding
  **/
  @ApiModelProperty(value = "Encoding method used to encrypt the payment data.  Valid value: Base64 ")
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ptsv2paymentsPaymentInformationFluidData ptsv2paymentsPaymentInformationFluidData = (Ptsv2paymentsPaymentInformationFluidData) o;
    return Objects.equals(this.key, ptsv2paymentsPaymentInformationFluidData.key) &&
        Objects.equals(this.descriptor, ptsv2paymentsPaymentInformationFluidData.descriptor) &&
        Objects.equals(this.value, ptsv2paymentsPaymentInformationFluidData.value) &&
        Objects.equals(this.encoding, ptsv2paymentsPaymentInformationFluidData.encoding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, descriptor, value, encoding);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ptsv2paymentsPaymentInformationFluidData {\n");
    
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

