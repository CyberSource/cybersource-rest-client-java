/*
 * CyberSource Flex API
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * V2paymentsPaymentInformationFluidData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-09-22T07:56:07.186+05:30")
public class V2paymentsPaymentInformationFluidData {
  @SerializedName("key")
  private String key = null;

  @SerializedName("descriptor")
  private String descriptor = null;

  @SerializedName("value")
  private String value = null;

  @SerializedName("encoding")
  private String encoding = null;

  public V2paymentsPaymentInformationFluidData key(String key) {
    this.key = key;
    return this;
  }

   /**
   * TBD
   * @return key
  **/
  @ApiModelProperty(value = "TBD")
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }

  public V2paymentsPaymentInformationFluidData descriptor(String descriptor) {
    this.descriptor = descriptor;
    return this;
  }

   /**
   * Format of the encrypted payment data.
   * @return descriptor
  **/
  @ApiModelProperty(value = "Format of the encrypted payment data.")
  public String getDescriptor() {
    return descriptor;
  }

  public void setDescriptor(String descriptor) {
    this.descriptor = descriptor;
  }

  public V2paymentsPaymentInformationFluidData value(String value) {
    this.value = value;
    return this;
  }

   /**
   * The encrypted payment data value. If using Apple Pay or Samsung Pay, the values are:   - Apple Pay: RklEPUNPTU1PTi5BUFBMRS5JTkFQUC5QQVlNRU5U   - Samsung Pay: RklEPUNPTU1PTi5TQU1TVU5HLklOQVBQLlBBWU1FTlQ&#x3D; 
   * @return value
  **/
  @ApiModelProperty(value = "The encrypted payment data value. If using Apple Pay or Samsung Pay, the values are:   - Apple Pay: RklEPUNPTU1PTi5BUFBMRS5JTkFQUC5QQVlNRU5U   - Samsung Pay: RklEPUNPTU1PTi5TQU1TVU5HLklOQVBQLlBBWU1FTlQ= ")
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

  public V2paymentsPaymentInformationFluidData encoding(String encoding) {
    this.encoding = encoding;
    return this;
  }

   /**
   * Encoding method used to encrypt the payment data.  Possible value: Base64 
   * @return encoding
  **/
  @ApiModelProperty(value = "Encoding method used to encrypt the payment data.  Possible value: Base64 ")
  public String getEncoding() {
    return encoding;
  }

  public void setEncoding(String encoding) {
    this.encoding = encoding;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2paymentsPaymentInformationFluidData v2paymentsPaymentInformationFluidData = (V2paymentsPaymentInformationFluidData) o;
    return Objects.equals(this.key, v2paymentsPaymentInformationFluidData.key) &&
        Objects.equals(this.descriptor, v2paymentsPaymentInformationFluidData.descriptor) &&
        Objects.equals(this.value, v2paymentsPaymentInformationFluidData.value) &&
        Objects.equals(this.encoding, v2paymentsPaymentInformationFluidData.encoding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(key, descriptor, value, encoding);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2paymentsPaymentInformationFluidData {\n");
    
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

