/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InlineResponse200Content
 */

public class InlineResponse200Content {
  @SerializedName("type")
  private String type = null;

  @SerializedName("data")
  private String data = null;

  @SerializedName("width")
  private Integer width = null;

  @SerializedName("height")
  private Integer height = null;

  public InlineResponse200Content type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The MIME type of the Asset. 
   * @return type
  **/
  @ApiModelProperty(example = "image/png", value = "The MIME type of the Asset. ")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public InlineResponse200Content data(String data) {
    this.data = data;
    return this;
  }

   /**
   * The base64-encoded data of the Asset. 
   * @return data
  **/
  @ApiModelProperty(example = "iVBORw0KGgoAAAANSUhEUgAA...", value = "The base64-encoded data of the Asset. ")
  public String getData() {
    return data;
  }

  public void setData(String data) {
    this.data = data;
  }

  public InlineResponse200Content width(Integer width) {
    this.width = width;
    return this;
  }

   /**
   * The width of the Asset in pixels. 
   * @return width
  **/
  @ApiModelProperty(example = "1536", value = "The width of the Asset in pixels. ")
  public Integer getWidth() {
    return width;
  }

  public void setWidth(Integer width) {
    this.width = width;
  }

  public InlineResponse200Content height(Integer height) {
    this.height = height;
    return this;
  }

   /**
   * The height of the Asset in pixels. 
   * @return height
  **/
  @ApiModelProperty(example = "969", value = "The height of the Asset in pixels. ")
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse200Content inlineResponse200Content = (InlineResponse200Content) o;
    return Objects.equals(this.type, inlineResponse200Content.type) &&
        Objects.equals(this.data, inlineResponse200Content.data) &&
        Objects.equals(this.width, inlineResponse200Content.width) &&
        Objects.equals(this.height, inlineResponse200Content.height);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, data, width, height);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse200Content {\n");
    
    if (type != null) sb.append("    type: ").append(toIndentedString(type)).append("\n");
    if (data != null) sb.append("    data: ").append(toIndentedString(data)).append("\n");
    if (width != null) sb.append("    width: ").append(toIndentedString(width)).append("\n");
    if (height != null) sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

