/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Details for marking the transaction as either positive or negative.
 */
@ApiModel(description = "Details for marking the transaction as either positive or negative.")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-12-16T17:43:55.224+05:30")
public class Riskv1decisionsRiskInformationMarkingDetails {
  @SerializedName("notes")
  private String notes = null;

  @SerializedName("reason")
  private String reason = null;

  @SerializedName("fieldsIncluded")
  private String fieldsIncluded = null;

  @SerializedName("reportCode")
  private String reportCode = null;

  public Riskv1decisionsRiskInformationMarkingDetails notes(String notes) {
    this.notes = notes;
    return this;
  }

   /**
   * Notes or details that explain the reasons for adding the transaction to either the positive or negative list.
   * @return notes
  **/
  @ApiModelProperty(value = "Notes or details that explain the reasons for adding the transaction to either the positive or negative list.")
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }

  public Riskv1decisionsRiskInformationMarkingDetails reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Reason for adding the transaction to the negative list. This field can contain one of the following values: - fraud_chargeback: You have received a fraud-related chargeback for the transaction. - non_fraud_chargeback: You have received a non-fraudulent chargeback for the transaction. - suspected: You believe that you will probably receive a chargeback for the transaction. - creditback: You issued a refund to the customer to avoid a chargeback for the transaction. 
   * @return reason
  **/
  @ApiModelProperty(value = "Reason for adding the transaction to the negative list. This field can contain one of the following values: - fraud_chargeback: You have received a fraud-related chargeback for the transaction. - non_fraud_chargeback: You have received a non-fraudulent chargeback for the transaction. - suspected: You believe that you will probably receive a chargeback for the transaction. - creditback: You issued a refund to the customer to avoid a chargeback for the transaction. ")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public Riskv1decisionsRiskInformationMarkingDetails fieldsIncluded(String fieldsIncluded) {
    this.fieldsIncluded = fieldsIncluded;
    return this;
  }

   /**
   * Adds specified transaction information to the negative list. This field can contain one or more of the following values. When you specify more than one value, separate them with commas (,). - account_key_hash - customer_account_id - customer_email - customer_ipaddress - customer_phone - device_fingerprint - ship_address If no value is specified, account_key_hash, customer_email, and ship_address are used by default. Note account_key_hash adds the field that contains the card number (customer_cc_number). 
   * @return fieldsIncluded
  **/
  @ApiModelProperty(value = "Adds specified transaction information to the negative list. This field can contain one or more of the following values. When you specify more than one value, separate them with commas (,). - account_key_hash - customer_account_id - customer_email - customer_ipaddress - customer_phone - device_fingerprint - ship_address If no value is specified, account_key_hash, customer_email, and ship_address are used by default. Note account_key_hash adds the field that contains the card number (customer_cc_number). ")
  public String getFieldsIncluded() {
    return fieldsIncluded;
  }

  public void setFieldsIncluded(String fieldsIncluded) {
    this.fieldsIncluded = fieldsIncluded;
  }

  public Riskv1decisionsRiskInformationMarkingDetails reportCode(String reportCode) {
    this.reportCode = reportCode;
    return this;
  }

   /**
   * Indicates whether to add, clear, or remove order data from the fraud history. This field can contain one of the following values: - ST: Marking reason for suspected fraud transaction; same action as Mark as Suspect link in the Business Center - CB: Marking reason for chargeback; same action as Mark as Suspect link - CM: Clear suspected fraud marking reason; same action as Clear Mark as Suspect link - VT: Remove from history 
   * @return reportCode
  **/
  @ApiModelProperty(value = "Indicates whether to add, clear, or remove order data from the fraud history. This field can contain one of the following values: - ST: Marking reason for suspected fraud transaction; same action as Mark as Suspect link in the Business Center - CB: Marking reason for chargeback; same action as Mark as Suspect link - CM: Clear suspected fraud marking reason; same action as Clear Mark as Suspect link - VT: Remove from history ")
  public String getReportCode() {
    return reportCode;
  }

  public void setReportCode(String reportCode) {
    this.reportCode = reportCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Riskv1decisionsRiskInformationMarkingDetails riskv1decisionsRiskInformationMarkingDetails = (Riskv1decisionsRiskInformationMarkingDetails) o;
    return Objects.equals(this.notes, riskv1decisionsRiskInformationMarkingDetails.notes) &&
        Objects.equals(this.reason, riskv1decisionsRiskInformationMarkingDetails.reason) &&
        Objects.equals(this.fieldsIncluded, riskv1decisionsRiskInformationMarkingDetails.fieldsIncluded) &&
        Objects.equals(this.reportCode, riskv1decisionsRiskInformationMarkingDetails.reportCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notes, reason, fieldsIncluded, reportCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Riskv1decisionsRiskInformationMarkingDetails {\n");
    
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    fieldsIncluded: ").append(toIndentedString(fieldsIncluded)).append("\n");
    sb.append("    reportCode: ").append(toIndentedString(reportCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

