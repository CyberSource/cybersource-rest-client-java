/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Ptsv2paymentsInstallmentInformation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-05-09T16:47:53.059+05:30")
public class Ptsv2paymentsInstallmentInformation {
  @SerializedName("amount")
  private String amount = null;

  @SerializedName("frequency")
  private String frequency = null;

  @SerializedName("planType")
  private String planType = null;

  @SerializedName("sequence")
  private Integer sequence = null;

  @SerializedName("totalAmount")
  private String totalAmount = null;

  @SerializedName("totalCount")
  private Integer totalCount = null;

  @SerializedName("firstInstallmentDate")
  private String firstInstallmentDate = null;

  @SerializedName("invoiceData")
  private String invoiceData = null;

  @SerializedName("paymentType")
  private String paymentType = null;

  @SerializedName("eligibilityInquiry")
  private String eligibilityInquiry = null;

  public Ptsv2paymentsInstallmentInformation amount(String amount) {
    this.amount = amount;
    return this;
  }

   /**
   * Amount for the current installment payment.  This field is supported only for CyberSource through VisaNet. See \&quot;Installment Payments,\&quot; page 127. 
   * @return amount
  **/
  @ApiModelProperty(value = "Amount for the current installment payment.  This field is supported only for CyberSource through VisaNet. See \"Installment Payments,\" page 127. ")
  public String getAmount() {
    return amount;
  }

  public void setAmount(String amount) {
    this.amount = amount;
  }

  public Ptsv2paymentsInstallmentInformation frequency(String frequency) {
    this.frequency = frequency;
    return this;
  }

   /**
   * Installment Frequency of the installment payments.  This field is supported only for CyberSource through VisaNet. Possible values: - B: Biweekly - M: Monthly - W: Weekly  See \&quot;Installment Payments,\&quot; page 127. 
   * @return frequency
  **/
  @ApiModelProperty(value = "Installment Frequency of the installment payments.  This field is supported only for CyberSource through VisaNet. Possible values: - B: Biweekly - M: Monthly - W: Weekly  See \"Installment Payments,\" page 127. ")
  public String getFrequency() {
    return frequency;
  }

  public void setFrequency(String frequency) {
    this.frequency = frequency;
  }

  public Ptsv2paymentsInstallmentInformation planType(String planType) {
    this.planType = planType;
    return this;
  }

   /**
   * **American Express Direct, Cielo, and CyberSource Latin American Processing**\\ Flag that indicates the type of funding for the installment plan associated with the payment.  Possible values: - 1: Merchant-funded installment plan - 2: Issuer-funded installment plan If you do not include this field in the request, CyberSource uses the value in your CyberSource account.  To change the value in your CyberSource account, contact CyberSource Customer Service. See \&quot;Installment Payments,\&quot; page 136.  **CyberSource through VisaNet and American Express**\\ Defined code that indicates the type of installment plan for this transaction.  Contact American Express for: - Information about the kinds of installment plans that American Express provides - Values for this field  See \&quot;Installment Payments,\&quot; page 125.  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 5-6 - Field: Plan Type  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.  **CyberSource through VisaNet with Visa or Mastercard**\\ Flag indicating the type of funding for the installment plan associated with the payment. Possible values: - 1 or 01: Merchant-funded installment plan - 2 or 02: Issuer-funded installment plan - 43: Crediario installment plan—only with Visa in Brazil See \&quot;Installment Payments on CyberSource through VisaNet,\&quot; page 142.  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 5-6 - Field: Installment Type  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR5 - Position: 39-40 - Field: Installment Plan Type (Issuer or Merchant) 
   * @return planType
  **/
  @ApiModelProperty(value = "**American Express Direct, Cielo, and CyberSource Latin American Processing**\\ Flag that indicates the type of funding for the installment plan associated with the payment.  Possible values: - 1: Merchant-funded installment plan - 2: Issuer-funded installment plan If you do not include this field in the request, CyberSource uses the value in your CyberSource account.  To change the value in your CyberSource account, contact CyberSource Customer Service. See \"Installment Payments,\" page 136.  **CyberSource through VisaNet and American Express**\\ Defined code that indicates the type of installment plan for this transaction.  Contact American Express for: - Information about the kinds of installment plans that American Express provides - Values for this field  See \"Installment Payments,\" page 125.  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 5-6 - Field: Plan Type  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies.  **CyberSource through VisaNet with Visa or Mastercard**\\ Flag indicating the type of funding for the installment plan associated with the payment. Possible values: - 1 or 01: Merchant-funded installment plan - 2 or 02: Issuer-funded installment plan - 43: Crediario installment plan—only with Visa in Brazil See \"Installment Payments on CyberSource through VisaNet,\" page 142.  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 5-6 - Field: Installment Type  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR5 - Position: 39-40 - Field: Installment Plan Type (Issuer or Merchant) ")
  public String getPlanType() {
    return planType;
  }

  public void setPlanType(String planType) {
    this.planType = planType;
  }

  public Ptsv2paymentsInstallmentInformation sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

   /**
   * Installment number when making payments in installments. Used along with _totalCount_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ &#x3D; 2 and _totalCount_ &#x3D; 5.  See \&quot;Installment Payments,\&quot; page 125.  **Chase Paymentech Solutions and FDC Compass**\\ This field is optional because this value is required in the merchant descriptors. See \&quot;Chase Paymentech Solutions Merchant Descriptors,\&quot; page 142, and \&quot;FDC Compass Merchant Descriptors,\&quot; page 153.  **CyberSource through VisaNet**\\ When you do not include this field in a request for a Crediario installment payment, CyberSource sends a value of 0 to the processor.  For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 38-40 - Field: Installment Payment Number  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies. 
   * maximum: 99
   * @return sequence
  **/
  @ApiModelProperty(value = "Installment number when making payments in installments. Used along with _totalCount_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ = 2 and _totalCount_ = 5.  See \"Installment Payments,\" page 125.  **Chase Paymentech Solutions and FDC Compass**\\ This field is optional because this value is required in the merchant descriptors. See \"Chase Paymentech Solutions Merchant Descriptors,\" page 142, and \"FDC Compass Merchant Descriptors,\" page 153.  **CyberSource through VisaNet**\\ When you do not include this field in a request for a Crediario installment payment, CyberSource sends a value of 0 to the processor.  For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 38-40 - Field: Installment Payment Number  * The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies. ")
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }

  public Ptsv2paymentsInstallmentInformation totalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

   /**
   * Total amount of the loan that is being paid in installments. This field is supported only for CyberSource through VisaNet. See \&quot;Installment Payments,\&quot; page 127. 
   * @return totalAmount
  **/
  @ApiModelProperty(value = "Total amount of the loan that is being paid in installments. This field is supported only for CyberSource through VisaNet. See \"Installment Payments,\" page 127. ")
  public String getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(String totalAmount) {
    this.totalAmount = totalAmount;
  }

  public Ptsv2paymentsInstallmentInformation totalCount(Integer totalCount) {
    this.totalCount = totalCount;
    return this;
  }

   /**
   * Total number of installments when making payments in installments. See \&quot;Installment Payments,\&quot; page 127.  **Chase Paymentech Solutions and FDC Compass**\\ This field is optional because this value is required in the merchant descriptors. See \&quot;Chase Paymentech Solutions Merchant Descriptors,\&quot; page 144, and \&quot;FDC Compass Merchant Descriptors,\&quot; page 155.  **American Express Direct, Cielo, and Comercio Latino**\\ This value is the total number of installments you approved.  **CyberSource Latin American Processing in Brazil**\\ This value is the total number of installments that you approved. The default is 1.  **All Other Processors**\\ This value is used along with _sequence_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ &#x3D; 2 and _totalCount_ &#x3D; 5.  **CyberSource through VisaNet**\\ For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 23-25 - Field: Number of Installments  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 7-8 - Field: Number of Installments  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR1 - Position: 7-8 - Field: Number of Installments  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR5 - Position: 20-22 - Field: Installment Total Count  **Note** The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies. 
   * maximum: 99
   * @return totalCount
  **/
  @ApiModelProperty(value = "Total number of installments when making payments in installments. See \"Installment Payments,\" page 127.  **Chase Paymentech Solutions and FDC Compass**\\ This field is optional because this value is required in the merchant descriptors. See \"Chase Paymentech Solutions Merchant Descriptors,\" page 144, and \"FDC Compass Merchant Descriptors,\" page 155.  **American Express Direct, Cielo, and Comercio Latino**\\ This value is the total number of installments you approved.  **CyberSource Latin American Processing in Brazil**\\ This value is the total number of installments that you approved. The default is 1.  **All Other Processors**\\ This value is used along with _sequence_ to track which payment is being processed.  For example, the second of 5 payments would be passed to CyberSource as _sequence_ = 2 and _totalCount_ = 5.  **CyberSource through VisaNet**\\ For Crediario installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR9 - Position: 23-25 - Field: Number of Installments  For installment payments with American Express in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR3 - Position: 7-8 - Field: Number of Installments  For installment payments with Visa in Brazil, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP07 TCR1 - Position: 7-8 - Field: Number of Installments  For all other kinds of installment payments, the value for this field corresponds to the following data in the TC 33 capture file*: - Record: CP01 TCR5 - Position: 20-22 - Field: Installment Total Count  **Note** The TC 33 Capture file contains information about the purchases and refunds that a merchant submits to CyberSource. CyberSource through VisaNet creates the TC 33 Capture file at the end of the day and sends it to the merchant’s acquirer, who uses this information to facilitate end-of-day clearing processing with payment card companies. ")
  public Integer getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Integer totalCount) {
    this.totalCount = totalCount;
  }

  public Ptsv2paymentsInstallmentInformation firstInstallmentDate(String firstInstallmentDate) {
    this.firstInstallmentDate = firstInstallmentDate;
    return this;
  }

   /**
   * Date of the first installment payment. Format: YYMMDD. When you do not include this field, CyberSource sends a string of six zeros (000000) to the processor. See Installment Payments on CyberSource through VisaNet.  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR9 - Position: 42-47 - Field: Date of First Installment 
   * @return firstInstallmentDate
  **/
  @ApiModelProperty(value = "Date of the first installment payment. Format: YYMMDD. When you do not include this field, CyberSource sends a string of six zeros (000000) to the processor. See Installment Payments on CyberSource through VisaNet.  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP01 TCR9 - Position: 42-47 - Field: Date of First Installment ")
  public String getFirstInstallmentDate() {
    return firstInstallmentDate;
  }

  public void setFirstInstallmentDate(String firstInstallmentDate) {
    this.firstInstallmentDate = firstInstallmentDate;
  }

  public Ptsv2paymentsInstallmentInformation invoiceData(String invoiceData) {
    this.invoiceData = invoiceData;
    return this;
  }

   /**
   * Invoice information that you want to provide to the issuer. This value is similar to a tracking number and is the same for all installment payments for one purchase.  This field is supported only for installment payments with Mastercard on CyberSource through VisaNet in Brazil.  See Installment Payments on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR4 - Position: 51-70 - Field: Purchase Identification 
   * @return invoiceData
  **/
  @ApiModelProperty(value = "Invoice information that you want to provide to the issuer. This value is similar to a tracking number and is the same for all installment payments for one purchase.  This field is supported only for installment payments with Mastercard on CyberSource through VisaNet in Brazil.  See Installment Payments on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR4 - Position: 51-70 - Field: Purchase Identification ")
  public String getInvoiceData() {
    return invoiceData;
  }

  public void setInvoiceData(String invoiceData) {
    this.invoiceData = invoiceData;
  }

  public Ptsv2paymentsInstallmentInformation paymentType(String paymentType) {
    this.paymentType = paymentType;
    return this;
  }

   /**
   * Payment plan for the installments.  Possible values: - 0 (default): Regular installment. This value is not allowed for airline transactions. - 1: Installment payment with down payment. - 2: Installment payment without down payment. This value is supported only for airline transactions. - 3: Installment payment; down payment and boarding fee will follow. This value is supported only for airline transactions. - 4: Down payment only; regular installment payment will follow. - 5: Boarding fee only. This value is supported only for airline transactions.  This field is supported only for installment payments with Visa on CyberSource through VisaNet in Brazil.  See Installment Payments on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 9 - Field: Merchant Installment Supporting Information 
   * @return paymentType
  **/
  @ApiModelProperty(value = "Payment plan for the installments.  Possible values: - 0 (default): Regular installment. This value is not allowed for airline transactions. - 1: Installment payment with down payment. - 2: Installment payment without down payment. This value is supported only for airline transactions. - 3: Installment payment; down payment and boarding fee will follow. This value is supported only for airline transactions. - 4: Down payment only; regular installment payment will follow. - 5: Boarding fee only. This value is supported only for airline transactions.  This field is supported only for installment payments with Visa on CyberSource through VisaNet in Brazil.  See Installment Payments on CyberSource through VisaNet.  The value for this field corresponds to the following data in the TC 33 capture file5: - Record: CP07 TCR1 - Position: 9 - Field: Merchant Installment Supporting Information ")
  public String getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(String paymentType) {
    this.paymentType = paymentType;
  }

  public Ptsv2paymentsInstallmentInformation eligibilityInquiry(String eligibilityInquiry) {
    this.eligibilityInquiry = eligibilityInquiry;
    return this;
  }

   /**
   * Indicates whether the authorization request is a Crediario eligibility inquiry.  See Installment Payments on CyberSource through VisaNet.  Set the value for this field to &#x60;Crediario&#x60;.  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet. 
   * @return eligibilityInquiry
  **/
  @ApiModelProperty(value = "Indicates whether the authorization request is a Crediario eligibility inquiry.  See Installment Payments on CyberSource through VisaNet.  Set the value for this field to `Crediario`.  This field is supported only for Crediario installment payments in Brazil on CyberSource through VisaNet. ")
  public String getEligibilityInquiry() {
    return eligibilityInquiry;
  }

  public void setEligibilityInquiry(String eligibilityInquiry) {
    this.eligibilityInquiry = eligibilityInquiry;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ptsv2paymentsInstallmentInformation ptsv2paymentsInstallmentInformation = (Ptsv2paymentsInstallmentInformation) o;
    return Objects.equals(this.amount, ptsv2paymentsInstallmentInformation.amount) &&
        Objects.equals(this.frequency, ptsv2paymentsInstallmentInformation.frequency) &&
        Objects.equals(this.planType, ptsv2paymentsInstallmentInformation.planType) &&
        Objects.equals(this.sequence, ptsv2paymentsInstallmentInformation.sequence) &&
        Objects.equals(this.totalAmount, ptsv2paymentsInstallmentInformation.totalAmount) &&
        Objects.equals(this.totalCount, ptsv2paymentsInstallmentInformation.totalCount) &&
        Objects.equals(this.firstInstallmentDate, ptsv2paymentsInstallmentInformation.firstInstallmentDate) &&
        Objects.equals(this.invoiceData, ptsv2paymentsInstallmentInformation.invoiceData) &&
        Objects.equals(this.paymentType, ptsv2paymentsInstallmentInformation.paymentType) &&
        Objects.equals(this.eligibilityInquiry, ptsv2paymentsInstallmentInformation.eligibilityInquiry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, frequency, planType, sequence, totalAmount, totalCount, firstInstallmentDate, invoiceData, paymentType, eligibilityInquiry);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ptsv2paymentsInstallmentInformation {\n");
    
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    planType: ").append(toIndentedString(planType)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    firstInstallmentDate: ").append(toIndentedString(firstInstallmentDate)).append("\n");
    sb.append("    invoiceData: ").append(toIndentedString(invoiceData)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    eligibilityInquiry: ").append(toIndentedString(eligibilityInquiry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

