/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import Model.PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Payment method configuration for the product. 
 */
@ApiModel(description = "Payment method configuration for the product. ")

public class PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods {
  @SerializedName("merchantId")
  private String merchantId = null;

  @SerializedName("logoUrl")
  private String logoUrl = null;

  @SerializedName("redirectSuccessUrl")
  private String redirectSuccessUrl = null;

  @SerializedName("redirectCancelUrl")
  private String redirectCancelUrl = null;

  @SerializedName("redirectFailureUrl")
  private String redirectFailureUrl = null;

  @SerializedName("additionalConfigurations")
  private List<PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations> additionalConfigurations = null;

  public PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant ID for the payment method. This is a unique identifier for the merchant. example. mid12345678 
   * @return merchantId
  **/
  @ApiModelProperty(value = "Merchant ID for the payment method. This is a unique identifier for the merchant. example. mid12345678 ")
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods logoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
    return this;
  }

   /**
   * URL of the logo for the payment method. This is used for branding purposes. example: http://www.test.com 
   * @return logoUrl
  **/
  @ApiModelProperty(value = "URL of the logo for the payment method. This is used for branding purposes. example: http://www.test.com ")
  public String getLogoUrl() {
    return logoUrl;
  }

  public void setLogoUrl(String logoUrl) {
    this.logoUrl = logoUrl;
  }

  public PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods redirectSuccessUrl(String redirectSuccessUrl) {
    this.redirectSuccessUrl = redirectSuccessUrl;
    return this;
  }

   /**
   * URL to redirect to after a successful transaction. This is where the user will be sent after completing the payment. example: http://www.test.com/success 
   * @return redirectSuccessUrl
  **/
  @ApiModelProperty(value = "URL to redirect to after a successful transaction. This is where the user will be sent after completing the payment. example: http://www.test.com/success ")
  public String getRedirectSuccessUrl() {
    return redirectSuccessUrl;
  }

  public void setRedirectSuccessUrl(String redirectSuccessUrl) {
    this.redirectSuccessUrl = redirectSuccessUrl;
  }

  public PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods redirectCancelUrl(String redirectCancelUrl) {
    this.redirectCancelUrl = redirectCancelUrl;
    return this;
  }

   /**
   * URL to redirect to if the user cancels the transaction. This is where the user will be sent if they choose to cancel the payment. example: http://www.test.com/cancel 
   * @return redirectCancelUrl
  **/
  @ApiModelProperty(value = "URL to redirect to if the user cancels the transaction. This is where the user will be sent if they choose to cancel the payment. example: http://www.test.com/cancel ")
  public String getRedirectCancelUrl() {
    return redirectCancelUrl;
  }

  public void setRedirectCancelUrl(String redirectCancelUrl) {
    this.redirectCancelUrl = redirectCancelUrl;
  }

  public PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods redirectFailureUrl(String redirectFailureUrl) {
    this.redirectFailureUrl = redirectFailureUrl;
    return this;
  }

   /**
   * URL to redirect to if the transaction fails. This is where the user will be sent if there is an error during the payment process. example: http://www.test.com/failure 
   * @return redirectFailureUrl
  **/
  @ApiModelProperty(value = "URL to redirect to if the transaction fails. This is where the user will be sent if there is an error during the payment process. example: http://www.test.com/failure ")
  public String getRedirectFailureUrl() {
    return redirectFailureUrl;
  }

  public void setRedirectFailureUrl(String redirectFailureUrl) {
    this.redirectFailureUrl = redirectFailureUrl;
  }

  public PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods additionalConfigurations(List<PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations> additionalConfigurations) {
    this.additionalConfigurations = additionalConfigurations;
    return this;
  }

  public PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods addAdditionalConfigurationsItem(PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations additionalConfigurationsItem) {
    if (this.additionalConfigurations == null) {
      this.additionalConfigurations = new ArrayList<PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations>();
    }
    this.additionalConfigurations.add(additionalConfigurationsItem);
    return this;
  }

   /**
   * Additional configurations for the payment method. This can include various settings specific to the payment method. 
   * @return additionalConfigurations
  **/
  @ApiModelProperty(value = "Additional configurations for the payment method. This can include various settings specific to the payment method. ")
  public List<PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations> getAdditionalConfigurations() {
    return additionalConfigurations;
  }

  public void setAdditionalConfigurations(List<PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsAdditionalConfigurations> additionalConfigurations) {
    this.additionalConfigurations = additionalConfigurations;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods paymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods = (PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods) o;
    return Objects.equals(this.merchantId, paymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.merchantId) &&
        Objects.equals(this.logoUrl, paymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.logoUrl) &&
        Objects.equals(this.redirectSuccessUrl, paymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.redirectSuccessUrl) &&
        Objects.equals(this.redirectCancelUrl, paymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.redirectCancelUrl) &&
        Objects.equals(this.redirectFailureUrl, paymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.redirectFailureUrl) &&
        Objects.equals(this.additionalConfigurations, paymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods.additionalConfigurations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(merchantId, logoUrl, redirectSuccessUrl, redirectCancelUrl, redirectFailureUrl, additionalConfigurations);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentsProductsAlternativePaymentMethodsConfigurationInformationConfigurationsPaymentMethods {\n");
    
    if (merchantId != null) sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    if (logoUrl != null) sb.append("    logoUrl: ").append(toIndentedString(logoUrl)).append("\n");
    if (redirectSuccessUrl != null) sb.append("    redirectSuccessUrl: ").append(toIndentedString(redirectSuccessUrl)).append("\n");
    if (redirectCancelUrl != null) sb.append("    redirectCancelUrl: ").append(toIndentedString(redirectCancelUrl)).append("\n");
    if (redirectFailureUrl != null) sb.append("    redirectFailureUrl: ").append(toIndentedString(redirectFailureUrl)).append("\n");
    if (additionalConfigurations != null) sb.append("    additionalConfigurations: ").append(toIndentedString(additionalConfigurations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

