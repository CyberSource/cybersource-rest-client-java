/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Upv1capturecontextsCaptureMandate
 */

public class Upv1capturecontextsCaptureMandate {
  @SerializedName("billingType")
  private String billingType = null;

  @SerializedName("requestEmail")
  private Boolean requestEmail = null;

  @SerializedName("requestPhone")
  private Boolean requestPhone = null;

  @SerializedName("requestShipping")
  private Boolean requestShipping = null;

  @SerializedName("shipToCountries")
  private List<String> shipToCountries = null;

  @SerializedName("showAcceptedNetworkIcons")
  private Boolean showAcceptedNetworkIcons = null;

  @SerializedName("requestSaveCard")
  private Boolean requestSaveCard = null;

  @SerializedName("comboCard")
  private Boolean comboCard = null;

  public Upv1capturecontextsCaptureMandate billingType(String billingType) {
    this.billingType = billingType;
    return this;
  }

   /**
   * Configure Unified Checkout to capture billing address information.  Possible values: - FULL: Capture complete billing address information. - PARTIAL: Capture first name, last name, country and postal/zip code only. - NONE: Capture only first name and last name. 
   * @return billingType
  **/
  @ApiModelProperty(example = "FULL", value = "Configure Unified Checkout to capture billing address information.  Possible values: - FULL: Capture complete billing address information. - PARTIAL: Capture first name, last name, country and postal/zip code only. - NONE: Capture only first name and last name. ")
  public String getBillingType() {
    return billingType;
  }

  public void setBillingType(String billingType) {
    this.billingType = billingType;
  }

  public Upv1capturecontextsCaptureMandate requestEmail(Boolean requestEmail) {
    this.requestEmail = requestEmail;
    return this;
  }

   /**
   * Configure Unified Checkout to capture customer email address.  Possible values:  - True  - False 
   * @return requestEmail
  **/
  @ApiModelProperty(value = "Configure Unified Checkout to capture customer email address.  Possible values:  - True  - False ")
  public Boolean RequestEmail() {
    return requestEmail;
  }

  public void setRequestEmail(Boolean requestEmail) {
    this.requestEmail = requestEmail;
  }

  public Upv1capturecontextsCaptureMandate requestPhone(Boolean requestPhone) {
    this.requestPhone = requestPhone;
    return this;
  }

   /**
   * Configure Unified Checkout to capture customer phone number.  Possible values: - True - False 
   * @return requestPhone
  **/
  @ApiModelProperty(value = "Configure Unified Checkout to capture customer phone number.  Possible values: - True - False ")
  public Boolean RequestPhone() {
    return requestPhone;
  }

  public void setRequestPhone(Boolean requestPhone) {
    this.requestPhone = requestPhone;
  }

  public Upv1capturecontextsCaptureMandate requestShipping(Boolean requestShipping) {
    this.requestShipping = requestShipping;
    return this;
  }

   /**
   * Configure Unified Checkout to capture customer shipping details.  Possible values: - True - False 
   * @return requestShipping
  **/
  @ApiModelProperty(value = "Configure Unified Checkout to capture customer shipping details.  Possible values: - True - False ")
  public Boolean RequestShipping() {
    return requestShipping;
  }

  public void setRequestShipping(Boolean requestShipping) {
    this.requestShipping = requestShipping;
  }

  public Upv1capturecontextsCaptureMandate shipToCountries(List<String> shipToCountries) {
    this.shipToCountries = shipToCountries;
    return this;
  }

  public Upv1capturecontextsCaptureMandate addShipToCountriesItem(String shipToCountriesItem) {
    if (this.shipToCountries == null) {
      this.shipToCountries = new ArrayList<String>();
    }
    this.shipToCountries.add(shipToCountriesItem);
    return this;
  }

   /**
   * List of countries available to ship to.   Use the two-character ISO Standard Country Codes. 
   * @return shipToCountries
  **/
  @ApiModelProperty(value = "List of countries available to ship to.   Use the two-character ISO Standard Country Codes. ")
  public List<String> getShipToCountries() {
    return shipToCountries;
  }

  public void setShipToCountries(List<String> shipToCountries) {
    this.shipToCountries = shipToCountries;
  }

  public Upv1capturecontextsCaptureMandate showAcceptedNetworkIcons(Boolean showAcceptedNetworkIcons) {
    this.showAcceptedNetworkIcons = showAcceptedNetworkIcons;
    return this;
  }

   /**
   * Configure Unified Checkout to display the list of accepted card networks beneath the payment button  Possible values: - True - False 
   * @return showAcceptedNetworkIcons
  **/
  @ApiModelProperty(value = "Configure Unified Checkout to display the list of accepted card networks beneath the payment button  Possible values: - True - False ")
  public Boolean ShowAcceptedNetworkIcons() {
    return showAcceptedNetworkIcons;
  }

  public void setShowAcceptedNetworkIcons(Boolean showAcceptedNetworkIcons) {
    this.showAcceptedNetworkIcons = showAcceptedNetworkIcons;
  }

  public Upv1capturecontextsCaptureMandate requestSaveCard(Boolean requestSaveCard) {
    this.requestSaveCard = requestSaveCard;
    return this;
  }

   /**
   * Configure Unified Checkout to display the \&quot;Save card for future use\&quot; checkbox.&lt;br&gt;  Configurable check box that will show in a Manual card entry flow to allow a Cardholder to give consent to store their manually entered credential with the Merchant that they are paying.&lt;br&gt;  Applicable when manually entering the details and not enrolling in Click to Pay.  Possible values:  - True   - False&lt;br&gt;&lt;br&gt;  **Use Cases:**  **Offer consumers option to save their card in Unified Checkout:**  - Include the captureMandate.requestSaveCard field in the capture context request and set it to true. - When set to true, this will show a checkbox with the message &#39;Save card for future use&#39; in Unified Checkout. - When selected this provides a response in both the Transient Token and Get Credentials API response.&lt;br&gt;&lt;br&gt;  **Do not offer consumers the option to save their card in Unified Checkout:**  - Include the captureMandate.requestSaveCard field in the capture context request and set it to false OR omit the field from the capture context request. - When set to false, the save card option is not shown to consumers when manually entering card details. 
   * @return requestSaveCard
  **/
  @ApiModelProperty(value = "Configure Unified Checkout to display the \"Save card for future use\" checkbox.<br>  Configurable check box that will show in a Manual card entry flow to allow a Cardholder to give consent to store their manually entered credential with the Merchant that they are paying.<br>  Applicable when manually entering the details and not enrolling in Click to Pay.  Possible values:  - True   - False<br><br>  **Use Cases:**  **Offer consumers option to save their card in Unified Checkout:**  - Include the captureMandate.requestSaveCard field in the capture context request and set it to true. - When set to true, this will show a checkbox with the message 'Save card for future use' in Unified Checkout. - When selected this provides a response in both the Transient Token and Get Credentials API response.<br><br>  **Do not offer consumers the option to save their card in Unified Checkout:**  - Include the captureMandate.requestSaveCard field in the capture context request and set it to false OR omit the field from the capture context request. - When set to false, the save card option is not shown to consumers when manually entering card details. ")
  public Boolean RequestSaveCard() {
    return requestSaveCard;
  }

  public void setRequestSaveCard(Boolean requestSaveCard) {
    this.requestSaveCard = requestSaveCard;
  }

  public Upv1capturecontextsCaptureMandate comboCard(Boolean comboCard) {
    this.comboCard = comboCard;
    return this;
  }

   /**
   * Configure Unified Checkout to display combo card at checkout.&lt;br&gt;  A combo debit/credit card is a single card that functions both as a Debit/Credit card.  Unified Checkout / Click to Pay Drop-in UI allows the Cardholder to choose whether they would like the transaction to be paid for using either debit or credit card. **Important:** This is applicable to Visa cards only.  Possible values: - True  - False&lt;br&gt;&lt;br&gt;  **Use Cases:**  **Offer Combo Card at Checkout:**  - Include the captureMandate.comboCard field in the capture context request and set it to true. - When set to true, Combo Card selection is shown at checkout &lt;br&gt;&lt;br&gt;  **Do not offer Combo Card at Checkout:**  - Include the captureMandate.comboCard field in the capture context request and set it to false OR omit the field from the capture context request. - The Combo Card selection is not shown at checkout. 
   * @return comboCard
  **/
  @ApiModelProperty(value = "Configure Unified Checkout to display combo card at checkout.<br>  A combo debit/credit card is a single card that functions both as a Debit/Credit card.  Unified Checkout / Click to Pay Drop-in UI allows the Cardholder to choose whether they would like the transaction to be paid for using either debit or credit card. **Important:** This is applicable to Visa cards only.  Possible values: - True  - False<br><br>  **Use Cases:**  **Offer Combo Card at Checkout:**  - Include the captureMandate.comboCard field in the capture context request and set it to true. - When set to true, Combo Card selection is shown at checkout <br><br>  **Do not offer Combo Card at Checkout:**  - Include the captureMandate.comboCard field in the capture context request and set it to false OR omit the field from the capture context request. - The Combo Card selection is not shown at checkout. ")
  public Boolean ComboCard() {
    return comboCard;
  }

  public void setComboCard(Boolean comboCard) {
    this.comboCard = comboCard;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Upv1capturecontextsCaptureMandate upv1capturecontextsCaptureMandate = (Upv1capturecontextsCaptureMandate) o;
    return Objects.equals(this.billingType, upv1capturecontextsCaptureMandate.billingType) &&
        Objects.equals(this.requestEmail, upv1capturecontextsCaptureMandate.requestEmail) &&
        Objects.equals(this.requestPhone, upv1capturecontextsCaptureMandate.requestPhone) &&
        Objects.equals(this.requestShipping, upv1capturecontextsCaptureMandate.requestShipping) &&
        Objects.equals(this.shipToCountries, upv1capturecontextsCaptureMandate.shipToCountries) &&
        Objects.equals(this.showAcceptedNetworkIcons, upv1capturecontextsCaptureMandate.showAcceptedNetworkIcons) &&
        Objects.equals(this.requestSaveCard, upv1capturecontextsCaptureMandate.requestSaveCard) &&
        Objects.equals(this.comboCard, upv1capturecontextsCaptureMandate.comboCard);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingType, requestEmail, requestPhone, requestShipping, shipToCountries, showAcceptedNetworkIcons, requestSaveCard, comboCard);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Upv1capturecontextsCaptureMandate {\n");
    
    if (billingType != null) sb.append("    billingType: ").append(toIndentedString(billingType)).append("\n");
    if (requestEmail != null) sb.append("    requestEmail: ").append(toIndentedString(requestEmail)).append("\n");
    if (requestPhone != null) sb.append("    requestPhone: ").append(toIndentedString(requestPhone)).append("\n");
    if (requestShipping != null) sb.append("    requestShipping: ").append(toIndentedString(requestShipping)).append("\n");
    if (shipToCountries != null) sb.append("    shipToCountries: ").append(toIndentedString(shipToCountries)).append("\n");
    if (showAcceptedNetworkIcons != null) sb.append("    showAcceptedNetworkIcons: ").append(toIndentedString(showAcceptedNetworkIcons)).append("\n");
    if (requestSaveCard != null) sb.append("    requestSaveCard: ").append(toIndentedString(requestSaveCard)).append("\n");
    if (comboCard != null) sb.append("    comboCard: ").append(toIndentedString(comboCard)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

