/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import Model.CardProcessingConfigCommonCurrencies;
import Model.CardProcessingConfigCommonPaymentTypes;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * CardProcessingConfigCommonAcquirers
 */

public class CardProcessingConfigCommonAcquirers {
  @SerializedName("institutionId")
  private String institutionId = null;

  @SerializedName("interbankCardAssociationId")
  private String interbankCardAssociationId = null;

  @SerializedName("discoverInstitutionId")
  private String discoverInstitutionId = null;

  @SerializedName("countryCode")
  private String countryCode = null;

  @SerializedName("fileDestinationBin")
  private String fileDestinationBin = null;

  @SerializedName("merchantVerificationValue")
  private String merchantVerificationValue = null;

  @SerializedName("merchantId")
  private String merchantId = null;

  @SerializedName("terminalId")
  private String terminalId = null;

  @SerializedName("allowMultipleBills")
  private Boolean allowMultipleBills = null;

  @SerializedName("enableTransactionReferenceNumber")
  private Boolean enableTransactionReferenceNumber = null;

  @SerializedName("paymentTypes")
  private Map<String, CardProcessingConfigCommonPaymentTypes> paymentTypes = null;

  @SerializedName("currencies")
  private Map<String, CardProcessingConfigCommonCurrencies> currencies = null;

  public CardProcessingConfigCommonAcquirers institutionId(String institutionId) {
    this.institutionId = institutionId;
    return this;
  }

   /**
   * Identifier of the acquirer. This number is usually assigned by Visa.
   * @return institutionId
  **/
  @ApiModelProperty(value = "Identifier of the acquirer. This number is usually assigned by Visa.")
  public String getInstitutionId() {
    return institutionId;
  }

  public void setInstitutionId(String institutionId) {
    this.institutionId = institutionId;
  }

  public CardProcessingConfigCommonAcquirers interbankCardAssociationId(String interbankCardAssociationId) {
    this.interbankCardAssociationId = interbankCardAssociationId;
    return this;
  }

   /**
   * Number assigned by MasterCard to banks to identify the member in transactions.
   * @return interbankCardAssociationId
  **/
  @ApiModelProperty(value = "Number assigned by MasterCard to banks to identify the member in transactions.")
  public String getInterbankCardAssociationId() {
    return interbankCardAssociationId;
  }

  public void setInterbankCardAssociationId(String interbankCardAssociationId) {
    this.interbankCardAssociationId = interbankCardAssociationId;
  }

  public CardProcessingConfigCommonAcquirers discoverInstitutionId(String discoverInstitutionId) {
    this.discoverInstitutionId = discoverInstitutionId;
    return this;
  }

   /**
   * Assigned by Discover to identify the acquirer.
   * @return discoverInstitutionId
  **/
  @ApiModelProperty(value = "Assigned by Discover to identify the acquirer.")
  public String getDiscoverInstitutionId() {
    return discoverInstitutionId;
  }

  public void setDiscoverInstitutionId(String discoverInstitutionId) {
    this.discoverInstitutionId = discoverInstitutionId;
  }

  public CardProcessingConfigCommonAcquirers countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * ISO 4217 format.
   * @return countryCode
  **/
  @ApiModelProperty(value = "ISO 4217 format.")
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }

  public CardProcessingConfigCommonAcquirers fileDestinationBin(String fileDestinationBin) {
    this.fileDestinationBin = fileDestinationBin;
    return this;
  }

   /**
   * The BIN to which this capturefile is sent. This field must contain a valid BIN.
   * @return fileDestinationBin
  **/
  @ApiModelProperty(value = "The BIN to which this capturefile is sent. This field must contain a valid BIN.")
  public String getFileDestinationBin() {
    return fileDestinationBin;
  }

  public void setFileDestinationBin(String fileDestinationBin) {
    this.fileDestinationBin = fileDestinationBin;
  }

  public CardProcessingConfigCommonAcquirers merchantVerificationValue(String merchantVerificationValue) {
    this.merchantVerificationValue = merchantVerificationValue;
    return this;
  }

   /**
   * Identify merchants that participate in Select Merchant Fee (SMF) programs. Unique to the merchant.
   * @return merchantVerificationValue
  **/
  @ApiModelProperty(value = "Identify merchants that participate in Select Merchant Fee (SMF) programs. Unique to the merchant.")
  public String getMerchantVerificationValue() {
    return merchantVerificationValue;
  }

  public void setMerchantVerificationValue(String merchantVerificationValue) {
    this.merchantVerificationValue = merchantVerificationValue;
  }

  public CardProcessingConfigCommonAcquirers merchantId(String merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * Merchant ID assigned by an acquirer or a processor. Should not be overriden by any other party.
   * @return merchantId
  **/
  @ApiModelProperty(value = "Merchant ID assigned by an acquirer or a processor. Should not be overriden by any other party.")
  public String getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
  }

  public CardProcessingConfigCommonAcquirers terminalId(String terminalId) {
    this.terminalId = terminalId;
    return this;
  }

   /**
   * The &#39;Terminal Id&#39; aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions. 
   * @return terminalId
  **/
  @ApiModelProperty(value = "The 'Terminal Id' aka TID, is an identifier used for with your payments processor. Depending on the processor and payment acceptance type this may also be the default Terminal ID used for Card Present and Virtual Terminal transactions. ")
  public String getTerminalId() {
    return terminalId;
  }

  public void setTerminalId(String terminalId) {
    this.terminalId = terminalId;
  }

  public CardProcessingConfigCommonAcquirers allowMultipleBills(Boolean allowMultipleBills) {
    this.allowMultipleBills = allowMultipleBills;
    return this;
  }

   /**
   * Allows multiple captures for a single authorization transaction. 
   * @return allowMultipleBills
  **/
  @ApiModelProperty(value = "Allows multiple captures for a single authorization transaction. ")
  public Boolean AllowMultipleBills() {
    return allowMultipleBills;
  }

  public void setAllowMultipleBills(Boolean allowMultipleBills) {
    this.allowMultipleBills = allowMultipleBills;
  }

  public CardProcessingConfigCommonAcquirers enableTransactionReferenceNumber(Boolean enableTransactionReferenceNumber) {
    this.enableTransactionReferenceNumber = enableTransactionReferenceNumber;
    return this;
  }

   /**
   * To enable merchant to send in transaction reference number (unique reconciliation ID).
   * @return enableTransactionReferenceNumber
  **/
  @ApiModelProperty(value = "To enable merchant to send in transaction reference number (unique reconciliation ID).")
  public Boolean EnableTransactionReferenceNumber() {
    return enableTransactionReferenceNumber;
  }

  public void setEnableTransactionReferenceNumber(Boolean enableTransactionReferenceNumber) {
    this.enableTransactionReferenceNumber = enableTransactionReferenceNumber;
  }

  public CardProcessingConfigCommonAcquirers paymentTypes(Map<String, CardProcessingConfigCommonPaymentTypes> paymentTypes) {
    this.paymentTypes = paymentTypes;
    return this;
  }

  public CardProcessingConfigCommonAcquirers putPaymentTypesItem(String key, CardProcessingConfigCommonPaymentTypes paymentTypesItem) {
    if (this.paymentTypes == null) {
      this.paymentTypes = new HashMap<String, CardProcessingConfigCommonPaymentTypes>();
    }
    this.paymentTypes.put(key, paymentTypesItem);
    return this;
  }

   /**
   * Valid values are: * VISA * MASTERCARD * AMERICAN_EXPRESS * CUP * EFTPOS * DINERS_CLUB * DISCOVER * JCB 
   * @return paymentTypes
  **/
  @ApiModelProperty(value = "Valid values are: * VISA * MASTERCARD * AMERICAN_EXPRESS * CUP * EFTPOS * DINERS_CLUB * DISCOVER * JCB ")
  public Map<String, CardProcessingConfigCommonPaymentTypes> getPaymentTypes() {
    return paymentTypes;
  }

  public void setPaymentTypes(Map<String, CardProcessingConfigCommonPaymentTypes> paymentTypes) {
    this.paymentTypes = paymentTypes;
  }

  public CardProcessingConfigCommonAcquirers currencies(Map<String, CardProcessingConfigCommonCurrencies> currencies) {
    this.currencies = currencies;
    return this;
  }

  public CardProcessingConfigCommonAcquirers putCurrenciesItem(String key, CardProcessingConfigCommonCurrencies currenciesItem) {
    if (this.currencies == null) {
      this.currencies = new HashMap<String, CardProcessingConfigCommonCurrencies>();
    }
    this.currencies.put(key, currenciesItem);
    return this;
  }

   /**
   * Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)
   * @return currencies
  **/
  @ApiModelProperty(value = "Three-character [ISO 4217 ALPHA-3 Standard Currency Codes.](http://apps.cybersource.com/library/documentation/sbc/quickref/currencies.pdf)")
  public Map<String, CardProcessingConfigCommonCurrencies> getCurrencies() {
    return currencies;
  }

  public void setCurrencies(Map<String, CardProcessingConfigCommonCurrencies> currencies) {
    this.currencies = currencies;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardProcessingConfigCommonAcquirers cardProcessingConfigCommonAcquirers = (CardProcessingConfigCommonAcquirers) o;
    return Objects.equals(this.institutionId, cardProcessingConfigCommonAcquirers.institutionId) &&
        Objects.equals(this.interbankCardAssociationId, cardProcessingConfigCommonAcquirers.interbankCardAssociationId) &&
        Objects.equals(this.discoverInstitutionId, cardProcessingConfigCommonAcquirers.discoverInstitutionId) &&
        Objects.equals(this.countryCode, cardProcessingConfigCommonAcquirers.countryCode) &&
        Objects.equals(this.fileDestinationBin, cardProcessingConfigCommonAcquirers.fileDestinationBin) &&
        Objects.equals(this.merchantVerificationValue, cardProcessingConfigCommonAcquirers.merchantVerificationValue) &&
        Objects.equals(this.merchantId, cardProcessingConfigCommonAcquirers.merchantId) &&
        Objects.equals(this.terminalId, cardProcessingConfigCommonAcquirers.terminalId) &&
        Objects.equals(this.allowMultipleBills, cardProcessingConfigCommonAcquirers.allowMultipleBills) &&
        Objects.equals(this.enableTransactionReferenceNumber, cardProcessingConfigCommonAcquirers.enableTransactionReferenceNumber) &&
        Objects.equals(this.paymentTypes, cardProcessingConfigCommonAcquirers.paymentTypes) &&
        Objects.equals(this.currencies, cardProcessingConfigCommonAcquirers.currencies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(institutionId, interbankCardAssociationId, discoverInstitutionId, countryCode, fileDestinationBin, merchantVerificationValue, merchantId, terminalId, allowMultipleBills, enableTransactionReferenceNumber, paymentTypes, currencies);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardProcessingConfigCommonAcquirers {\n");
    
    if (institutionId != null) sb.append("    institutionId: ").append(toIndentedString(institutionId)).append("\n");
    if (interbankCardAssociationId != null) sb.append("    interbankCardAssociationId: ").append(toIndentedString(interbankCardAssociationId)).append("\n");
    if (discoverInstitutionId != null) sb.append("    discoverInstitutionId: ").append(toIndentedString(discoverInstitutionId)).append("\n");
    if (countryCode != null) sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    if (fileDestinationBin != null) sb.append("    fileDestinationBin: ").append(toIndentedString(fileDestinationBin)).append("\n");
    if (merchantVerificationValue != null) sb.append("    merchantVerificationValue: ").append(toIndentedString(merchantVerificationValue)).append("\n");
    if (merchantId != null) sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    if (terminalId != null) sb.append("    terminalId: ").append(toIndentedString(terminalId)).append("\n");
    if (allowMultipleBills != null) sb.append("    allowMultipleBills: ").append(toIndentedString(allowMultipleBills)).append("\n");
    if (enableTransactionReferenceNumber != null) sb.append("    enableTransactionReferenceNumber: ").append(toIndentedString(enableTransactionReferenceNumber)).append("\n");
    if (paymentTypes != null) sb.append("    paymentTypes: ").append(toIndentedString(paymentTypes)).append("\n");
    if (currencies != null) sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

