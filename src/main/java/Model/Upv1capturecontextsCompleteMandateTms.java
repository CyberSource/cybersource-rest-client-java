/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Configure Unified Checkout to create a TMS token at the end of the payment journey 
 */
@ApiModel(description = "Configure Unified Checkout to create a TMS token at the end of the payment journey ")

public class Upv1capturecontextsCompleteMandateTms {
  @SerializedName("tokenCreate")
  private Boolean tokenCreate = null;

  @SerializedName("tokenTypes")
  private List<String> tokenTypes = null;

  public Upv1capturecontextsCompleteMandateTms tokenCreate(Boolean tokenCreate) {
    this.tokenCreate = tokenCreate;
    return this;
  }

   /**
   * Use this when you want to create a token from the card/bank data in your payment request.   Possible values:   - True   - False&lt;br&gt;&lt;br&gt; 
   * @return tokenCreate
  **/
  @ApiModelProperty(example = "true", value = "Use this when you want to create a token from the card/bank data in your payment request.   Possible values:   - True   - False<br><br> ")
  public Boolean TokenCreate() {
    return tokenCreate;
  }

  public void setTokenCreate(Boolean tokenCreate) {
    this.tokenCreate = tokenCreate;
  }

  public Upv1capturecontextsCompleteMandateTms tokenTypes(List<String> tokenTypes) {
    this.tokenTypes = tokenTypes;
    return this;
  }

  public Upv1capturecontextsCompleteMandateTms addTokenTypesItem(String tokenTypesItem) {
    if (this.tokenTypes == null) {
      this.tokenTypes = new ArrayList<String>();
    }
    this.tokenTypes.add(tokenTypesItem);
    return this;
  }

   /**
   * Cybersource tokens types you are performing a create on. If not supplied the default token type for the merchants token vault will be used.  Possible values: - Customer - paymentInstrument - instrumentIdentifier - shippingAddress 
   * @return tokenTypes
  **/
  @ApiModelProperty(value = "Cybersource tokens types you are performing a create on. If not supplied the default token type for the merchants token vault will be used.  Possible values: - Customer - paymentInstrument - instrumentIdentifier - shippingAddress ")
  public List<String> getTokenTypes() {
    return tokenTypes;
  }

  public void setTokenTypes(List<String> tokenTypes) {
    this.tokenTypes = tokenTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Upv1capturecontextsCompleteMandateTms upv1capturecontextsCompleteMandateTms = (Upv1capturecontextsCompleteMandateTms) o;
    return Objects.equals(this.tokenCreate, upv1capturecontextsCompleteMandateTms.tokenCreate) &&
        Objects.equals(this.tokenTypes, upv1capturecontextsCompleteMandateTms.tokenTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tokenCreate, tokenTypes);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Upv1capturecontextsCompleteMandateTms {\n");
    
    if (tokenCreate != null) sb.append("    tokenCreate: ").append(toIndentedString(tokenCreate)).append("\n");
    if (tokenTypes != null) sb.append("    tokenTypes: ").append(toIndentedString(tokenTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

