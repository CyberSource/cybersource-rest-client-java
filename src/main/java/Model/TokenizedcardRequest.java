/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import Model.Tmsv2TokenizedCardCard;
import Model.Tmsv2TokenizedCardLinks;
import Model.Tmsv2TokenizedCardMetadata;
import Model.Tmsv2TokenizedCardPasscode;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * TokenizedcardRequest
 */

public class TokenizedcardRequest {
  @SerializedName("_links")
  private Tmsv2TokenizedCardLinks links = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("object")
  private String object = null;

  @SerializedName("accountReferenceId")
  private String accountReferenceId = null;

  @SerializedName("consumerId")
  private String consumerId = null;

  @SerializedName("createInstrumentIdentifier")
  private Boolean createInstrumentIdentifier = null;

  @SerializedName("source")
  private String source = null;

  @SerializedName("state")
  private String state = null;

  @SerializedName("reason")
  private String reason = null;

  @SerializedName("number")
  private String number = null;

  @SerializedName("expirationMonth")
  private String expirationMonth = null;

  @SerializedName("expirationYear")
  private String expirationYear = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("cryptogram")
  private String cryptogram = null;

  @SerializedName("securityCode")
  private String securityCode = null;

  @SerializedName("eci")
  private String eci = null;

  @SerializedName("requestorId")
  private String requestorId = null;

  @SerializedName("enrollmentId")
  private String enrollmentId = null;

  @SerializedName("tokenReferenceId")
  private String tokenReferenceId = null;

  @SerializedName("paymentAccountReference")
  private String paymentAccountReference = null;

  @SerializedName("card")
  private Tmsv2TokenizedCardCard card = null;

  @SerializedName("passcode")
  private Tmsv2TokenizedCardPasscode passcode = null;

  @SerializedName("metadata")
  private Tmsv2TokenizedCardMetadata metadata = null;

  public TokenizedcardRequest links(Tmsv2TokenizedCardLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(value = "")
  public Tmsv2TokenizedCardLinks getLinks() {
    return links;
  }

  public void setLinks(Tmsv2TokenizedCardLinks links) {
    this.links = links;
  }

   /**
   * The Id of the Tokenized Card. 
   * @return id
  **/
  @ApiModelProperty(value = "The Id of the Tokenized Card. ")
  public String getId() {
    return id;
  }

   /**
   * The type. Possible Values: - tokenizedCard 
   * @return object
  **/
  @ApiModelProperty(example = "tokenizedCard", value = "The type. Possible Values: - tokenizedCard ")
  public String getObject() {
    return object;
  }

  public TokenizedcardRequest accountReferenceId(String accountReferenceId) {
    this.accountReferenceId = accountReferenceId;
    return this;
  }

   /**
   * An identifier provided by the issuer for the account. 
   * @return accountReferenceId
  **/
  @ApiModelProperty(value = "An identifier provided by the issuer for the account. ")
  public String getAccountReferenceId() {
    return accountReferenceId;
  }

  public void setAccountReferenceId(String accountReferenceId) {
    this.accountReferenceId = accountReferenceId;
  }

  public TokenizedcardRequest consumerId(String consumerId) {
    this.consumerId = consumerId;
    return this;
  }

   /**
   * Identifier of the consumer within the wallet. Maximum 24 characters for VTS.
   * @return consumerId
  **/
  @ApiModelProperty(value = "Identifier of the consumer within the wallet. Maximum 24 characters for VTS.")
  public String getConsumerId() {
    return consumerId;
  }

  public void setConsumerId(String consumerId) {
    this.consumerId = consumerId;
  }

  public TokenizedcardRequest createInstrumentIdentifier(Boolean createInstrumentIdentifier) {
    this.createInstrumentIdentifier = createInstrumentIdentifier;
    return this;
  }

   /**
   * Specifies whether the InstrumentId should be created (true) or not (false). Possible Values: - &#x60;true&#x60;: The InstrumentId should be created. - &#x60;false&#x60;: The InstrumentId should be created. 
   * @return createInstrumentIdentifier
  **/
  @ApiModelProperty(value = "Specifies whether the InstrumentId should be created (true) or not (false). Possible Values: - `true`: The InstrumentId should be created. - `false`: The InstrumentId should be created. ")
  public Boolean CreateInstrumentIdentifier() {
    return createInstrumentIdentifier;
  }

  public void setCreateInstrumentIdentifier(Boolean createInstrumentIdentifier) {
    this.createInstrumentIdentifier = createInstrumentIdentifier;
  }

  public TokenizedcardRequest source(String source) {
    this.source = source;
    return this;
  }

   /**
   * Source of the payment instrument. Possible Values: - ONFILE - TOKEN - ISSUER 
   * @return source
  **/
  @ApiModelProperty(value = "Source of the payment instrument. Possible Values: - ONFILE - TOKEN - ISSUER ")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

   /**
   * State of the network token or network token provision. Possible Values:   ACTIVE : Network token is active.   SUSPENDED : Network token is suspended. This state can change back to ACTIVE.   DELETED : This is a final state for a network token instance.   UNPROVISIONED : A previous network token. 
   * @return state
  **/
  @ApiModelProperty(example = "ACTIVE", value = "State of the network token or network token provision. Possible Values:   ACTIVE : Network token is active.   SUSPENDED : Network token is suspended. This state can change back to ACTIVE.   DELETED : This is a final state for a network token instance.   UNPROVISIONED : A previous network token. ")
  public String getState() {
    return state;
  }

   /**
   * Issuers state for the network token Possible Values: - INVALID_REQUEST : The network token provision request contained invalid data. - CARD_VERIFICATION_FAILED : The network token provision request contained data that could not be verified. - CARD_NOT_ELIGIBLE : Card can currently not be used with issuer for tokenization. - CARD_NOT_ALLOWED : Card can currently not be used with card association for tokenization. - DECLINED : Card can currently not be used with issuer for tokenization. - SERVICE_UNAVAILABLE : The network token service was unavailable or timed out. - SYSTEM_ERROR : An unexpected error occurred with network token service, check configuration. 
   * @return reason
  **/
  @ApiModelProperty(example = "ACTIVE", value = "Issuers state for the network token Possible Values: - INVALID_REQUEST : The network token provision request contained invalid data. - CARD_VERIFICATION_FAILED : The network token provision request contained data that could not be verified. - CARD_NOT_ELIGIBLE : Card can currently not be used with issuer for tokenization. - CARD_NOT_ALLOWED : Card can currently not be used with card association for tokenization. - DECLINED : Card can currently not be used with issuer for tokenization. - SERVICE_UNAVAILABLE : The network token service was unavailable or timed out. - SYSTEM_ERROR : An unexpected error occurred with network token service, check configuration. ")
  public String getReason() {
    return reason;
  }

   /**
   * The token requestor&#39;s network token for the provided PAN and consumer Id, if available. 
   * @return number
  **/
  @ApiModelProperty(value = "The token requestor's network token for the provided PAN and consumer Id, if available. ")
  public String getNumber() {
    return number;
  }

   /**
   * Two-digit month in which the network token expires. Format: &#x60;MM&#x60;. Possible Values: &#x60;01&#x60; through &#x60;12&#x60;. 
   * @return expirationMonth
  **/
  @ApiModelProperty(value = "Two-digit month in which the network token expires. Format: `MM`. Possible Values: `01` through `12`. ")
  public String getExpirationMonth() {
    return expirationMonth;
  }

   /**
   * Four-digit year in which the network token expires. Format: &#x60;YYYY&#x60;. 
   * @return expirationYear
  **/
  @ApiModelProperty(value = "Four-digit year in which the network token expires. Format: `YYYY`. ")
  public String getExpirationYear() {
    return expirationYear;
  }

  public TokenizedcardRequest type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of card (Card Network). Possible Values: - visa - mastercard - americanexpress 
   * @return type
  **/
  @ApiModelProperty(value = "The type of card (Card Network). Possible Values: - visa - mastercard - americanexpress ")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

   /**
   * Value generated by the card association to be used alongside the network token for processing a payment. 
   * @return cryptogram
  **/
  @ApiModelProperty(example = "CgAFRFYFPTFOfg5rj2ais9wQAAAAAM=", value = "Value generated by the card association to be used alongside the network token for processing a payment. ")
  public String getCryptogram() {
    return cryptogram;
  }

   /**
   * 4-digit number generated by the card association to be used alogside the network token for processing a payment. Only supported for Amex and SCOF. 
   * @return securityCode
  **/
  @ApiModelProperty(example = "4523", value = "4-digit number generated by the card association to be used alogside the network token for processing a payment. Only supported for Amex and SCOF. ")
  public String getSecurityCode() {
    return securityCode;
  }

   /**
   * Raw Electronic Commerce Indicator provided by the card association with the result of the cardholder authentication. 
   * @return eci
  **/
  @ApiModelProperty(value = "Raw Electronic Commerce Indicator provided by the card association with the result of the cardholder authentication. ")
  public String getEci() {
    return eci;
  }

   /**
   * 11-digit identifier that uniquely identifies the Token Requestor. 
   * @return requestorId
  **/
  @ApiModelProperty(value = "11-digit identifier that uniquely identifies the Token Requestor. ")
  public String getRequestorId() {
    return requestorId;
  }

   /**
   * Unique id to identify this PAN/ enrollment. 
   * @return enrollmentId
  **/
  @ApiModelProperty(value = "Unique id to identify this PAN/ enrollment. ")
  public String getEnrollmentId() {
    return enrollmentId;
  }

   /**
   * Unique ID for netwrok token. 
   * @return tokenReferenceId
  **/
  @ApiModelProperty(value = "Unique ID for netwrok token. ")
  public String getTokenReferenceId() {
    return tokenReferenceId;
  }

   /**
   * Payment account reference. 
   * @return paymentAccountReference
  **/
  @ApiModelProperty(value = "Payment account reference. ")
  public String getPaymentAccountReference() {
    return paymentAccountReference;
  }

  public TokenizedcardRequest card(Tmsv2TokenizedCardCard card) {
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @ApiModelProperty(value = "")
  public Tmsv2TokenizedCardCard getCard() {
    return card;
  }

  public void setCard(Tmsv2TokenizedCardCard card) {
    this.card = card;
  }

  public TokenizedcardRequest passcode(Tmsv2TokenizedCardPasscode passcode) {
    this.passcode = passcode;
    return this;
  }

   /**
   * Get passcode
   * @return passcode
  **/
  @ApiModelProperty(value = "")
  public Tmsv2TokenizedCardPasscode getPasscode() {
    return passcode;
  }

  public void setPasscode(Tmsv2TokenizedCardPasscode passcode) {
    this.passcode = passcode;
  }

  public TokenizedcardRequest metadata(Tmsv2TokenizedCardMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @ApiModelProperty(value = "")
  public Tmsv2TokenizedCardMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(Tmsv2TokenizedCardMetadata metadata) {
    this.metadata = metadata;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TokenizedcardRequest tokenizedcardRequest = (TokenizedcardRequest) o;
    return Objects.equals(this.links, tokenizedcardRequest.links) &&
        Objects.equals(this.id, tokenizedcardRequest.id) &&
        Objects.equals(this.object, tokenizedcardRequest.object) &&
        Objects.equals(this.accountReferenceId, tokenizedcardRequest.accountReferenceId) &&
        Objects.equals(this.consumerId, tokenizedcardRequest.consumerId) &&
        Objects.equals(this.createInstrumentIdentifier, tokenizedcardRequest.createInstrumentIdentifier) &&
        Objects.equals(this.source, tokenizedcardRequest.source) &&
        Objects.equals(this.state, tokenizedcardRequest.state) &&
        Objects.equals(this.reason, tokenizedcardRequest.reason) &&
        Objects.equals(this.number, tokenizedcardRequest.number) &&
        Objects.equals(this.expirationMonth, tokenizedcardRequest.expirationMonth) &&
        Objects.equals(this.expirationYear, tokenizedcardRequest.expirationYear) &&
        Objects.equals(this.type, tokenizedcardRequest.type) &&
        Objects.equals(this.cryptogram, tokenizedcardRequest.cryptogram) &&
        Objects.equals(this.securityCode, tokenizedcardRequest.securityCode) &&
        Objects.equals(this.eci, tokenizedcardRequest.eci) &&
        Objects.equals(this.requestorId, tokenizedcardRequest.requestorId) &&
        Objects.equals(this.enrollmentId, tokenizedcardRequest.enrollmentId) &&
        Objects.equals(this.tokenReferenceId, tokenizedcardRequest.tokenReferenceId) &&
        Objects.equals(this.paymentAccountReference, tokenizedcardRequest.paymentAccountReference) &&
        Objects.equals(this.card, tokenizedcardRequest.card) &&
        Objects.equals(this.passcode, tokenizedcardRequest.passcode) &&
        Objects.equals(this.metadata, tokenizedcardRequest.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, id, object, accountReferenceId, consumerId, createInstrumentIdentifier, source, state, reason, number, expirationMonth, expirationYear, type, cryptogram, securityCode, eci, requestorId, enrollmentId, tokenReferenceId, paymentAccountReference, card, passcode, metadata);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TokenizedcardRequest {\n");
    
    if (links != null) sb.append("    links: ").append(toIndentedString(links)).append("\n");
    if (id != null) sb.append("    id: ").append(toIndentedString(id)).append("\n");
    if (object != null) sb.append("    object: ").append(toIndentedString(object)).append("\n");
    if (accountReferenceId != null) sb.append("    accountReferenceId: ").append(toIndentedString(accountReferenceId)).append("\n");
    if (consumerId != null) sb.append("    consumerId: ").append(toIndentedString(consumerId)).append("\n");
    if (createInstrumentIdentifier != null) sb.append("    createInstrumentIdentifier: ").append(toIndentedString(createInstrumentIdentifier)).append("\n");
    if (source != null) sb.append("    source: ").append(toIndentedString(source)).append("\n");
    if (state != null) sb.append("    state: ").append(toIndentedString(state)).append("\n");
    if (reason != null) sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    if (number != null) sb.append("    number: ").append(toIndentedString(number)).append("\n");
    if (expirationMonth != null) sb.append("    expirationMonth: ").append(toIndentedString(expirationMonth)).append("\n");
    if (expirationYear != null) sb.append("    expirationYear: ").append(toIndentedString(expirationYear)).append("\n");
    if (type != null) sb.append("    type: ").append(toIndentedString(type)).append("\n");
    if (cryptogram != null) sb.append("    cryptogram: ").append(toIndentedString(cryptogram)).append("\n");
    if (securityCode != null) sb.append("    securityCode: ").append(toIndentedString(securityCode)).append("\n");
    if (eci != null) sb.append("    eci: ").append(toIndentedString(eci)).append("\n");
    if (requestorId != null) sb.append("    requestorId: ").append(toIndentedString(requestorId)).append("\n");
    if (enrollmentId != null) sb.append("    enrollmentId: ").append(toIndentedString(enrollmentId)).append("\n");
    if (tokenReferenceId != null) sb.append("    tokenReferenceId: ").append(toIndentedString(tokenReferenceId)).append("\n");
    if (paymentAccountReference != null) sb.append("    paymentAccountReference: ").append(toIndentedString(paymentAccountReference)).append("\n");
    if (card != null) sb.append("    card: ").append(toIndentedString(card)).append("\n");
    if (passcode != null) sb.append("    passcode: ").append(toIndentedString(passcode)).append("\n");
    if (metadata != null) sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

