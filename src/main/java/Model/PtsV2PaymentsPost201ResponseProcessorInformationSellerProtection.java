/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection
 */

public class PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection {
  @SerializedName("type")
  private String type = null;

  @SerializedName("eligibility")
  private String eligibility = null;

  @SerializedName("disputeCategories")
  private List<String> disputeCategories = null;

  @SerializedName("eligibilityType")
  private String eligibilityType = null;

  public PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The kind of seller protection in force for the transaction. This field is returned only when the protection eligibility value is set to ELIGIBLE or PARTIALLY_ELIGIBLE. Possible values - ITEM_NOT_RECEIVED_ELIGIBLE: Sellers are protected against claims for items not received. - UNAUTHORIZED_PAYMENT_ELIGIBLE: Sellers are protected against claims for unauthorized payments. One or both values can be returned. 
   * @return type
  **/
  @ApiModelProperty(value = "The kind of seller protection in force for the transaction. This field is returned only when the protection eligibility value is set to ELIGIBLE or PARTIALLY_ELIGIBLE. Possible values - ITEM_NOT_RECEIVED_ELIGIBLE: Sellers are protected against claims for items not received. - UNAUTHORIZED_PAYMENT_ELIGIBLE: Sellers are protected against claims for unauthorized payments. One or both values can be returned. ")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection eligibility(String eligibility) {
    this.eligibility = eligibility;
    return this;
  }

   /**
   * Indicates whether the transaction is eligible for seller protection. The values returned are described below. Possible values: - &#x60;ELIGIBLE&#x60; - &#x60;PARTIALLY_ELIGIBLE&#x60; - &#x60;INELIGIBLE&#x60; - &#x60;NOT_ELIGIBLE&#x60; 
   * @return eligibility
  **/
  @ApiModelProperty(value = "Indicates whether the transaction is eligible for seller protection. The values returned are described below. Possible values: - `ELIGIBLE` - `PARTIALLY_ELIGIBLE` - `INELIGIBLE` - `NOT_ELIGIBLE` ")
  public String getEligibility() {
    return eligibility;
  }

  public void setEligibility(String eligibility) {
    this.eligibility = eligibility;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection disputeCategories(List<String> disputeCategories) {
    this.disputeCategories = disputeCategories;
    return this;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection addDisputeCategoriesItem(String disputeCategoriesItem) {
    if (this.disputeCategories == null) {
      this.disputeCategories = new ArrayList<String>();
    }
    this.disputeCategories.add(disputeCategoriesItem);
    return this;
  }

   /**
   * An array of conditions that are covered for the transaction. 
   * @return disputeCategories
  **/
  @ApiModelProperty(value = "An array of conditions that are covered for the transaction. ")
  public List<String> getDisputeCategories() {
    return disputeCategories;
  }

  public void setDisputeCategories(List<String> disputeCategories) {
    this.disputeCategories = disputeCategories;
  }

  public PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection eligibilityType(String eligibilityType) {
    this.eligibilityType = eligibilityType;
    return this;
  }

   /**
   * The kind of seller protection in force for the transaction. This field is returned only when the protection_eligibility property is set to ELIGIBLE or PARTIALLY_ELIGIBLE. Possible values: - &#x60;ITEM_NOT_RECEIVED_ELIGIBLE: Sellers are protected against claims for items not received.&#x60; - &#x60;UNAUTHORIZED_PAYMENT_ELIGIBLE: Sellers are protected against claims for unauthorized payments.&#x60; One or both values can be returned. 
   * @return eligibilityType
  **/
  @ApiModelProperty(value = "The kind of seller protection in force for the transaction. This field is returned only when the protection_eligibility property is set to ELIGIBLE or PARTIALLY_ELIGIBLE. Possible values: - `ITEM_NOT_RECEIVED_ELIGIBLE: Sellers are protected against claims for items not received.` - `UNAUTHORIZED_PAYMENT_ELIGIBLE: Sellers are protected against claims for unauthorized payments.` One or both values can be returned. ")
  public String getEligibilityType() {
    return eligibilityType;
  }

  public void setEligibilityType(String eligibilityType) {
    this.eligibilityType = eligibilityType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection ptsV2PaymentsPost201ResponseProcessorInformationSellerProtection = (PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection) o;
    return Objects.equals(this.type, ptsV2PaymentsPost201ResponseProcessorInformationSellerProtection.type) &&
        Objects.equals(this.eligibility, ptsV2PaymentsPost201ResponseProcessorInformationSellerProtection.eligibility) &&
        Objects.equals(this.disputeCategories, ptsV2PaymentsPost201ResponseProcessorInformationSellerProtection.disputeCategories) &&
        Objects.equals(this.eligibilityType, ptsV2PaymentsPost201ResponseProcessorInformationSellerProtection.eligibilityType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, eligibility, disputeCategories, eligibilityType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PtsV2PaymentsPost201ResponseProcessorInformationSellerProtection {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    eligibility: ").append(toIndentedString(eligibility)).append("\n");
    sb.append("    disputeCategories: ").append(toIndentedString(disputeCategories)).append("\n");
    sb.append("    eligibilityType: ").append(toIndentedString(eligibilityType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

