/*
 * CyberSource Flex API
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import Model.InlineResponse201ProcessorInformationAvs;
import Model.InlineResponse201ProcessorInformationCardVerification;
import Model.InlineResponse201ProcessorInformationConsumerAuthenticationResponse;
import Model.InlineResponse201ProcessorInformationCustomer;
import Model.InlineResponse201ProcessorInformationElectronicVerificationResults;
import Model.InlineResponse201ProcessorInformationIssuer;
import Model.InlineResponse201ProcessorInformationMerchantAdvice;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * InlineResponse201ProcessorInformation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-10-31T18:13:53.731+05:30")
public class InlineResponse201ProcessorInformation {
  @SerializedName("approvalCode")
  private String approvalCode = null;

  @SerializedName("transactionId")
  private String transactionId = null;

  @SerializedName("networkTransactionId")
  private String networkTransactionId = null;

  @SerializedName("providerTransactionId")
  private String providerTransactionId = null;

  @SerializedName("responseCode")
  private String responseCode = null;

  @SerializedName("responseCodeSource")
  private String responseCodeSource = null;

  @SerializedName("responseDetails")
  private String responseDetails = null;

  @SerializedName("responseCategoryCode")
  private String responseCategoryCode = null;

  @SerializedName("forwardedAcquirerCode")
  private String forwardedAcquirerCode = null;

  @SerializedName("avs")
  private InlineResponse201ProcessorInformationAvs avs = null;

  @SerializedName("cardVerification")
  private InlineResponse201ProcessorInformationCardVerification cardVerification = null;

  @SerializedName("merchantAdvice")
  private InlineResponse201ProcessorInformationMerchantAdvice merchantAdvice = null;

  @SerializedName("electronicVerificationResults")
  private InlineResponse201ProcessorInformationElectronicVerificationResults electronicVerificationResults = null;

  @SerializedName("customer")
  private InlineResponse201ProcessorInformationCustomer customer = null;

  @SerializedName("consumerAuthenticationResponse")
  private InlineResponse201ProcessorInformationConsumerAuthenticationResponse consumerAuthenticationResponse = null;

  @SerializedName("issuer")
  private InlineResponse201ProcessorInformationIssuer issuer = null;

  @SerializedName("systemTraceAuditNumber")
  private String systemTraceAuditNumber = null;

  @SerializedName("paymentAccountReferenceNumber")
  private String paymentAccountReferenceNumber = null;

  @SerializedName("transactionIntegrityCode")
  private String transactionIntegrityCode = null;

  @SerializedName("amexVerbalAuthReferenceNumber")
  private String amexVerbalAuthReferenceNumber = null;

  @SerializedName("salesSlipNumber")
  private BigDecimal salesSlipNumber = null;

  @SerializedName("masterCardServiceCode")
  private String masterCardServiceCode = null;

  @SerializedName("masterCardServiceReplyCode")
  private String masterCardServiceReplyCode = null;

  @SerializedName("masterCardAuthenticationType")
  private String masterCardAuthenticationType = null;

  @SerializedName("name")
  private String name = null;

  public InlineResponse201ProcessorInformation approvalCode(String approvalCode) {
    this.approvalCode = approvalCode;
    return this;
  }

   /**
   * Authorization code. Returned only when the processor returns this value. 
   * @return approvalCode
  **/
  @ApiModelProperty(value = "Authorization code. Returned only when the processor returns this value. ")
  public String getApprovalCode() {
    return approvalCode;
  }

  public void setApprovalCode(String approvalCode) {
    this.approvalCode = approvalCode;
  }

  public InlineResponse201ProcessorInformation transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this  value. 
   * @return transactionId
  **/
  @ApiModelProperty(value = "Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this  value. ")
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }

  public InlineResponse201ProcessorInformation networkTransactionId(String networkTransactionId) {
    this.networkTransactionId = networkTransactionId;
    return this;
  }

   /**
   * Description of this field is not available.
   * @return networkTransactionId
  **/
  @ApiModelProperty(value = "Description of this field is not available.")
  public String getNetworkTransactionId() {
    return networkTransactionId;
  }

  public void setNetworkTransactionId(String networkTransactionId) {
    this.networkTransactionId = networkTransactionId;
  }

  public InlineResponse201ProcessorInformation providerTransactionId(String providerTransactionId) {
    this.providerTransactionId = providerTransactionId;
    return this;
  }

   /**
   * Description of this field is not available.
   * @return providerTransactionId
  **/
  @ApiModelProperty(value = "Description of this field is not available.")
  public String getProviderTransactionId() {
    return providerTransactionId;
  }

  public void setProviderTransactionId(String providerTransactionId) {
    this.providerTransactionId = providerTransactionId;
  }

  public InlineResponse201ProcessorInformation responseCode(String responseCode) {
    this.responseCode = responseCode;
    return this;
  }

   /**
   * For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  Important Do not use this field to evaluate the result of the authorization. 
   * @return responseCode
  **/
  @ApiModelProperty(value = "For most processors, this is the error message sent directly from the bank. Returned only when the processor returns this value.  Important Do not use this field to evaluate the result of the authorization. ")
  public String getResponseCode() {
    return responseCode;
  }

  public void setResponseCode(String responseCode) {
    this.responseCode = responseCode;
  }

  public InlineResponse201ProcessorInformation responseCodeSource(String responseCodeSource) {
    this.responseCodeSource = responseCodeSource;
    return this;
  }

   /**
   * Used by Visa only and contains the response source/reason code that identifies the source of the response decision. 
   * @return responseCodeSource
  **/
  @ApiModelProperty(value = "Used by Visa only and contains the response source/reason code that identifies the source of the response decision. ")
  public String getResponseCodeSource() {
    return responseCodeSource;
  }

  public void setResponseCodeSource(String responseCodeSource) {
    this.responseCodeSource = responseCodeSource;
  }

  public InlineResponse201ProcessorInformation responseDetails(String responseDetails) {
    this.responseDetails = responseDetails;
    return this;
  }

   /**
   * This field might contain information about a decline. This field is supported only for **CyberSource through VisaNet**. 
   * @return responseDetails
  **/
  @ApiModelProperty(value = "This field might contain information about a decline. This field is supported only for **CyberSource through VisaNet**. ")
  public String getResponseDetails() {
    return responseDetails;
  }

  public void setResponseDetails(String responseDetails) {
    this.responseDetails = responseDetails;
  }

  public InlineResponse201ProcessorInformation responseCategoryCode(String responseCategoryCode) {
    this.responseCategoryCode = responseCategoryCode;
    return this;
  }

   /**
   * Processor-defined response category code. The associated detail error code is in the auth_auth_response field or the auth_reversal_auth_ response field depending on which service you requested.  This field is supported only for:   - Japanese issuers  - Domestic transactions in Japan  - Comercio Latino—processor transaction ID required for troubleshooting  **Maximum length for processors**:   - Comercio Latino: 32  - All other processors: 3 
   * @return responseCategoryCode
  **/
  @ApiModelProperty(value = "Processor-defined response category code. The associated detail error code is in the auth_auth_response field or the auth_reversal_auth_ response field depending on which service you requested.  This field is supported only for:   - Japanese issuers  - Domestic transactions in Japan  - Comercio Latino—processor transaction ID required for troubleshooting  **Maximum length for processors**:   - Comercio Latino: 32  - All other processors: 3 ")
  public String getResponseCategoryCode() {
    return responseCategoryCode;
  }

  public void setResponseCategoryCode(String responseCategoryCode) {
    this.responseCategoryCode = responseCategoryCode;
  }

  public InlineResponse201ProcessorInformation forwardedAcquirerCode(String forwardedAcquirerCode) {
    this.forwardedAcquirerCode = forwardedAcquirerCode;
    return this;
  }

   /**
   * Name of the Japanese acquirer that processed the transaction. Returned only for CCS (CAFIS) and JCN Gateway. Please contact the CyberSource Japan Support Group for more information. 
   * @return forwardedAcquirerCode
  **/
  @ApiModelProperty(value = "Name of the Japanese acquirer that processed the transaction. Returned only for CCS (CAFIS) and JCN Gateway. Please contact the CyberSource Japan Support Group for more information. ")
  public String getForwardedAcquirerCode() {
    return forwardedAcquirerCode;
  }

  public void setForwardedAcquirerCode(String forwardedAcquirerCode) {
    this.forwardedAcquirerCode = forwardedAcquirerCode;
  }

  public InlineResponse201ProcessorInformation avs(InlineResponse201ProcessorInformationAvs avs) {
    this.avs = avs;
    return this;
  }

   /**
   * Get avs
   * @return avs
  **/
  @ApiModelProperty(value = "")
  public InlineResponse201ProcessorInformationAvs getAvs() {
    return avs;
  }

  public void setAvs(InlineResponse201ProcessorInformationAvs avs) {
    this.avs = avs;
  }

  public InlineResponse201ProcessorInformation cardVerification(InlineResponse201ProcessorInformationCardVerification cardVerification) {
    this.cardVerification = cardVerification;
    return this;
  }

   /**
   * Get cardVerification
   * @return cardVerification
  **/
  @ApiModelProperty(value = "")
  public InlineResponse201ProcessorInformationCardVerification getCardVerification() {
    return cardVerification;
  }

  public void setCardVerification(InlineResponse201ProcessorInformationCardVerification cardVerification) {
    this.cardVerification = cardVerification;
  }

  public InlineResponse201ProcessorInformation merchantAdvice(InlineResponse201ProcessorInformationMerchantAdvice merchantAdvice) {
    this.merchantAdvice = merchantAdvice;
    return this;
  }

   /**
   * Get merchantAdvice
   * @return merchantAdvice
  **/
  @ApiModelProperty(value = "")
  public InlineResponse201ProcessorInformationMerchantAdvice getMerchantAdvice() {
    return merchantAdvice;
  }

  public void setMerchantAdvice(InlineResponse201ProcessorInformationMerchantAdvice merchantAdvice) {
    this.merchantAdvice = merchantAdvice;
  }

  public InlineResponse201ProcessorInformation electronicVerificationResults(InlineResponse201ProcessorInformationElectronicVerificationResults electronicVerificationResults) {
    this.electronicVerificationResults = electronicVerificationResults;
    return this;
  }

   /**
   * Get electronicVerificationResults
   * @return electronicVerificationResults
  **/
  @ApiModelProperty(value = "")
  public InlineResponse201ProcessorInformationElectronicVerificationResults getElectronicVerificationResults() {
    return electronicVerificationResults;
  }

  public void setElectronicVerificationResults(InlineResponse201ProcessorInformationElectronicVerificationResults electronicVerificationResults) {
    this.electronicVerificationResults = electronicVerificationResults;
  }

  public InlineResponse201ProcessorInformation customer(InlineResponse201ProcessorInformationCustomer customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Get customer
   * @return customer
  **/
  @ApiModelProperty(value = "")
  public InlineResponse201ProcessorInformationCustomer getCustomer() {
    return customer;
  }

  public void setCustomer(InlineResponse201ProcessorInformationCustomer customer) {
    this.customer = customer;
  }

  public InlineResponse201ProcessorInformation consumerAuthenticationResponse(InlineResponse201ProcessorInformationConsumerAuthenticationResponse consumerAuthenticationResponse) {
    this.consumerAuthenticationResponse = consumerAuthenticationResponse;
    return this;
  }

   /**
   * Get consumerAuthenticationResponse
   * @return consumerAuthenticationResponse
  **/
  @ApiModelProperty(value = "")
  public InlineResponse201ProcessorInformationConsumerAuthenticationResponse getConsumerAuthenticationResponse() {
    return consumerAuthenticationResponse;
  }

  public void setConsumerAuthenticationResponse(InlineResponse201ProcessorInformationConsumerAuthenticationResponse consumerAuthenticationResponse) {
    this.consumerAuthenticationResponse = consumerAuthenticationResponse;
  }

  public InlineResponse201ProcessorInformation issuer(InlineResponse201ProcessorInformationIssuer issuer) {
    this.issuer = issuer;
    return this;
  }

   /**
   * Get issuer
   * @return issuer
  **/
  @ApiModelProperty(value = "")
  public InlineResponse201ProcessorInformationIssuer getIssuer() {
    return issuer;
  }

  public void setIssuer(InlineResponse201ProcessorInformationIssuer issuer) {
    this.issuer = issuer;
  }

  public InlineResponse201ProcessorInformation systemTraceAuditNumber(String systemTraceAuditNumber) {
    this.systemTraceAuditNumber = systemTraceAuditNumber;
    return this;
  }

   /**
   * This field is returned only for **American Express Direct** and **CyberSource through VisaNet**.  **American Express Direct**  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  **CyberSource through VisaNet**  System trace number that must be printed on the customer’s receipt. 
   * @return systemTraceAuditNumber
  **/
  @ApiModelProperty(value = "This field is returned only for **American Express Direct** and **CyberSource through VisaNet**.  **American Express Direct**  System trace audit number (STAN). This value identifies the transaction and is useful when investigating a chargeback dispute.  **CyberSource through VisaNet**  System trace number that must be printed on the customer’s receipt. ")
  public String getSystemTraceAuditNumber() {
    return systemTraceAuditNumber;
  }

  public void setSystemTraceAuditNumber(String systemTraceAuditNumber) {
    this.systemTraceAuditNumber = systemTraceAuditNumber;
  }

  public InlineResponse201ProcessorInformation paymentAccountReferenceNumber(String paymentAccountReferenceNumber) {
    this.paymentAccountReferenceNumber = paymentAccountReferenceNumber;
    return this;
  }

   /**
   * Visa-generated reference number that identifies a card-present transaction for which youprovided one of the following:   - Visa primary account number (PAN)  - Visa-generated token for a PAN  This reference number serves as a link to the cardholder account and to all transactions for that account. 
   * @return paymentAccountReferenceNumber
  **/
  @ApiModelProperty(value = "Visa-generated reference number that identifies a card-present transaction for which youprovided one of the following:   - Visa primary account number (PAN)  - Visa-generated token for a PAN  This reference number serves as a link to the cardholder account and to all transactions for that account. ")
  public String getPaymentAccountReferenceNumber() {
    return paymentAccountReferenceNumber;
  }

  public void setPaymentAccountReferenceNumber(String paymentAccountReferenceNumber) {
    this.paymentAccountReferenceNumber = paymentAccountReferenceNumber;
  }

  public InlineResponse201ProcessorInformation transactionIntegrityCode(String transactionIntegrityCode) {
    this.transactionIntegrityCode = transactionIntegrityCode;
    return this;
  }

   /**
   * Transaction integrity classification provided by Mastercard. This value specifies Mastercard’s evaluation of the transaction’s safety and security. This field is returned only for **CyberSource through VisaNet**.  For card-present transactions, possible values:   - **A1**: EMV or token in a secure, trusted environment  - **B1**: EMV or chip equivalent  - **C1**: Magnetic stripe  - **E1**: Key entered  - **U0**: Unclassified  For card-not-present transactions, possible values:   - **A2**: Digital transactions  - **B2**: Authenticated checkout  - **C2**: Transaction validation  - **D2**: Enhanced data  - **E2**: Generic messaging  - **U0**: Unclassified  For information about these values, contact Mastercard or your acquirer. 
   * @return transactionIntegrityCode
  **/
  @ApiModelProperty(value = "Transaction integrity classification provided by Mastercard. This value specifies Mastercard’s evaluation of the transaction’s safety and security. This field is returned only for **CyberSource through VisaNet**.  For card-present transactions, possible values:   - **A1**: EMV or token in a secure, trusted environment  - **B1**: EMV or chip equivalent  - **C1**: Magnetic stripe  - **E1**: Key entered  - **U0**: Unclassified  For card-not-present transactions, possible values:   - **A2**: Digital transactions  - **B2**: Authenticated checkout  - **C2**: Transaction validation  - **D2**: Enhanced data  - **E2**: Generic messaging  - **U0**: Unclassified  For information about these values, contact Mastercard or your acquirer. ")
  public String getTransactionIntegrityCode() {
    return transactionIntegrityCode;
  }

  public void setTransactionIntegrityCode(String transactionIntegrityCode) {
    this.transactionIntegrityCode = transactionIntegrityCode;
  }

  public InlineResponse201ProcessorInformation amexVerbalAuthReferenceNumber(String amexVerbalAuthReferenceNumber) {
    this.amexVerbalAuthReferenceNumber = amexVerbalAuthReferenceNumber;
    return this;
  }

   /**
   * Referral response number for a verbal authorization with FDMS Nashville when using an American Express card. Give this number to American Express when you call them for the verbal authorization. 
   * @return amexVerbalAuthReferenceNumber
  **/
  @ApiModelProperty(value = "Referral response number for a verbal authorization with FDMS Nashville when using an American Express card. Give this number to American Express when you call them for the verbal authorization. ")
  public String getAmexVerbalAuthReferenceNumber() {
    return amexVerbalAuthReferenceNumber;
  }

  public void setAmexVerbalAuthReferenceNumber(String amexVerbalAuthReferenceNumber) {
    this.amexVerbalAuthReferenceNumber = amexVerbalAuthReferenceNumber;
  }

  public InlineResponse201ProcessorInformation salesSlipNumber(BigDecimal salesSlipNumber) {
    this.salesSlipNumber = salesSlipNumber;
    return this;
  }

   /**
   * Transaction identifier that CyberSource generates. You have the option of printing the sales slip number on the receipt.  This field is supported only for **JCN Gateway**. 
   * maximum: 99999
   * @return salesSlipNumber
  **/
  @ApiModelProperty(value = "Transaction identifier that CyberSource generates. You have the option of printing the sales slip number on the receipt.  This field is supported only for **JCN Gateway**. ")
  public BigDecimal getSalesSlipNumber() {
    return salesSlipNumber;
  }

  public void setSalesSlipNumber(BigDecimal salesSlipNumber) {
    this.salesSlipNumber = salesSlipNumber;
  }

  public InlineResponse201ProcessorInformation masterCardServiceCode(String masterCardServiceCode) {
    this.masterCardServiceCode = masterCardServiceCode;
    return this;
  }

   /**
   * Mastercard service that was used for the transaction. Mastercard provides this value to CyberSource.  Possible value:  - 53: Mastercard card-on-file token service 
   * @return masterCardServiceCode
  **/
  @ApiModelProperty(value = "Mastercard service that was used for the transaction. Mastercard provides this value to CyberSource.  Possible value:  - 53: Mastercard card-on-file token service ")
  public String getMasterCardServiceCode() {
    return masterCardServiceCode;
  }

  public void setMasterCardServiceCode(String masterCardServiceCode) {
    this.masterCardServiceCode = masterCardServiceCode;
  }

  public InlineResponse201ProcessorInformation masterCardServiceReplyCode(String masterCardServiceReplyCode) {
    this.masterCardServiceReplyCode = masterCardServiceReplyCode;
    return this;
  }

   /**
   * Result of the Mastercard card-on-file token service. Mastercard provides this value to CyberSource.  Possible values:   - **C**: Service completed successfully.  - **F**: One of the following:    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 81 for an authorization or      authorization reversal.    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 01 for a tokenized request.    - Token requestor ID is missing or formatted incorrectly.  - **I**: One of the following:    - Invalid token requestor ID.    - Suspended or deactivated token.    - Invalid token (not in mapping table).  - **T**: Invalid combination of token requestor ID and token.  - **U**: Expired token.  - **W**: Primary account number (PAN) listed in electronic warning bulletin.  Note This field is returned only for **CyberSource through VisaNet**. 
   * @return masterCardServiceReplyCode
  **/
  @ApiModelProperty(value = "Result of the Mastercard card-on-file token service. Mastercard provides this value to CyberSource.  Possible values:   - **C**: Service completed successfully.  - **F**: One of the following:    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 81 for an authorization or      authorization reversal.    - Incorrect Mastercard POS entry mode. The Mastercard POS entry mode should be 01 for a tokenized request.    - Token requestor ID is missing or formatted incorrectly.  - **I**: One of the following:    - Invalid token requestor ID.    - Suspended or deactivated token.    - Invalid token (not in mapping table).  - **T**: Invalid combination of token requestor ID and token.  - **U**: Expired token.  - **W**: Primary account number (PAN) listed in electronic warning bulletin.  Note This field is returned only for **CyberSource through VisaNet**. ")
  public String getMasterCardServiceReplyCode() {
    return masterCardServiceReplyCode;
  }

  public void setMasterCardServiceReplyCode(String masterCardServiceReplyCode) {
    this.masterCardServiceReplyCode = masterCardServiceReplyCode;
  }

  public InlineResponse201ProcessorInformation masterCardAuthenticationType(String masterCardAuthenticationType) {
    this.masterCardAuthenticationType = masterCardAuthenticationType;
    return this;
  }

   /**
   * Type of authentication for which the transaction qualifies as determined by the Mastercard authentication service, which confirms the identity of the cardholder. Mastercard provides this value to CyberSource.  Possible values:   - **1**: Transaction qualifies for Mastercard authentication type 1.  - **2**: Transaction qualifies for Mastercard authentication type 2. 
   * @return masterCardAuthenticationType
  **/
  @ApiModelProperty(value = "Type of authentication for which the transaction qualifies as determined by the Mastercard authentication service, which confirms the identity of the cardholder. Mastercard provides this value to CyberSource.  Possible values:   - **1**: Transaction qualifies for Mastercard authentication type 1.  - **2**: Transaction qualifies for Mastercard authentication type 2. ")
  public String getMasterCardAuthenticationType() {
    return masterCardAuthenticationType;
  }

  public void setMasterCardAuthenticationType(String masterCardAuthenticationType) {
    this.masterCardAuthenticationType = masterCardAuthenticationType;
  }

  public InlineResponse201ProcessorInformation name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the Processor. 
   * @return name
  **/
  @ApiModelProperty(value = "Name of the Processor. ")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse201ProcessorInformation inlineResponse201ProcessorInformation = (InlineResponse201ProcessorInformation) o;
    return Objects.equals(this.approvalCode, inlineResponse201ProcessorInformation.approvalCode) &&
        Objects.equals(this.transactionId, inlineResponse201ProcessorInformation.transactionId) &&
        Objects.equals(this.networkTransactionId, inlineResponse201ProcessorInformation.networkTransactionId) &&
        Objects.equals(this.providerTransactionId, inlineResponse201ProcessorInformation.providerTransactionId) &&
        Objects.equals(this.responseCode, inlineResponse201ProcessorInformation.responseCode) &&
        Objects.equals(this.responseCodeSource, inlineResponse201ProcessorInformation.responseCodeSource) &&
        Objects.equals(this.responseDetails, inlineResponse201ProcessorInformation.responseDetails) &&
        Objects.equals(this.responseCategoryCode, inlineResponse201ProcessorInformation.responseCategoryCode) &&
        Objects.equals(this.forwardedAcquirerCode, inlineResponse201ProcessorInformation.forwardedAcquirerCode) &&
        Objects.equals(this.avs, inlineResponse201ProcessorInformation.avs) &&
        Objects.equals(this.cardVerification, inlineResponse201ProcessorInformation.cardVerification) &&
        Objects.equals(this.merchantAdvice, inlineResponse201ProcessorInformation.merchantAdvice) &&
        Objects.equals(this.electronicVerificationResults, inlineResponse201ProcessorInformation.electronicVerificationResults) &&
        Objects.equals(this.customer, inlineResponse201ProcessorInformation.customer) &&
        Objects.equals(this.consumerAuthenticationResponse, inlineResponse201ProcessorInformation.consumerAuthenticationResponse) &&
        Objects.equals(this.issuer, inlineResponse201ProcessorInformation.issuer) &&
        Objects.equals(this.systemTraceAuditNumber, inlineResponse201ProcessorInformation.systemTraceAuditNumber) &&
        Objects.equals(this.paymentAccountReferenceNumber, inlineResponse201ProcessorInformation.paymentAccountReferenceNumber) &&
        Objects.equals(this.transactionIntegrityCode, inlineResponse201ProcessorInformation.transactionIntegrityCode) &&
        Objects.equals(this.amexVerbalAuthReferenceNumber, inlineResponse201ProcessorInformation.amexVerbalAuthReferenceNumber) &&
        Objects.equals(this.salesSlipNumber, inlineResponse201ProcessorInformation.salesSlipNumber) &&
        Objects.equals(this.masterCardServiceCode, inlineResponse201ProcessorInformation.masterCardServiceCode) &&
        Objects.equals(this.masterCardServiceReplyCode, inlineResponse201ProcessorInformation.masterCardServiceReplyCode) &&
        Objects.equals(this.masterCardAuthenticationType, inlineResponse201ProcessorInformation.masterCardAuthenticationType) &&
        Objects.equals(this.name, inlineResponse201ProcessorInformation.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(approvalCode, transactionId, networkTransactionId, providerTransactionId, responseCode, responseCodeSource, responseDetails, responseCategoryCode, forwardedAcquirerCode, avs, cardVerification, merchantAdvice, electronicVerificationResults, customer, consumerAuthenticationResponse, issuer, systemTraceAuditNumber, paymentAccountReferenceNumber, transactionIntegrityCode, amexVerbalAuthReferenceNumber, salesSlipNumber, masterCardServiceCode, masterCardServiceReplyCode, masterCardAuthenticationType, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse201ProcessorInformation {\n");
    
    sb.append("    approvalCode: ").append(toIndentedString(approvalCode)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    networkTransactionId: ").append(toIndentedString(networkTransactionId)).append("\n");
    sb.append("    providerTransactionId: ").append(toIndentedString(providerTransactionId)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    responseCodeSource: ").append(toIndentedString(responseCodeSource)).append("\n");
    sb.append("    responseDetails: ").append(toIndentedString(responseDetails)).append("\n");
    sb.append("    responseCategoryCode: ").append(toIndentedString(responseCategoryCode)).append("\n");
    sb.append("    forwardedAcquirerCode: ").append(toIndentedString(forwardedAcquirerCode)).append("\n");
    sb.append("    avs: ").append(toIndentedString(avs)).append("\n");
    sb.append("    cardVerification: ").append(toIndentedString(cardVerification)).append("\n");
    sb.append("    merchantAdvice: ").append(toIndentedString(merchantAdvice)).append("\n");
    sb.append("    electronicVerificationResults: ").append(toIndentedString(electronicVerificationResults)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    consumerAuthenticationResponse: ").append(toIndentedString(consumerAuthenticationResponse)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    systemTraceAuditNumber: ").append(toIndentedString(systemTraceAuditNumber)).append("\n");
    sb.append("    paymentAccountReferenceNumber: ").append(toIndentedString(paymentAccountReferenceNumber)).append("\n");
    sb.append("    transactionIntegrityCode: ").append(toIndentedString(transactionIntegrityCode)).append("\n");
    sb.append("    amexVerbalAuthReferenceNumber: ").append(toIndentedString(amexVerbalAuthReferenceNumber)).append("\n");
    sb.append("    salesSlipNumber: ").append(toIndentedString(salesSlipNumber)).append("\n");
    sb.append("    masterCardServiceCode: ").append(toIndentedString(masterCardServiceCode)).append("\n");
    sb.append("    masterCardServiceReplyCode: ").append(toIndentedString(masterCardServiceReplyCode)).append("\n");
    sb.append("    masterCardAuthenticationType: ").append(toIndentedString(masterCardAuthenticationType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

