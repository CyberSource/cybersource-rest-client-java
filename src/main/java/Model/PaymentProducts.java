/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import Model.PaymentProductsCardPresentConnect;
import Model.PaymentProductsCardProcessing;
import Model.PaymentProductsCurrencyConversion;
import Model.PaymentProductsCybsReadyTerminal;
import Model.PaymentProductsDifferentialFee;
import Model.PaymentProductsDigitalPayments;
import Model.PaymentProductsECheck;
import Model.PaymentProductsPayerAuthentication;
import Model.PaymentProductsPayouts;
import Model.PaymentProductsSecureAcceptance;
import Model.PaymentProductsTax;
import Model.PaymentProductsVirtualTerminal;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PaymentProducts
 */

public class PaymentProducts {
  @SerializedName("cardProcessing")
  private PaymentProductsCardProcessing cardProcessing = null;

  @SerializedName("cardPresentConnect")
  private PaymentProductsCardPresentConnect cardPresentConnect = null;

  @SerializedName("cybsReadyTerminal")
  private PaymentProductsCybsReadyTerminal cybsReadyTerminal = null;

  @SerializedName("eCheck")
  private PaymentProductsECheck eCheck = null;

  @SerializedName("payerAuthentication")
  private PaymentProductsPayerAuthentication payerAuthentication = null;

  @SerializedName("digitalPayments")
  private PaymentProductsDigitalPayments digitalPayments = null;

  @SerializedName("secureAcceptance")
  private PaymentProductsSecureAcceptance secureAcceptance = null;

  @SerializedName("virtualTerminal")
  private PaymentProductsVirtualTerminal virtualTerminal = null;

  @SerializedName("currencyConversion")
  private PaymentProductsCurrencyConversion currencyConversion = null;

  @SerializedName("tax")
  private PaymentProductsTax tax = null;

  @SerializedName("customerInvoicing")
  private PaymentProductsTax customerInvoicing = null;

  @SerializedName("recurringBilling")
  private PaymentProductsTax recurringBilling = null;

  @SerializedName("paymentOrchestration")
  private PaymentProductsTax paymentOrchestration = null;

  @SerializedName("payouts")
  private PaymentProductsPayouts payouts = null;

  @SerializedName("differentialFee")
  private PaymentProductsDifferentialFee differentialFee = null;

  @SerializedName("payByLink")
  private PaymentProductsTax payByLink = null;

  @SerializedName("unifiedCheckout")
  private PaymentProductsTax unifiedCheckout = null;

  public PaymentProducts cardProcessing(PaymentProductsCardProcessing cardProcessing) {
    this.cardProcessing = cardProcessing;
    return this;
  }

   /**
   * Get cardProcessing
   * @return cardProcessing
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsCardProcessing getCardProcessing() {
    return cardProcessing;
  }

  public void setCardProcessing(PaymentProductsCardProcessing cardProcessing) {
    this.cardProcessing = cardProcessing;
  }

  public PaymentProducts cardPresentConnect(PaymentProductsCardPresentConnect cardPresentConnect) {
    this.cardPresentConnect = cardPresentConnect;
    return this;
  }

   /**
   * Get cardPresentConnect
   * @return cardPresentConnect
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsCardPresentConnect getCardPresentConnect() {
    return cardPresentConnect;
  }

  public void setCardPresentConnect(PaymentProductsCardPresentConnect cardPresentConnect) {
    this.cardPresentConnect = cardPresentConnect;
  }

  public PaymentProducts cybsReadyTerminal(PaymentProductsCybsReadyTerminal cybsReadyTerminal) {
    this.cybsReadyTerminal = cybsReadyTerminal;
    return this;
  }

   /**
   * Get cybsReadyTerminal
   * @return cybsReadyTerminal
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsCybsReadyTerminal getCybsReadyTerminal() {
    return cybsReadyTerminal;
  }

  public void setCybsReadyTerminal(PaymentProductsCybsReadyTerminal cybsReadyTerminal) {
    this.cybsReadyTerminal = cybsReadyTerminal;
  }

  public PaymentProducts eCheck(PaymentProductsECheck eCheck) {
    this.eCheck = eCheck;
    return this;
  }

   /**
   * Get eCheck
   * @return eCheck
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsECheck getECheck() {
    return eCheck;
  }

  public void setECheck(PaymentProductsECheck eCheck) {
    this.eCheck = eCheck;
  }

  public PaymentProducts payerAuthentication(PaymentProductsPayerAuthentication payerAuthentication) {
    this.payerAuthentication = payerAuthentication;
    return this;
  }

   /**
   * Get payerAuthentication
   * @return payerAuthentication
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsPayerAuthentication getPayerAuthentication() {
    return payerAuthentication;
  }

  public void setPayerAuthentication(PaymentProductsPayerAuthentication payerAuthentication) {
    this.payerAuthentication = payerAuthentication;
  }

  public PaymentProducts digitalPayments(PaymentProductsDigitalPayments digitalPayments) {
    this.digitalPayments = digitalPayments;
    return this;
  }

   /**
   * Get digitalPayments
   * @return digitalPayments
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsDigitalPayments getDigitalPayments() {
    return digitalPayments;
  }

  public void setDigitalPayments(PaymentProductsDigitalPayments digitalPayments) {
    this.digitalPayments = digitalPayments;
  }

  public PaymentProducts secureAcceptance(PaymentProductsSecureAcceptance secureAcceptance) {
    this.secureAcceptance = secureAcceptance;
    return this;
  }

   /**
   * Get secureAcceptance
   * @return secureAcceptance
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsSecureAcceptance getSecureAcceptance() {
    return secureAcceptance;
  }

  public void setSecureAcceptance(PaymentProductsSecureAcceptance secureAcceptance) {
    this.secureAcceptance = secureAcceptance;
  }

  public PaymentProducts virtualTerminal(PaymentProductsVirtualTerminal virtualTerminal) {
    this.virtualTerminal = virtualTerminal;
    return this;
  }

   /**
   * Get virtualTerminal
   * @return virtualTerminal
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsVirtualTerminal getVirtualTerminal() {
    return virtualTerminal;
  }

  public void setVirtualTerminal(PaymentProductsVirtualTerminal virtualTerminal) {
    this.virtualTerminal = virtualTerminal;
  }

  public PaymentProducts currencyConversion(PaymentProductsCurrencyConversion currencyConversion) {
    this.currencyConversion = currencyConversion;
    return this;
  }

   /**
   * Get currencyConversion
   * @return currencyConversion
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsCurrencyConversion getCurrencyConversion() {
    return currencyConversion;
  }

  public void setCurrencyConversion(PaymentProductsCurrencyConversion currencyConversion) {
    this.currencyConversion = currencyConversion;
  }

  public PaymentProducts tax(PaymentProductsTax tax) {
    this.tax = tax;
    return this;
  }

   /**
   * Get tax
   * @return tax
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsTax getTax() {
    return tax;
  }

  public void setTax(PaymentProductsTax tax) {
    this.tax = tax;
  }

  public PaymentProducts customerInvoicing(PaymentProductsTax customerInvoicing) {
    this.customerInvoicing = customerInvoicing;
    return this;
  }

   /**
   * Get customerInvoicing
   * @return customerInvoicing
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsTax getCustomerInvoicing() {
    return customerInvoicing;
  }

  public void setCustomerInvoicing(PaymentProductsTax customerInvoicing) {
    this.customerInvoicing = customerInvoicing;
  }

  public PaymentProducts recurringBilling(PaymentProductsTax recurringBilling) {
    this.recurringBilling = recurringBilling;
    return this;
  }

   /**
   * Get recurringBilling
   * @return recurringBilling
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsTax getRecurringBilling() {
    return recurringBilling;
  }

  public void setRecurringBilling(PaymentProductsTax recurringBilling) {
    this.recurringBilling = recurringBilling;
  }

  public PaymentProducts paymentOrchestration(PaymentProductsTax paymentOrchestration) {
    this.paymentOrchestration = paymentOrchestration;
    return this;
  }

   /**
   * Get paymentOrchestration
   * @return paymentOrchestration
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsTax getPaymentOrchestration() {
    return paymentOrchestration;
  }

  public void setPaymentOrchestration(PaymentProductsTax paymentOrchestration) {
    this.paymentOrchestration = paymentOrchestration;
  }

  public PaymentProducts payouts(PaymentProductsPayouts payouts) {
    this.payouts = payouts;
    return this;
  }

   /**
   * Get payouts
   * @return payouts
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsPayouts getPayouts() {
    return payouts;
  }

  public void setPayouts(PaymentProductsPayouts payouts) {
    this.payouts = payouts;
  }

  public PaymentProducts differentialFee(PaymentProductsDifferentialFee differentialFee) {
    this.differentialFee = differentialFee;
    return this;
  }

   /**
   * Get differentialFee
   * @return differentialFee
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsDifferentialFee getDifferentialFee() {
    return differentialFee;
  }

  public void setDifferentialFee(PaymentProductsDifferentialFee differentialFee) {
    this.differentialFee = differentialFee;
  }

  public PaymentProducts payByLink(PaymentProductsTax payByLink) {
    this.payByLink = payByLink;
    return this;
  }

   /**
   * Get payByLink
   * @return payByLink
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsTax getPayByLink() {
    return payByLink;
  }

  public void setPayByLink(PaymentProductsTax payByLink) {
    this.payByLink = payByLink;
  }

  public PaymentProducts unifiedCheckout(PaymentProductsTax unifiedCheckout) {
    this.unifiedCheckout = unifiedCheckout;
    return this;
  }

   /**
   * Get unifiedCheckout
   * @return unifiedCheckout
  **/
  @ApiModelProperty(value = "")
  public PaymentProductsTax getUnifiedCheckout() {
    return unifiedCheckout;
  }

  public void setUnifiedCheckout(PaymentProductsTax unifiedCheckout) {
    this.unifiedCheckout = unifiedCheckout;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentProducts paymentProducts = (PaymentProducts) o;
    return Objects.equals(this.cardProcessing, paymentProducts.cardProcessing) &&
        Objects.equals(this.cardPresentConnect, paymentProducts.cardPresentConnect) &&
        Objects.equals(this.cybsReadyTerminal, paymentProducts.cybsReadyTerminal) &&
        Objects.equals(this.eCheck, paymentProducts.eCheck) &&
        Objects.equals(this.payerAuthentication, paymentProducts.payerAuthentication) &&
        Objects.equals(this.digitalPayments, paymentProducts.digitalPayments) &&
        Objects.equals(this.secureAcceptance, paymentProducts.secureAcceptance) &&
        Objects.equals(this.virtualTerminal, paymentProducts.virtualTerminal) &&
        Objects.equals(this.currencyConversion, paymentProducts.currencyConversion) &&
        Objects.equals(this.tax, paymentProducts.tax) &&
        Objects.equals(this.customerInvoicing, paymentProducts.customerInvoicing) &&
        Objects.equals(this.recurringBilling, paymentProducts.recurringBilling) &&
        Objects.equals(this.paymentOrchestration, paymentProducts.paymentOrchestration) &&
        Objects.equals(this.payouts, paymentProducts.payouts) &&
        Objects.equals(this.differentialFee, paymentProducts.differentialFee) &&
        Objects.equals(this.payByLink, paymentProducts.payByLink) &&
        Objects.equals(this.unifiedCheckout, paymentProducts.unifiedCheckout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardProcessing, cardPresentConnect, cybsReadyTerminal, eCheck, payerAuthentication, digitalPayments, secureAcceptance, virtualTerminal, currencyConversion, tax, customerInvoicing, recurringBilling, paymentOrchestration, payouts, differentialFee, payByLink, unifiedCheckout);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentProducts {\n");
    
    sb.append("    cardProcessing: ").append(toIndentedString(cardProcessing)).append("\n");
    sb.append("    cardPresentConnect: ").append(toIndentedString(cardPresentConnect)).append("\n");
    sb.append("    cybsReadyTerminal: ").append(toIndentedString(cybsReadyTerminal)).append("\n");
    sb.append("    eCheck: ").append(toIndentedString(eCheck)).append("\n");
    sb.append("    payerAuthentication: ").append(toIndentedString(payerAuthentication)).append("\n");
    sb.append("    digitalPayments: ").append(toIndentedString(digitalPayments)).append("\n");
    sb.append("    secureAcceptance: ").append(toIndentedString(secureAcceptance)).append("\n");
    sb.append("    virtualTerminal: ").append(toIndentedString(virtualTerminal)).append("\n");
    sb.append("    currencyConversion: ").append(toIndentedString(currencyConversion)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    customerInvoicing: ").append(toIndentedString(customerInvoicing)).append("\n");
    sb.append("    recurringBilling: ").append(toIndentedString(recurringBilling)).append("\n");
    sb.append("    paymentOrchestration: ").append(toIndentedString(paymentOrchestration)).append("\n");
    sb.append("    payouts: ").append(toIndentedString(payouts)).append("\n");
    sb.append("    differentialFee: ").append(toIndentedString(differentialFee)).append("\n");
    sb.append("    payByLink: ").append(toIndentedString(payByLink)).append("\n");
    sb.append("    unifiedCheckout: ").append(toIndentedString(unifiedCheckout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

