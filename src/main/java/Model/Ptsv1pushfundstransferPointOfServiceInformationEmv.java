/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Ptsv1pushfundstransferPointOfServiceInformationEmv
 */

public class Ptsv1pushfundstransferPointOfServiceInformationEmv {
  @SerializedName("cardSequenceNumber")
  private String cardSequenceNumber = null;

  public Ptsv1pushfundstransferPointOfServiceInformationEmv cardSequenceNumber(String cardSequenceNumber) {
    this.cardSequenceNumber = cardSequenceNumber;
    return this;
  }

   /**
   * Number assigned to a specific card when two or more cards are associated with the same primary account number.  This value enables issuers to distinguish among multiple cards that are linked to the same account.  This value can also act as a tracking tool when reissuing cards.  When this value is available, it is provided by the chip reader.  When the chip reader does not provide this value, do not include this field in your request.  When sequence number is not provided via this API field, the value is extracted from EMV tag 5F34 for Mastercard transactions. To enable this feature please call support.  Note Card present information about EMV applies only to credit card processing and PIN debit processing.  All other card present information applies only to credit card processing. 
   * @return cardSequenceNumber
  **/
  @ApiModelProperty(value = "Number assigned to a specific card when two or more cards are associated with the same primary account number.  This value enables issuers to distinguish among multiple cards that are linked to the same account.  This value can also act as a tracking tool when reissuing cards.  When this value is available, it is provided by the chip reader.  When the chip reader does not provide this value, do not include this field in your request.  When sequence number is not provided via this API field, the value is extracted from EMV tag 5F34 for Mastercard transactions. To enable this feature please call support.  Note Card present information about EMV applies only to credit card processing and PIN debit processing.  All other card present information applies only to credit card processing. ")
  public String getCardSequenceNumber() {
    return cardSequenceNumber;
  }

  public void setCardSequenceNumber(String cardSequenceNumber) {
    this.cardSequenceNumber = cardSequenceNumber;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ptsv1pushfundstransferPointOfServiceInformationEmv ptsv1pushfundstransferPointOfServiceInformationEmv = (Ptsv1pushfundstransferPointOfServiceInformationEmv) o;
    return Objects.equals(this.cardSequenceNumber, ptsv1pushfundstransferPointOfServiceInformationEmv.cardSequenceNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardSequenceNumber);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ptsv1pushfundstransferPointOfServiceInformationEmv {\n");
    
    sb.append("    cardSequenceNumber: ").append(toIndentedString(cardSequenceNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

