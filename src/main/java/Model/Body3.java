/*
 * CyberSource Flex API
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import Model.Tmsv1instrumentidentifiersLinks;
import Model.Tmsv1instrumentidentifiersMetadata;
import Model.Tmsv1paymentinstrumentsBankAccount;
import Model.Tmsv1paymentinstrumentsBillTo;
import Model.Tmsv1paymentinstrumentsBuyerInformation;
import Model.Tmsv1paymentinstrumentsCard;
import Model.Tmsv1paymentinstrumentsInstrumentIdentifier;
import Model.Tmsv1paymentinstrumentsMerchantInformation;
import Model.Tmsv1paymentinstrumentsProcessingInformation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Body3
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-11-08T03:47:28.632+05:30")
public class Body3 {
  @SerializedName("_links")
  private Tmsv1instrumentidentifiersLinks links = null;

  @SerializedName("id")
  private String id = null;

  /**
   * Describes type of token. For example: customer, paymentInstrument or instrumentIdentifier.
   */
  @JsonAdapter(ObjectEnum.Adapter.class)
  public enum ObjectEnum {
    PAYMENTINSTRUMENT("paymentInstrument");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ObjectEnum fromValue(String text) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ObjectEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ObjectEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ObjectEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ObjectEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("object")
  private ObjectEnum object = null;

  /**
   * Current state of the token.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    ACTIVE("ACTIVE"),
    
    CLOSED("CLOSED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  @SerializedName("bankAccount")
  private Tmsv1paymentinstrumentsBankAccount bankAccount = null;

  @SerializedName("card")
  private Tmsv1paymentinstrumentsCard card = null;

  @SerializedName("buyerInformation")
  private Tmsv1paymentinstrumentsBuyerInformation buyerInformation = null;

  @SerializedName("billTo")
  private Tmsv1paymentinstrumentsBillTo billTo = null;

  @SerializedName("processingInformation")
  private Tmsv1paymentinstrumentsProcessingInformation processingInformation = null;

  @SerializedName("merchantInformation")
  private Tmsv1paymentinstrumentsMerchantInformation merchantInformation = null;

  @SerializedName("metaData")
  private Tmsv1instrumentidentifiersMetadata metaData = null;

  @SerializedName("instrumentIdentifier")
  private Tmsv1paymentinstrumentsInstrumentIdentifier instrumentIdentifier = null;

  public Body3 links(Tmsv1instrumentidentifiersLinks links) {
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @ApiModelProperty(value = "")
  public Tmsv1instrumentidentifiersLinks getLinks() {
    return links;
  }

  public void setLinks(Tmsv1instrumentidentifiersLinks links) {
    this.links = links;
  }

   /**
   * Unique identification number assigned by CyberSource to the submitted request.
   * @return id
  **/
  @ApiModelProperty(example = "1234567890123456800", value = "Unique identification number assigned by CyberSource to the submitted request.")
  public String getId() {
    return id;
  }

   /**
   * Describes type of token. For example: customer, paymentInstrument or instrumentIdentifier.
   * @return object
  **/
  @ApiModelProperty(example = "instrumentIdentifier", value = "Describes type of token. For example: customer, paymentInstrument or instrumentIdentifier.")
  public ObjectEnum getObject() {
    return object;
  }

   /**
   * Current state of the token.
   * @return state
  **/
  @ApiModelProperty(example = "ACTIVE", value = "Current state of the token.")
  public StateEnum getState() {
    return state;
  }

  public Body3 bankAccount(Tmsv1paymentinstrumentsBankAccount bankAccount) {
    this.bankAccount = bankAccount;
    return this;
  }

   /**
   * Get bankAccount
   * @return bankAccount
  **/
  @ApiModelProperty(value = "")
  public Tmsv1paymentinstrumentsBankAccount getBankAccount() {
    return bankAccount;
  }

  public void setBankAccount(Tmsv1paymentinstrumentsBankAccount bankAccount) {
    this.bankAccount = bankAccount;
  }

  public Body3 card(Tmsv1paymentinstrumentsCard card) {
    this.card = card;
    return this;
  }

   /**
   * Get card
   * @return card
  **/
  @ApiModelProperty(value = "")
  public Tmsv1paymentinstrumentsCard getCard() {
    return card;
  }

  public void setCard(Tmsv1paymentinstrumentsCard card) {
    this.card = card;
  }

  public Body3 buyerInformation(Tmsv1paymentinstrumentsBuyerInformation buyerInformation) {
    this.buyerInformation = buyerInformation;
    return this;
  }

   /**
   * Get buyerInformation
   * @return buyerInformation
  **/
  @ApiModelProperty(value = "")
  public Tmsv1paymentinstrumentsBuyerInformation getBuyerInformation() {
    return buyerInformation;
  }

  public void setBuyerInformation(Tmsv1paymentinstrumentsBuyerInformation buyerInformation) {
    this.buyerInformation = buyerInformation;
  }

  public Body3 billTo(Tmsv1paymentinstrumentsBillTo billTo) {
    this.billTo = billTo;
    return this;
  }

   /**
   * Get billTo
   * @return billTo
  **/
  @ApiModelProperty(value = "")
  public Tmsv1paymentinstrumentsBillTo getBillTo() {
    return billTo;
  }

  public void setBillTo(Tmsv1paymentinstrumentsBillTo billTo) {
    this.billTo = billTo;
  }

  public Body3 processingInformation(Tmsv1paymentinstrumentsProcessingInformation processingInformation) {
    this.processingInformation = processingInformation;
    return this;
  }

   /**
   * Get processingInformation
   * @return processingInformation
  **/
  @ApiModelProperty(value = "")
  public Tmsv1paymentinstrumentsProcessingInformation getProcessingInformation() {
    return processingInformation;
  }

  public void setProcessingInformation(Tmsv1paymentinstrumentsProcessingInformation processingInformation) {
    this.processingInformation = processingInformation;
  }

  public Body3 merchantInformation(Tmsv1paymentinstrumentsMerchantInformation merchantInformation) {
    this.merchantInformation = merchantInformation;
    return this;
  }

   /**
   * Get merchantInformation
   * @return merchantInformation
  **/
  @ApiModelProperty(value = "")
  public Tmsv1paymentinstrumentsMerchantInformation getMerchantInformation() {
    return merchantInformation;
  }

  public void setMerchantInformation(Tmsv1paymentinstrumentsMerchantInformation merchantInformation) {
    this.merchantInformation = merchantInformation;
  }

  public Body3 metaData(Tmsv1instrumentidentifiersMetadata metaData) {
    this.metaData = metaData;
    return this;
  }

   /**
   * Get metaData
   * @return metaData
  **/
  @ApiModelProperty(value = "")
  public Tmsv1instrumentidentifiersMetadata getMetaData() {
    return metaData;
  }

  public void setMetaData(Tmsv1instrumentidentifiersMetadata metaData) {
    this.metaData = metaData;
  }

  public Body3 instrumentIdentifier(Tmsv1paymentinstrumentsInstrumentIdentifier instrumentIdentifier) {
    this.instrumentIdentifier = instrumentIdentifier;
    return this;
  }

   /**
   * Get instrumentIdentifier
   * @return instrumentIdentifier
  **/
  @ApiModelProperty(value = "")
  public Tmsv1paymentinstrumentsInstrumentIdentifier getInstrumentIdentifier() {
    return instrumentIdentifier;
  }

  public void setInstrumentIdentifier(Tmsv1paymentinstrumentsInstrumentIdentifier instrumentIdentifier) {
    this.instrumentIdentifier = instrumentIdentifier;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body3 body3 = (Body3) o;
    return Objects.equals(this.links, body3.links) &&
        Objects.equals(this.id, body3.id) &&
        Objects.equals(this.object, body3.object) &&
        Objects.equals(this.state, body3.state) &&
        Objects.equals(this.bankAccount, body3.bankAccount) &&
        Objects.equals(this.card, body3.card) &&
        Objects.equals(this.buyerInformation, body3.buyerInformation) &&
        Objects.equals(this.billTo, body3.billTo) &&
        Objects.equals(this.processingInformation, body3.processingInformation) &&
        Objects.equals(this.merchantInformation, body3.merchantInformation) &&
        Objects.equals(this.metaData, body3.metaData) &&
        Objects.equals(this.instrumentIdentifier, body3.instrumentIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, id, object, state, bankAccount, card, buyerInformation, billTo, processingInformation, merchantInformation, metaData, instrumentIdentifier);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body3 {\n");
    
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    object: ").append(toIndentedString(object)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
    sb.append("    card: ").append(toIndentedString(card)).append("\n");
    sb.append("    buyerInformation: ").append(toIndentedString(buyerInformation)).append("\n");
    sb.append("    billTo: ").append(toIndentedString(billTo)).append("\n");
    sb.append("    processingInformation: ").append(toIndentedString(processingInformation)).append("\n");
    sb.append("    merchantInformation: ").append(toIndentedString(merchantInformation)).append("\n");
    sb.append("    metaData: ").append(toIndentedString(metaData)).append("\n");
    sb.append("    instrumentIdentifier: ").append(toIndentedString(instrumentIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

