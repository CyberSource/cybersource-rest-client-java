/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InlineResponse2018ErrorInformation
 */

public class InlineResponse2018ErrorInformation {
  @SerializedName("reason")
  private String reason = null;

  @SerializedName("message")
  private String message = null;

  public InlineResponse2018ErrorInformation reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Only required when offer cannot be made. The reason of the status.  Possible values: - &#39;INVALID_MERCHANT_CONFIGURATION&#39; - &#39;NOT_ELIGIBLE&#39; - &#39;CURRENCY_NOT_CONFIGURED&#39; - &#39;BIN_UNKNOWN&#39; - &#39;CURRENCY_MATCH&#39; - &#39;CURRENCY_NOT_ALLOWED&#39; - &#39;LOOKUP_FAILED&#39; - &#39;EXCHANGE_RATE_NOT_FOUND&#39; - &#39;CARD_TYPE_NOT_ACCEPTED&#39; - &#39;INVALID_AMOUNT&#39; - &#39;INVALID_CARD&#39; - &#39;INVALID_CURRENCY&#39; - &#39;INVALID_TERMINAL&#39; - &#39;INVALID_ACQUIRER&#39; - &#39;SERVICE_DISABLED&#39; - &#39;DUPLICATE_REQUEST&#39; - &#39;UNKNOWN&#39; - &#39;PROCESSOR_ERROR&#39; 
   * @return reason
  **/
  @ApiModelProperty(value = "Only required when offer cannot be made. The reason of the status.  Possible values: - 'INVALID_MERCHANT_CONFIGURATION' - 'NOT_ELIGIBLE' - 'CURRENCY_NOT_CONFIGURED' - 'BIN_UNKNOWN' - 'CURRENCY_MATCH' - 'CURRENCY_NOT_ALLOWED' - 'LOOKUP_FAILED' - 'EXCHANGE_RATE_NOT_FOUND' - 'CARD_TYPE_NOT_ACCEPTED' - 'INVALID_AMOUNT' - 'INVALID_CARD' - 'INVALID_CURRENCY' - 'INVALID_TERMINAL' - 'INVALID_ACQUIRER' - 'SERVICE_DISABLED' - 'DUPLICATE_REQUEST' - 'UNKNOWN' - 'PROCESSOR_ERROR' ")
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public InlineResponse2018ErrorInformation message(String message) {
    this.message = message;
    return this;
  }

   /**
   * Only required when the requested action cannot be performed. Descriptive message to add more detail to the status E.g. not all cards are eligible for DCC, so it is not possible for DCC to be offered.
   * @return message
  **/
  @ApiModelProperty(value = "Only required when the requested action cannot be performed. Descriptive message to add more detail to the status E.g. not all cards are eligible for DCC, so it is not possible for DCC to be offered.")
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2018ErrorInformation inlineResponse2018ErrorInformation = (InlineResponse2018ErrorInformation) o;
    return Objects.equals(this.reason, inlineResponse2018ErrorInformation.reason) &&
        Objects.equals(this.message, inlineResponse2018ErrorInformation.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reason, message);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2018ErrorInformation {\n");
    
    if (reason != null) sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    if (message != null) sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

