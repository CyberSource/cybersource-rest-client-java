/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Riskv1authenticationsConsumerAuthenticationInformation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-06-07T16:51:14.356+05:30")
public class Riskv1authenticationsConsumerAuthenticationInformation {
  @SerializedName("alternateAuthenticationData")
  private String alternateAuthenticationData = null;

  @SerializedName("alternateAuthenticationDate")
  private String alternateAuthenticationDate = null;

  @SerializedName("alternateAuthenticationMethod")
  private String alternateAuthenticationMethod = null;

  @SerializedName("authenticationTransactionId")
  private String authenticationTransactionId = null;

  @SerializedName("challengeCode")
  private String challengeCode = null;

  @SerializedName("customerCardAlias")
  private String customerCardAlias = null;

  @SerializedName("defaultCard")
  private Boolean defaultCard = null;

  @SerializedName("installmentTotalCount")
  private Integer installmentTotalCount = null;

  @SerializedName("marketingOptIn")
  private Boolean marketingOptIn = null;

  @SerializedName("marketingSource")
  private String marketingSource = null;

  @SerializedName("mcc")
  private String mcc = null;

  @SerializedName("messageCategory")
  private String messageCategory = null;

  @SerializedName("npaCode")
  private String npaCode = null;

  @SerializedName("overridePaymentMethod")
  private String overridePaymentMethod = null;

  @SerializedName("productCode")
  private String productCode = null;

  @SerializedName("requestorId")
  private String requestorId = null;

  @SerializedName("requestorName")
  private String requestorName = null;

  @SerializedName("referenceId")
  private String referenceId = null;

  @SerializedName("transactionMode")
  private String transactionMode = null;

  public Riskv1authenticationsConsumerAuthenticationInformation alternateAuthenticationData(String alternateAuthenticationData) {
    this.alternateAuthenticationData = alternateAuthenticationData;
    return this;
  }

   /**
   * Data that documents and supports a specific authentication process. 
   * @return alternateAuthenticationData
  **/
  @ApiModelProperty(value = "Data that documents and supports a specific authentication process. ")
  public String getAlternateAuthenticationData() {
    return alternateAuthenticationData;
  }

  public void setAlternateAuthenticationData(String alternateAuthenticationData) {
    this.alternateAuthenticationData = alternateAuthenticationData;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation alternateAuthenticationDate(String alternateAuthenticationDate) {
    this.alternateAuthenticationDate = alternateAuthenticationDate;
    return this;
  }

   /**
   * Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM 
   * @return alternateAuthenticationDate
  **/
  @ApiModelProperty(value = "Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM ")
  public String getAlternateAuthenticationDate() {
    return alternateAuthenticationDate;
  }

  public void setAlternateAuthenticationDate(String alternateAuthenticationDate) {
    this.alternateAuthenticationDate = alternateAuthenticationDate;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation alternateAuthenticationMethod(String alternateAuthenticationMethod) {
    this.alternateAuthenticationMethod = alternateAuthenticationMethod;
    return this;
  }

   /**
   * Mechanism used by the cardholder to authenticate to the 3D Secure requestor. Possible values: - &#x60;01&#x60;: No authentication occurred - &#x60;02&#x60;: Login using merchant system credentials - &#x60;03&#x60;: Login using Federated ID - &#x60;04&#x60;: Login using FIDO Authenticator 
   * @return alternateAuthenticationMethod
  **/
  @ApiModelProperty(value = "Mechanism used by the cardholder to authenticate to the 3D Secure requestor. Possible values: - `01`: No authentication occurred - `02`: Login using merchant system credentials - `03`: Login using Federated ID - `04`: Login using FIDO Authenticator ")
  public String getAlternateAuthenticationMethod() {
    return alternateAuthenticationMethod;
  }

  public void setAlternateAuthenticationMethod(String alternateAuthenticationMethod) {
    this.alternateAuthenticationMethod = alternateAuthenticationMethod;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation authenticationTransactionId(String authenticationTransactionId) {
    this.authenticationTransactionId = authenticationTransactionId;
    return this;
  }

   /**
   * Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service. 
   * @return authenticationTransactionId
  **/
  @ApiModelProperty(value = "Payer authentication transaction identifier passed to link the check enrollment and validate authentication messages. **Note**: Required for Standard integration for enroll service. Required for Hybrid integration for validate service. ")
  public String getAuthenticationTransactionId() {
    return authenticationTransactionId;
  }

  public void setAuthenticationTransactionId(String authenticationTransactionId) {
    this.authenticationTransactionId = authenticationTransactionId;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation challengeCode(String challengeCode) {
    this.challengeCode = challengeCode;
    return this;
  }

   /**
   * Possible values: - &#x60;01&#x60;: No preference - &#x60;02&#x60;: No challenge request - &#x60;03&#x60;: Challenge requested (3D Secure requestor preference) - &#x60;04&#x60;: Challenge requested (mandate) - &#x60;05-79&#x60;: Reserved for EMVCo future use (values invalid until defined by EMVCo) - &#x60;80-99&#x60;: Reserved for DS use  For details, see &#x60;pa_challenge_code&#x60; field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) 
   * @return challengeCode
  **/
  @ApiModelProperty(value = "Possible values: - `01`: No preference - `02`: No challenge request - `03`: Challenge requested (3D Secure requestor preference) - `04`: Challenge requested (mandate) - `05-79`: Reserved for EMVCo future use (values invalid until defined by EMVCo) - `80-99`: Reserved for DS use  For details, see `pa_challenge_code` field description in [CyberSource Payer Authentication Using the SCMP API.] (https://apps.cybersource.com/library/documentation/dev_guides/Payer_Authentication_SCMP_API/html/wwhelp/wwhimpl/js/html/wwhelp.htm) ")
  public String getChallengeCode() {
    return challengeCode;
  }

  public void setChallengeCode(String challengeCode) {
    this.challengeCode = challengeCode;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation customerCardAlias(String customerCardAlias) {
    this.customerCardAlias = customerCardAlias;
    return this;
  }

   /**
   * An alias that uniquely identifies the customer&#39;s account and credit card on file. Note This field is required if Tokenization is enabled in the merchant profile settings. 
   * @return customerCardAlias
  **/
  @ApiModelProperty(value = "An alias that uniquely identifies the customer's account and credit card on file. Note This field is required if Tokenization is enabled in the merchant profile settings. ")
  public String getCustomerCardAlias() {
    return customerCardAlias;
  }

  public void setCustomerCardAlias(String customerCardAlias) {
    this.customerCardAlias = customerCardAlias;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation defaultCard(Boolean defaultCard) {
    this.defaultCard = defaultCard;
    return this;
  }

   /**
   * Indicates that the card being used is the one designated as the primary payment card for purchase. Recommended for Discover ProtectBuy. 
   * @return defaultCard
  **/
  @ApiModelProperty(value = "Indicates that the card being used is the one designated as the primary payment card for purchase. Recommended for Discover ProtectBuy. ")
  public Boolean getDefaultCard() {
    return defaultCard;
  }

  public void setDefaultCard(Boolean defaultCard) {
    this.defaultCard = defaultCard;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation installmentTotalCount(Integer installmentTotalCount) {
    this.installmentTotalCount = installmentTotalCount;
    return this;
  }

   /**
   * An integer value greater than 1 indicating the max number of permitted authorizations for installment payments. **Note** This is required if the merchant and cardholder have agreed to installment payments. 
   * @return installmentTotalCount
  **/
  @ApiModelProperty(value = "An integer value greater than 1 indicating the max number of permitted authorizations for installment payments. **Note** This is required if the merchant and cardholder have agreed to installment payments. ")
  public Integer getInstallmentTotalCount() {
    return installmentTotalCount;
  }

  public void setInstallmentTotalCount(Integer installmentTotalCount) {
    this.installmentTotalCount = installmentTotalCount;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation marketingOptIn(Boolean marketingOptIn) {
    this.marketingOptIn = marketingOptIn;
    return this;
  }

   /**
   * Indicates whether the customer has opted in for marketing offers. Recommended for Discover ProtectBuy. 
   * @return marketingOptIn
  **/
  @ApiModelProperty(value = "Indicates whether the customer has opted in for marketing offers. Recommended for Discover ProtectBuy. ")
  public Boolean getMarketingOptIn() {
    return marketingOptIn;
  }

  public void setMarketingOptIn(Boolean marketingOptIn) {
    this.marketingOptIn = marketingOptIn;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation marketingSource(String marketingSource) {
    this.marketingSource = marketingSource;
    return this;
  }

   /**
   * Indicates origin of the marketing offer. Recommended for Discover ProtectBuy. 
   * @return marketingSource
  **/
  @ApiModelProperty(value = "Indicates origin of the marketing offer. Recommended for Discover ProtectBuy. ")
  public String getMarketingSource() {
    return marketingSource;
  }

  public void setMarketingSource(String marketingSource) {
    this.marketingSource = marketingSource;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation mcc(String mcc) {
    this.mcc = mcc;
    return this;
  }

   /**
   * Merchant category code. **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. 
   * @return mcc
  **/
  @ApiModelProperty(required = true, value = "Merchant category code. **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. ")
  public String getMcc() {
    return mcc;
  }

  public void setMcc(String mcc) {
    this.mcc = mcc;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation messageCategory(String messageCategory) {
    this.messageCategory = messageCategory;
    return this;
  }

   /**
   * Category of the message for a specific use case. Possible values:  - &#x60;01&#x60;: PA- payment authentication - &#x60;02&#x60;: NPA- non-payment authentication - &#x60;03-79&#x60;: Reserved for EMVCo future use (values invalid until defined by EMVCo) - &#x60;80-99&#x60;: Reserved for DS use 
   * @return messageCategory
  **/
  @ApiModelProperty(value = "Category of the message for a specific use case. Possible values:  - `01`: PA- payment authentication - `02`: NPA- non-payment authentication - `03-79`: Reserved for EMVCo future use (values invalid until defined by EMVCo) - `80-99`: Reserved for DS use ")
  public String getMessageCategory() {
    return messageCategory;
  }

  public void setMessageCategory(String messageCategory) {
    this.messageCategory = messageCategory;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation npaCode(String npaCode) {
    this.npaCode = npaCode;
    return this;
  }

   /**
   * Non-Payer Authentication Indicator. Possible values: - &#x60;01&#x60;: Add card - &#x60;02&#x60;: Maintain card information - &#x60;03&#x60;: Cardholder verification for EMV token - &#x60;04-80&#x60; Reserved for EMVCo - &#x60;80-90&#x60; Reserved DS 
   * @return npaCode
  **/
  @ApiModelProperty(value = "Non-Payer Authentication Indicator. Possible values: - `01`: Add card - `02`: Maintain card information - `03`: Cardholder verification for EMV token - `04-80` Reserved for EMVCo - `80-90` Reserved DS ")
  public String getNpaCode() {
    return npaCode;
  }

  public void setNpaCode(String npaCode) {
    this.npaCode = npaCode;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation overridePaymentMethod(String overridePaymentMethod) {
    this.overridePaymentMethod = overridePaymentMethod;
    return this;
  }

   /**
   * Specifies the Brazilian payment account type used for the transaction. This field overrides other payment types that might be specified in the request. Use one of the following values for this field: - &#x60;NA&#x60;: Not applicable. Do not override other payment types that are specified in the request. - &#x60;CR&#x60;: Credit card. - &#x60;DB&#x60;: Debit card. - &#x60;VSAVR&#x60;: Visa Vale Refeicao - &#x60;VSAVA&#x60;: Visa Vale Alimentacao **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. 
   * @return overridePaymentMethod
  **/
  @ApiModelProperty(value = "Specifies the Brazilian payment account type used for the transaction. This field overrides other payment types that might be specified in the request. Use one of the following values for this field: - `NA`: Not applicable. Do not override other payment types that are specified in the request. - `CR`: Credit card. - `DB`: Debit card. - `VSAVR`: Visa Vale Refeicao - `VSAVA`: Visa Vale Alimentacao **Important** Required only for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. ")
  public String getOverridePaymentMethod() {
    return overridePaymentMethod;
  }

  public void setOverridePaymentMethod(String overridePaymentMethod) {
    this.overridePaymentMethod = overridePaymentMethod;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation productCode(String productCode) {
    this.productCode = productCode;
    return this;
  }

   /**
   * Specifies the product code, which designates the type of transaction. Specify one of the following values for this field: - AIR: Airline purchase Important Required for American Express SafeKey (U.S.). - &#x60;ACC&#x60;: Accommodation Rental - &#x60;ACF&#x60;: Account funding - &#x60;CHA&#x60;: Check acceptance - &#x60;DIG&#x60;: Digital Goods - &#x60;DSP&#x60;: Cash Dispensing - &#x60;GAS&#x60;: Fuel - &#x60;GEN&#x60;: General Retail - &#x60;LUX&#x60;: Luxury Retail - &#x60;PAL&#x60;: Prepaid activation and load - &#x60;PHY&#x60;: Goods or services purchase - &#x60;QCT&#x60;: Quasi-cash transaction - &#x60;REN&#x60;: Car Rental - &#x60;RES&#x60;: Restaurant - &#x60;SVC&#x60;: Services - &#x60;TBD&#x60;: Other - &#x60;TRA&#x60;: Travel **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. 
   * @return productCode
  **/
  @ApiModelProperty(value = "Specifies the product code, which designates the type of transaction. Specify one of the following values for this field: - AIR: Airline purchase Important Required for American Express SafeKey (U.S.). - `ACC`: Accommodation Rental - `ACF`: Account funding - `CHA`: Check acceptance - `DIG`: Digital Goods - `DSP`: Cash Dispensing - `GAS`: Fuel - `GEN`: General Retail - `LUX`: Luxury Retail - `PAL`: Prepaid activation and load - `PHY`: Goods or services purchase - `QCT`: Quasi-cash transaction - `REN`: Car Rental - `RES`: Restaurant - `SVC`: Services - `TBD`: Other - `TRA`: Travel **Important** Required for Visa Secure transactions in Brazil. Do not use this request field for any other types of transactions. ")
  public String getProductCode() {
    return productCode;
  }

  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation requestorId(String requestorId) {
    this.requestorId = requestorId;
    return this;
  }

   /**
   * Cardinal&#39;s directory server assigned 3DS Requestor ID value
   * @return requestorId
  **/
  @ApiModelProperty(value = "Cardinal's directory server assigned 3DS Requestor ID value")
  public String getRequestorId() {
    return requestorId;
  }

  public void setRequestorId(String requestorId) {
    this.requestorId = requestorId;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation requestorName(String requestorName) {
    this.requestorName = requestorName;
    return this;
  }

   /**
   * Cardinal&#39;s directory server assigned 3DS Requestor Name value
   * @return requestorName
  **/
  @ApiModelProperty(value = "Cardinal's directory server assigned 3DS Requestor Name value")
  public String getRequestorName() {
    return requestorName;
  }

  public void setRequestorName(String requestorName) {
    this.requestorName = requestorName;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation referenceId(String referenceId) {
    this.referenceId = referenceId;
    return this;
  }

   /**
   * Reference ID that corresponds to the device fingerprinting data that was collected previously. Note Required for Hybrid integration. 
   * @return referenceId
  **/
  @ApiModelProperty(required = true, value = "Reference ID that corresponds to the device fingerprinting data that was collected previously. Note Required for Hybrid integration. ")
  public String getReferenceId() {
    return referenceId;
  }

  public void setReferenceId(String referenceId) {
    this.referenceId = referenceId;
  }

  public Riskv1authenticationsConsumerAuthenticationInformation transactionMode(String transactionMode) {
    this.transactionMode = transactionMode;
    return this;
  }

   /**
   * Transaction mode identifier. Identifies the channel from which the transaction originates. Possible values: - &#x60;MOTO&#x60; - MOTO (Mail Order Telephone Order) - &#x60;RETAIL&#x60; - Retail - &#x60;ECOMMERCE&#x60; - eCommerce - &#x60;MOBILE&#x60; - Mobile Device - &#x60;TABLET&#x60; - Tablet 
   * @return transactionMode
  **/
  @ApiModelProperty(required = true, value = "Transaction mode identifier. Identifies the channel from which the transaction originates. Possible values: - `MOTO` - MOTO (Mail Order Telephone Order) - `RETAIL` - Retail - `ECOMMERCE` - eCommerce - `MOBILE` - Mobile Device - `TABLET` - Tablet ")
  public String getTransactionMode() {
    return transactionMode;
  }

  public void setTransactionMode(String transactionMode) {
    this.transactionMode = transactionMode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Riskv1authenticationsConsumerAuthenticationInformation riskv1authenticationsConsumerAuthenticationInformation = (Riskv1authenticationsConsumerAuthenticationInformation) o;
    return Objects.equals(this.alternateAuthenticationData, riskv1authenticationsConsumerAuthenticationInformation.alternateAuthenticationData) &&
        Objects.equals(this.alternateAuthenticationDate, riskv1authenticationsConsumerAuthenticationInformation.alternateAuthenticationDate) &&
        Objects.equals(this.alternateAuthenticationMethod, riskv1authenticationsConsumerAuthenticationInformation.alternateAuthenticationMethod) &&
        Objects.equals(this.authenticationTransactionId, riskv1authenticationsConsumerAuthenticationInformation.authenticationTransactionId) &&
        Objects.equals(this.challengeCode, riskv1authenticationsConsumerAuthenticationInformation.challengeCode) &&
        Objects.equals(this.customerCardAlias, riskv1authenticationsConsumerAuthenticationInformation.customerCardAlias) &&
        Objects.equals(this.defaultCard, riskv1authenticationsConsumerAuthenticationInformation.defaultCard) &&
        Objects.equals(this.installmentTotalCount, riskv1authenticationsConsumerAuthenticationInformation.installmentTotalCount) &&
        Objects.equals(this.marketingOptIn, riskv1authenticationsConsumerAuthenticationInformation.marketingOptIn) &&
        Objects.equals(this.marketingSource, riskv1authenticationsConsumerAuthenticationInformation.marketingSource) &&
        Objects.equals(this.mcc, riskv1authenticationsConsumerAuthenticationInformation.mcc) &&
        Objects.equals(this.messageCategory, riskv1authenticationsConsumerAuthenticationInformation.messageCategory) &&
        Objects.equals(this.npaCode, riskv1authenticationsConsumerAuthenticationInformation.npaCode) &&
        Objects.equals(this.overridePaymentMethod, riskv1authenticationsConsumerAuthenticationInformation.overridePaymentMethod) &&
        Objects.equals(this.productCode, riskv1authenticationsConsumerAuthenticationInformation.productCode) &&
        Objects.equals(this.requestorId, riskv1authenticationsConsumerAuthenticationInformation.requestorId) &&
        Objects.equals(this.requestorName, riskv1authenticationsConsumerAuthenticationInformation.requestorName) &&
        Objects.equals(this.referenceId, riskv1authenticationsConsumerAuthenticationInformation.referenceId) &&
        Objects.equals(this.transactionMode, riskv1authenticationsConsumerAuthenticationInformation.transactionMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateAuthenticationData, alternateAuthenticationDate, alternateAuthenticationMethod, authenticationTransactionId, challengeCode, customerCardAlias, defaultCard, installmentTotalCount, marketingOptIn, marketingSource, mcc, messageCategory, npaCode, overridePaymentMethod, productCode, requestorId, requestorName, referenceId, transactionMode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Riskv1authenticationsConsumerAuthenticationInformation {\n");
    
    sb.append("    alternateAuthenticationData: ").append(toIndentedString(alternateAuthenticationData)).append("\n");
    sb.append("    alternateAuthenticationDate: ").append(toIndentedString(alternateAuthenticationDate)).append("\n");
    sb.append("    alternateAuthenticationMethod: ").append(toIndentedString(alternateAuthenticationMethod)).append("\n");
    sb.append("    authenticationTransactionId: ").append(toIndentedString(authenticationTransactionId)).append("\n");
    sb.append("    challengeCode: ").append(toIndentedString(challengeCode)).append("\n");
    sb.append("    customerCardAlias: ").append(toIndentedString(customerCardAlias)).append("\n");
    sb.append("    defaultCard: ").append(toIndentedString(defaultCard)).append("\n");
    sb.append("    installmentTotalCount: ").append(toIndentedString(installmentTotalCount)).append("\n");
    sb.append("    marketingOptIn: ").append(toIndentedString(marketingOptIn)).append("\n");
    sb.append("    marketingSource: ").append(toIndentedString(marketingSource)).append("\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    messageCategory: ").append(toIndentedString(messageCategory)).append("\n");
    sb.append("    npaCode: ").append(toIndentedString(npaCode)).append("\n");
    sb.append("    overridePaymentMethod: ").append(toIndentedString(overridePaymentMethod)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    requestorId: ").append(toIndentedString(requestorId)).append("\n");
    sb.append("    requestorName: ").append(toIndentedString(requestorName)).append("\n");
    sb.append("    referenceId: ").append(toIndentedString(referenceId)).append("\n");
    sb.append("    transactionMode: ").append(toIndentedString(transactionMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

