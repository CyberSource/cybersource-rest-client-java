/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import Model.Microformv2sessionsTransientTokenResponseOptions;
import Model.Upv1capturecontextsCaptureMandate;
import Model.Upv1capturecontextsCompleteMandate;
import Model.Upv1capturecontextsOrderInformation;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * GenerateUnifiedCheckoutCaptureContextRequest
 */

public class GenerateUnifiedCheckoutCaptureContextRequest {
  @SerializedName("clientVersion")
  private String clientVersion = null;

  @SerializedName("targetOrigins")
  private List<String> targetOrigins = null;

  @SerializedName("allowedCardNetworks")
  private List<String> allowedCardNetworks = null;

  @SerializedName("allowedPaymentTypes")
  private List<String> allowedPaymentTypes = null;

  @SerializedName("country")
  private String country = null;

  @SerializedName("locale")
  private String locale = null;

  @SerializedName("captureMandate")
  private Upv1capturecontextsCaptureMandate captureMandate = null;

  @SerializedName("completeMandate")
  private Upv1capturecontextsCompleteMandate completeMandate = null;

  @SerializedName("orderInformation")
  private Upv1capturecontextsOrderInformation orderInformation = null;

  @SerializedName("transientTokenResponseOptions")
  private Microformv2sessionsTransientTokenResponseOptions transientTokenResponseOptions = null;

  public GenerateUnifiedCheckoutCaptureContextRequest clientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
    return this;
  }

   /**
   * Specify the version of Unified Checkout that you want to use.
   * @return clientVersion
  **/
  @ApiModelProperty(example = "0.25", value = "Specify the version of Unified Checkout that you want to use.")
  public String getClientVersion() {
    return clientVersion;
  }

  public void setClientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
  }

  public GenerateUnifiedCheckoutCaptureContextRequest targetOrigins(List<String> targetOrigins) {
    this.targetOrigins = targetOrigins;
    return this;
  }

  public GenerateUnifiedCheckoutCaptureContextRequest addTargetOriginsItem(String targetOriginsItem) {
    if (this.targetOrigins == null) {
      this.targetOrigins = new ArrayList<String>();
    }
    this.targetOrigins.add(targetOriginsItem);
    return this;
  }

   /**
   * The [target origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) of the website on which you will be launching Unified Checkout is defined by the scheme (protocol), hostname (domain) and port number (if used).    You must use https://hostname (unless you use http://localhost) Wildcards are NOT supported.  Ensure that subdomains are included. Any valid top-level domain is supported (e.g. .com, .co.uk, .gov.br etc)  Examples:   - https://example.com   - https://subdomain.example.com   - https://example.com:8080&lt;br&gt;&lt;br&gt;  If you are embedding within multiple nested iframes you need to specify the origins of all the browser contexts used, for example:    targetOrigins: [     \&quot;https://example.com\&quot;,     \&quot;https://basket.example.com\&quot;,     \&quot;https://ecom.example.com\&quot;   ] 
   * @return targetOrigins
  **/
  @ApiModelProperty(value = "The [target origin](https://developer.mozilla.org/en-US/docs/Glossary/Origin) of the website on which you will be launching Unified Checkout is defined by the scheme (protocol), hostname (domain) and port number (if used).    You must use https://hostname (unless you use http://localhost) Wildcards are NOT supported.  Ensure that subdomains are included. Any valid top-level domain is supported (e.g. .com, .co.uk, .gov.br etc)  Examples:   - https://example.com   - https://subdomain.example.com   - https://example.com:8080<br><br>  If you are embedding within multiple nested iframes you need to specify the origins of all the browser contexts used, for example:    targetOrigins: [     \"https://example.com\",     \"https://basket.example.com\",     \"https://ecom.example.com\"   ] ")
  public List<String> getTargetOrigins() {
    return targetOrigins;
  }

  public void setTargetOrigins(List<String> targetOrigins) {
    this.targetOrigins = targetOrigins;
  }

  public GenerateUnifiedCheckoutCaptureContextRequest allowedCardNetworks(List<String> allowedCardNetworks) {
    this.allowedCardNetworks = allowedCardNetworks;
    return this;
  }

  public GenerateUnifiedCheckoutCaptureContextRequest addAllowedCardNetworksItem(String allowedCardNetworksItem) {
    if (this.allowedCardNetworks == null) {
      this.allowedCardNetworks = new ArrayList<String>();
    }
    this.allowedCardNetworks.add(allowedCardNetworksItem);
    return this;
  }

   /**
   * The list of card networks you want to use for this Unified Checkout transaction.  Unified Checkout currently supports the following card networks:     - VISA     - MASTERCARD     - AMEX     - CARNET     - CARTESBANCAIRES     - CUP     - DINERSCLUB     - DISCOVER     - EFTPOS     - ELO     - JCB     - JCREW     - MADA     - MAESTRO     - MEEZA     - PAYPAK 
   * @return allowedCardNetworks
  **/
  @ApiModelProperty(value = "The list of card networks you want to use for this Unified Checkout transaction.  Unified Checkout currently supports the following card networks:     - VISA     - MASTERCARD     - AMEX     - CARNET     - CARTESBANCAIRES     - CUP     - DINERSCLUB     - DISCOVER     - EFTPOS     - ELO     - JCB     - JCREW     - MADA     - MAESTRO     - MEEZA     - PAYPAK ")
  public List<String> getAllowedCardNetworks() {
    return allowedCardNetworks;
  }

  public void setAllowedCardNetworks(List<String> allowedCardNetworks) {
    this.allowedCardNetworks = allowedCardNetworks;
  }

  public GenerateUnifiedCheckoutCaptureContextRequest allowedPaymentTypes(List<String> allowedPaymentTypes) {
    this.allowedPaymentTypes = allowedPaymentTypes;
    return this;
  }

  public GenerateUnifiedCheckoutCaptureContextRequest addAllowedPaymentTypesItem(String allowedPaymentTypesItem) {
    if (this.allowedPaymentTypes == null) {
      this.allowedPaymentTypes = new ArrayList<String>();
    }
    this.allowedPaymentTypes.add(allowedPaymentTypesItem);
    return this;
  }

   /**
   * The payment types that are allowed for the merchant.    Possible values when launching Unified Checkout:   - APPLEPAY   - CHECK   - CLICKTOPAY   - GOOGLEPAY   - PANENTRY                 - PAZE &lt;br&gt;&lt;br&gt;  Unified Checkout also supports the following Alternative Payments:   - AFTERPAY&lt;br&gt;&lt;br&gt;  Possible values when launching Click To Pay Drop-In UI: - CLICKTOPAY &lt;br&gt;&lt;br&gt;  **Important:**    - CLICKTOPAY only available for Visa, Mastercard and AMEX for saved cards.   - Visa and Mastercard will look to tokenize using network tokenization for all Click to Pay requests.  Click to Pay uses Click to Pay token requester IDs and not the merchant&#39;s existing token requester.   - Apple Pay, Google Pay, Check, and Paze can be used independently without requiring PAN entry in the allowedPaymentTypes field.&lt;br&gt;&lt;br&gt;  **Managing Google Pay Authentication Types** When you enable Google Pay on Unified Checkout you can specify optional parameters that define the types of card authentication you receive from Google Pay.&lt;br&gt;&lt;br&gt;  **Managing Google Pay Authentication Types** Where Click to Pay is the payment type selected by the customer and the customer manually enters their card, the option to enroll their card in Click to Pay will be auto-checked if this field is set to \&quot;true\&quot;.   This is only available where the merchant and cardholder are based in the following countries and the billing type is set to \&quot;FULL\&quot; or \&quot;PARTIAL\&quot;.   - UAE   - Argentina   - Brazil   - Chile   - Colombia   - Kuwait   - Mexico   - Peru   - Qatar   - Saudi Arabia   - Ukraine   - South Africa&lt;br&gt;&lt;br&gt;  If false, this is not present or not supported in the market.  Enrollment in Click to Pay is not checked for the customer when completing manual card entry. 
   * @return allowedPaymentTypes
  **/
  @ApiModelProperty(value = "The payment types that are allowed for the merchant.    Possible values when launching Unified Checkout:   - APPLEPAY   - CHECK   - CLICKTOPAY   - GOOGLEPAY   - PANENTRY                 - PAZE <br><br>  Unified Checkout also supports the following Alternative Payments:   - AFTERPAY<br><br>  Possible values when launching Click To Pay Drop-In UI: - CLICKTOPAY <br><br>  **Important:**    - CLICKTOPAY only available for Visa, Mastercard and AMEX for saved cards.   - Visa and Mastercard will look to tokenize using network tokenization for all Click to Pay requests.  Click to Pay uses Click to Pay token requester IDs and not the merchant's existing token requester.   - Apple Pay, Google Pay, Check, and Paze can be used independently without requiring PAN entry in the allowedPaymentTypes field.<br><br>  **Managing Google Pay Authentication Types** When you enable Google Pay on Unified Checkout you can specify optional parameters that define the types of card authentication you receive from Google Pay.<br><br>  **Managing Google Pay Authentication Types** Where Click to Pay is the payment type selected by the customer and the customer manually enters their card, the option to enroll their card in Click to Pay will be auto-checked if this field is set to \"true\".   This is only available where the merchant and cardholder are based in the following countries and the billing type is set to \"FULL\" or \"PARTIAL\".   - UAE   - Argentina   - Brazil   - Chile   - Colombia   - Kuwait   - Mexico   - Peru   - Qatar   - Saudi Arabia   - Ukraine   - South Africa<br><br>  If false, this is not present or not supported in the market.  Enrollment in Click to Pay is not checked for the customer when completing manual card entry. ")
  public List<String> getAllowedPaymentTypes() {
    return allowedPaymentTypes;
  }

  public void setAllowedPaymentTypes(List<String> allowedPaymentTypes) {
    this.allowedPaymentTypes = allowedPaymentTypes;
  }

  public GenerateUnifiedCheckoutCaptureContextRequest country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Country the purchase is originating from (e.g. country of the merchant).  Use the two-character ISO Standard 
   * @return country
  **/
  @ApiModelProperty(example = "US", value = "Country the purchase is originating from (e.g. country of the merchant).  Use the two-character ISO Standard ")
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public GenerateUnifiedCheckoutCaptureContextRequest locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * Localization of the User experience conforming to the ISO 639-1 language standards and two-character ISO Standard Country Code.  Please refer to list of [supported locales through Unified Checkout](https://developer.cybersource.com/docs/cybs/en-us/unified-checkout/developer/all/rest/unified-checkout/uc-appendix-languages.html) 
   * @return locale
  **/
  @ApiModelProperty(example = "en_US", value = "Localization of the User experience conforming to the ISO 639-1 language standards and two-character ISO Standard Country Code.  Please refer to list of [supported locales through Unified Checkout](https://developer.cybersource.com/docs/cybs/en-us/unified-checkout/developer/all/rest/unified-checkout/uc-appendix-languages.html) ")
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }

  public GenerateUnifiedCheckoutCaptureContextRequest captureMandate(Upv1capturecontextsCaptureMandate captureMandate) {
    this.captureMandate = captureMandate;
    return this;
  }

   /**
   * Get captureMandate
   * @return captureMandate
  **/
  @ApiModelProperty(value = "")
  public Upv1capturecontextsCaptureMandate getCaptureMandate() {
    return captureMandate;
  }

  public void setCaptureMandate(Upv1capturecontextsCaptureMandate captureMandate) {
    this.captureMandate = captureMandate;
  }

  public GenerateUnifiedCheckoutCaptureContextRequest completeMandate(Upv1capturecontextsCompleteMandate completeMandate) {
    this.completeMandate = completeMandate;
    return this;
  }

   /**
   * Get completeMandate
   * @return completeMandate
  **/
  @ApiModelProperty(value = "")
  public Upv1capturecontextsCompleteMandate getCompleteMandate() {
    return completeMandate;
  }

  public void setCompleteMandate(Upv1capturecontextsCompleteMandate completeMandate) {
    this.completeMandate = completeMandate;
  }

  public GenerateUnifiedCheckoutCaptureContextRequest orderInformation(Upv1capturecontextsOrderInformation orderInformation) {
    this.orderInformation = orderInformation;
    return this;
  }

   /**
   * Get orderInformation
   * @return orderInformation
  **/
  @ApiModelProperty(value = "")
  public Upv1capturecontextsOrderInformation getOrderInformation() {
    return orderInformation;
  }

  public void setOrderInformation(Upv1capturecontextsOrderInformation orderInformation) {
    this.orderInformation = orderInformation;
  }

  public GenerateUnifiedCheckoutCaptureContextRequest transientTokenResponseOptions(Microformv2sessionsTransientTokenResponseOptions transientTokenResponseOptions) {
    this.transientTokenResponseOptions = transientTokenResponseOptions;
    return this;
  }

   /**
   * Get transientTokenResponseOptions
   * @return transientTokenResponseOptions
  **/
  @ApiModelProperty(value = "")
  public Microformv2sessionsTransientTokenResponseOptions getTransientTokenResponseOptions() {
    return transientTokenResponseOptions;
  }

  public void setTransientTokenResponseOptions(Microformv2sessionsTransientTokenResponseOptions transientTokenResponseOptions) {
    this.transientTokenResponseOptions = transientTokenResponseOptions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateUnifiedCheckoutCaptureContextRequest generateUnifiedCheckoutCaptureContextRequest = (GenerateUnifiedCheckoutCaptureContextRequest) o;
    return Objects.equals(this.clientVersion, generateUnifiedCheckoutCaptureContextRequest.clientVersion) &&
        Objects.equals(this.targetOrigins, generateUnifiedCheckoutCaptureContextRequest.targetOrigins) &&
        Objects.equals(this.allowedCardNetworks, generateUnifiedCheckoutCaptureContextRequest.allowedCardNetworks) &&
        Objects.equals(this.allowedPaymentTypes, generateUnifiedCheckoutCaptureContextRequest.allowedPaymentTypes) &&
        Objects.equals(this.country, generateUnifiedCheckoutCaptureContextRequest.country) &&
        Objects.equals(this.locale, generateUnifiedCheckoutCaptureContextRequest.locale) &&
        Objects.equals(this.captureMandate, generateUnifiedCheckoutCaptureContextRequest.captureMandate) &&
        Objects.equals(this.completeMandate, generateUnifiedCheckoutCaptureContextRequest.completeMandate) &&
        Objects.equals(this.orderInformation, generateUnifiedCheckoutCaptureContextRequest.orderInformation) &&
        Objects.equals(this.transientTokenResponseOptions, generateUnifiedCheckoutCaptureContextRequest.transientTokenResponseOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientVersion, targetOrigins, allowedCardNetworks, allowedPaymentTypes, country, locale, captureMandate, completeMandate, orderInformation, transientTokenResponseOptions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateUnifiedCheckoutCaptureContextRequest {\n");
    
    if (clientVersion != null) sb.append("    clientVersion: ").append(toIndentedString(clientVersion)).append("\n");
    if (targetOrigins != null) sb.append("    targetOrigins: ").append(toIndentedString(targetOrigins)).append("\n");
    if (allowedCardNetworks != null) sb.append("    allowedCardNetworks: ").append(toIndentedString(allowedCardNetworks)).append("\n");
    if (allowedPaymentTypes != null) sb.append("    allowedPaymentTypes: ").append(toIndentedString(allowedPaymentTypes)).append("\n");
    if (country != null) sb.append("    country: ").append(toIndentedString(country)).append("\n");
    if (locale != null) sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    if (captureMandate != null) sb.append("    captureMandate: ").append(toIndentedString(captureMandate)).append("\n");
    if (completeMandate != null) sb.append("    completeMandate: ").append(toIndentedString(completeMandate)).append("\n");
    if (orderInformation != null) sb.append("    orderInformation: ").append(toIndentedString(orderInformation)).append("\n");
    if (transientTokenResponseOptions != null) sb.append("    transientTokenResponseOptions: ").append(toIndentedString(transientTokenResponseOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

