/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import Model.UnderwritingConfigurationMerchantApplicationProducts;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * UnderwritingConfigurationMerchantApplication
 */

public class UnderwritingConfigurationMerchantApplication {
  @SerializedName("applicationId")
  private String applicationId = null;

  @SerializedName("applicationStatus")
  private String applicationStatus = null;

  @SerializedName("products")
  private List<UnderwritingConfigurationMerchantApplicationProducts> products = new ArrayList<UnderwritingConfigurationMerchantApplicationProducts>();

  @SerializedName("campaignId")
  private String campaignId = null;

  @SerializedName("ocId")
  private String ocId = null;

  @SerializedName("resellerId")
  private String resellerId = null;

   /**
   * Get applicationId
   * @return applicationId
  **/
  @ApiModelProperty(value = "")
  public String getApplicationId() {
    return applicationId;
  }

   /**
   * Get applicationStatus
   * @return applicationStatus
  **/
  @ApiModelProperty(value = "")
  public String getApplicationStatus() {
    return applicationStatus;
  }

  public UnderwritingConfigurationMerchantApplication products(List<UnderwritingConfigurationMerchantApplicationProducts> products) {
    this.products = products;
    return this;
  }

  public UnderwritingConfigurationMerchantApplication addProductsItem(UnderwritingConfigurationMerchantApplicationProducts productsItem) {
    this.products.add(productsItem);
    return this;
  }

   /**
   * The product(s) that are being underwritten
   * @return products
  **/
  @ApiModelProperty(required = true, value = "The product(s) that are being underwritten")
  public List<UnderwritingConfigurationMerchantApplicationProducts> getProducts() {
    return products;
  }

  public void setProducts(List<UnderwritingConfigurationMerchantApplicationProducts> products) {
    this.products = products;
  }

  public UnderwritingConfigurationMerchantApplication campaignId(String campaignId) {
    this.campaignId = campaignId;
    return this;
  }

   /**
   * Driver Campaign ID, identifies where the application came from
   * @return campaignId
  **/
  @ApiModelProperty(value = "Driver Campaign ID, identifies where the application came from")
  public String getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }

  public UnderwritingConfigurationMerchantApplication ocId(String ocId) {
    this.ocId = ocId;
    return this;
  }

   /**
   * Offer CampaignID, used by Sales
   * @return ocId
  **/
  @ApiModelProperty(value = "Offer CampaignID, used by Sales")
  public String getOcId() {
    return ocId;
  }

  public void setOcId(String ocId) {
    this.ocId = ocId;
  }

  public UnderwritingConfigurationMerchantApplication resellerId(String resellerId) {
    this.resellerId = resellerId;
    return this;
  }

   /**
   * ResellerID, used by Sales
   * @return resellerId
  **/
  @ApiModelProperty(value = "ResellerID, used by Sales")
  public String getResellerId() {
    return resellerId;
  }

  public void setResellerId(String resellerId) {
    this.resellerId = resellerId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UnderwritingConfigurationMerchantApplication underwritingConfigurationMerchantApplication = (UnderwritingConfigurationMerchantApplication) o;
    return Objects.equals(this.applicationId, underwritingConfigurationMerchantApplication.applicationId) &&
        Objects.equals(this.applicationStatus, underwritingConfigurationMerchantApplication.applicationStatus) &&
        Objects.equals(this.products, underwritingConfigurationMerchantApplication.products) &&
        Objects.equals(this.campaignId, underwritingConfigurationMerchantApplication.campaignId) &&
        Objects.equals(this.ocId, underwritingConfigurationMerchantApplication.ocId) &&
        Objects.equals(this.resellerId, underwritingConfigurationMerchantApplication.resellerId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationId, applicationStatus, products, campaignId, ocId, resellerId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UnderwritingConfigurationMerchantApplication {\n");
    
    if (applicationId != null) sb.append("    applicationId: ").append(toIndentedString(applicationId)).append("\n");
    if (applicationStatus != null) sb.append("    applicationStatus: ").append(toIndentedString(applicationStatus)).append("\n");
    if (products != null) sb.append("    products: ").append(toIndentedString(products)).append("\n");
    if (campaignId != null) sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    if (ocId != null) sb.append("    ocId: ").append(toIndentedString(ocId)).append("\n");
    if (resellerId != null) sb.append("    resellerId: ").append(toIndentedString(resellerId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

