/*
 * CyberSource Flex API
 * Simple PAN tokenization service
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import Model.V2paymentsProcessingInformationAuthorizationOptions;
import Model.V2paymentsProcessingInformationCaptureOptions;
import Model.V2paymentsProcessingInformationIssuer;
import Model.V2paymentsProcessingInformationRecurringOptions;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * V2paymentsProcessingInformation
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-09-22T07:56:07.186+05:30")
public class V2paymentsProcessingInformation {
  @SerializedName("capture")
  private Boolean capture = false;

  @SerializedName("processorId")
  private String processorId = null;

  @SerializedName("businessApplicationId")
  private String businessApplicationId = null;

  @SerializedName("commerceIndicator")
  private String commerceIndicator = null;

  @SerializedName("paymentSolution")
  private String paymentSolution = null;

  @SerializedName("reconciliationId")
  private String reconciliationId = null;

  @SerializedName("linkId")
  private String linkId = null;

  @SerializedName("purchaseLevel")
  private String purchaseLevel = null;

  @SerializedName("reportGroup")
  private String reportGroup = null;

  @SerializedName("visaCheckoutId")
  private String visaCheckoutId = null;

  @SerializedName("issuer")
  private V2paymentsProcessingInformationIssuer issuer = null;

  @SerializedName("authorizationOptions")
  private V2paymentsProcessingInformationAuthorizationOptions authorizationOptions = null;

  @SerializedName("captureOptions")
  private V2paymentsProcessingInformationCaptureOptions captureOptions = null;

  @SerializedName("recurringOptions")
  private V2paymentsProcessingInformationRecurringOptions recurringOptions = null;

  public V2paymentsProcessingInformation capture(Boolean capture) {
    this.capture = capture;
    return this;
  }

   /**
   * Flag that specifies whether to also include capture service in the submitted request or not.
   * @return capture
  **/
  @ApiModelProperty(value = "Flag that specifies whether to also include capture service in the submitted request or not.")
  public Boolean getCapture() {
    return capture;
  }

  public void setCapture(Boolean capture) {
    this.capture = capture;
  }

  public V2paymentsProcessingInformation processorId(String processorId) {
    this.processorId = processorId;
    return this;
  }

   /**
   * Value that identifies the processor/acquirer to use for the transaction. This value is supported only for **CyberSource through VisaNet**. 
   * @return processorId
  **/
  @ApiModelProperty(value = "Value that identifies the processor/acquirer to use for the transaction. This value is supported only for **CyberSource through VisaNet**. ")
  public String getProcessorId() {
    return processorId;
  }

  public void setProcessorId(String processorId) {
    this.processorId = processorId;
  }

  public V2paymentsProcessingInformation businessApplicationId(String businessApplicationId) {
    this.businessApplicationId = businessApplicationId;
    return this;
  }

   /**
   * TBD
   * @return businessApplicationId
  **/
  @ApiModelProperty(value = "TBD")
  public String getBusinessApplicationId() {
    return businessApplicationId;
  }

  public void setBusinessApplicationId(String businessApplicationId) {
    this.businessApplicationId = businessApplicationId;
  }

  public V2paymentsProcessingInformation commerceIndicator(String commerceIndicator) {
    this.commerceIndicator = commerceIndicator;
    return this;
  }

   /**
   * Type of transaction. Some payment card companies use this information when determining discount rates. When you omit this field for **Ingenico ePayments**, the processor uses the default transaction type they have on file for you instead of the default value listed here. 
   * @return commerceIndicator
  **/
  @ApiModelProperty(value = "Type of transaction. Some payment card companies use this information when determining discount rates. When you omit this field for **Ingenico ePayments**, the processor uses the default transaction type they have on file for you instead of the default value listed here. ")
  public String getCommerceIndicator() {
    return commerceIndicator;
  }

  public void setCommerceIndicator(String commerceIndicator) {
    this.commerceIndicator = commerceIndicator;
  }

  public V2paymentsProcessingInformation paymentSolution(String paymentSolution) {
    this.paymentSolution = paymentSolution;
    return this;
  }

   /**
   * Type of digital payment solution that is being used for the transaction. Possible Values:   - **visacheckout**: Visa Checkout.  - **001**: Apple Pay.  - **005**: Masterpass. Required for Masterpass transactions on OmniPay Direct.  - **006**: Android Pay.  - **008**: Samsung Pay. 
   * @return paymentSolution
  **/
  @ApiModelProperty(value = "Type of digital payment solution that is being used for the transaction. Possible Values:   - **visacheckout**: Visa Checkout.  - **001**: Apple Pay.  - **005**: Masterpass. Required for Masterpass transactions on OmniPay Direct.  - **006**: Android Pay.  - **008**: Samsung Pay. ")
  public String getPaymentSolution() {
    return paymentSolution;
  }

  public void setPaymentSolution(String paymentSolution) {
    this.paymentSolution = paymentSolution;
  }

  public V2paymentsProcessingInformation reconciliationId(String reconciliationId) {
    this.reconciliationId = reconciliationId;
    return this;
  }

   /**
   * Please check with Cybersource customer support to see if your merchant account is configured correctly so you can include this field in your request. * For Payouts: max length for FDCCompass is String (22). 
   * @return reconciliationId
  **/
  @ApiModelProperty(value = "Please check with Cybersource customer support to see if your merchant account is configured correctly so you can include this field in your request. * For Payouts: max length for FDCCompass is String (22). ")
  public String getReconciliationId() {
    return reconciliationId;
  }

  public void setReconciliationId(String reconciliationId) {
    this.reconciliationId = reconciliationId;
  }

  public V2paymentsProcessingInformation linkId(String linkId) {
    this.linkId = linkId;
    return this;
  }

   /**
   * Value that links the current payment request to the original request. Set this value to the ID that was returned in the reply message from the original payment request.  This value is used for:   - Partial authorizations.  - Split shipments. 
   * @return linkId
  **/
  @ApiModelProperty(value = "Value that links the current payment request to the original request. Set this value to the ID that was returned in the reply message from the original payment request.  This value is used for:   - Partial authorizations.  - Split shipments. ")
  public String getLinkId() {
    return linkId;
  }

  public void setLinkId(String linkId) {
    this.linkId = linkId;
  }

  public V2paymentsProcessingInformation purchaseLevel(String purchaseLevel) {
    this.purchaseLevel = purchaseLevel;
    return this;
  }

   /**
   * Set this field to 3 to indicate that the request includes Level III data.
   * @return purchaseLevel
  **/
  @ApiModelProperty(value = "Set this field to 3 to indicate that the request includes Level III data.")
  public String getPurchaseLevel() {
    return purchaseLevel;
  }

  public void setPurchaseLevel(String purchaseLevel) {
    this.purchaseLevel = purchaseLevel;
  }

  public V2paymentsProcessingInformation reportGroup(String reportGroup) {
    this.reportGroup = reportGroup;
    return this;
  }

   /**
   * Attribute that lets you define custom grouping for your processor reports. This field is supported only for **Litle**. 
   * @return reportGroup
  **/
  @ApiModelProperty(value = "Attribute that lets you define custom grouping for your processor reports. This field is supported only for **Litle**. ")
  public String getReportGroup() {
    return reportGroup;
  }

  public void setReportGroup(String reportGroup) {
    this.reportGroup = reportGroup;
  }

  public V2paymentsProcessingInformation visaCheckoutId(String visaCheckoutId) {
    this.visaCheckoutId = visaCheckoutId;
    return this;
  }

   /**
   * Identifier for the **Visa Checkout** order. Visa Checkout provides a unique order ID for every transaction in the Visa Checkout **callID** field. 
   * @return visaCheckoutId
  **/
  @ApiModelProperty(value = "Identifier for the **Visa Checkout** order. Visa Checkout provides a unique order ID for every transaction in the Visa Checkout **callID** field. ")
  public String getVisaCheckoutId() {
    return visaCheckoutId;
  }

  public void setVisaCheckoutId(String visaCheckoutId) {
    this.visaCheckoutId = visaCheckoutId;
  }

  public V2paymentsProcessingInformation issuer(V2paymentsProcessingInformationIssuer issuer) {
    this.issuer = issuer;
    return this;
  }

   /**
   * Get issuer
   * @return issuer
  **/
  @ApiModelProperty(value = "")
  public V2paymentsProcessingInformationIssuer getIssuer() {
    return issuer;
  }

  public void setIssuer(V2paymentsProcessingInformationIssuer issuer) {
    this.issuer = issuer;
  }

  public V2paymentsProcessingInformation authorizationOptions(V2paymentsProcessingInformationAuthorizationOptions authorizationOptions) {
    this.authorizationOptions = authorizationOptions;
    return this;
  }

   /**
   * Get authorizationOptions
   * @return authorizationOptions
  **/
  @ApiModelProperty(value = "")
  public V2paymentsProcessingInformationAuthorizationOptions getAuthorizationOptions() {
    return authorizationOptions;
  }

  public void setAuthorizationOptions(V2paymentsProcessingInformationAuthorizationOptions authorizationOptions) {
    this.authorizationOptions = authorizationOptions;
  }

  public V2paymentsProcessingInformation captureOptions(V2paymentsProcessingInformationCaptureOptions captureOptions) {
    this.captureOptions = captureOptions;
    return this;
  }

   /**
   * Get captureOptions
   * @return captureOptions
  **/
  @ApiModelProperty(value = "")
  public V2paymentsProcessingInformationCaptureOptions getCaptureOptions() {
    return captureOptions;
  }

  public void setCaptureOptions(V2paymentsProcessingInformationCaptureOptions captureOptions) {
    this.captureOptions = captureOptions;
  }

  public V2paymentsProcessingInformation recurringOptions(V2paymentsProcessingInformationRecurringOptions recurringOptions) {
    this.recurringOptions = recurringOptions;
    return this;
  }

   /**
   * Get recurringOptions
   * @return recurringOptions
  **/
  @ApiModelProperty(value = "")
  public V2paymentsProcessingInformationRecurringOptions getRecurringOptions() {
    return recurringOptions;
  }

  public void setRecurringOptions(V2paymentsProcessingInformationRecurringOptions recurringOptions) {
    this.recurringOptions = recurringOptions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2paymentsProcessingInformation v2paymentsProcessingInformation = (V2paymentsProcessingInformation) o;
    return Objects.equals(this.capture, v2paymentsProcessingInformation.capture) &&
        Objects.equals(this.processorId, v2paymentsProcessingInformation.processorId) &&
        Objects.equals(this.businessApplicationId, v2paymentsProcessingInformation.businessApplicationId) &&
        Objects.equals(this.commerceIndicator, v2paymentsProcessingInformation.commerceIndicator) &&
        Objects.equals(this.paymentSolution, v2paymentsProcessingInformation.paymentSolution) &&
        Objects.equals(this.reconciliationId, v2paymentsProcessingInformation.reconciliationId) &&
        Objects.equals(this.linkId, v2paymentsProcessingInformation.linkId) &&
        Objects.equals(this.purchaseLevel, v2paymentsProcessingInformation.purchaseLevel) &&
        Objects.equals(this.reportGroup, v2paymentsProcessingInformation.reportGroup) &&
        Objects.equals(this.visaCheckoutId, v2paymentsProcessingInformation.visaCheckoutId) &&
        Objects.equals(this.issuer, v2paymentsProcessingInformation.issuer) &&
        Objects.equals(this.authorizationOptions, v2paymentsProcessingInformation.authorizationOptions) &&
        Objects.equals(this.captureOptions, v2paymentsProcessingInformation.captureOptions) &&
        Objects.equals(this.recurringOptions, v2paymentsProcessingInformation.recurringOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(capture, processorId, businessApplicationId, commerceIndicator, paymentSolution, reconciliationId, linkId, purchaseLevel, reportGroup, visaCheckoutId, issuer, authorizationOptions, captureOptions, recurringOptions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2paymentsProcessingInformation {\n");
    
    sb.append("    capture: ").append(toIndentedString(capture)).append("\n");
    sb.append("    processorId: ").append(toIndentedString(processorId)).append("\n");
    sb.append("    businessApplicationId: ").append(toIndentedString(businessApplicationId)).append("\n");
    sb.append("    commerceIndicator: ").append(toIndentedString(commerceIndicator)).append("\n");
    sb.append("    paymentSolution: ").append(toIndentedString(paymentSolution)).append("\n");
    sb.append("    reconciliationId: ").append(toIndentedString(reconciliationId)).append("\n");
    sb.append("    linkId: ").append(toIndentedString(linkId)).append("\n");
    sb.append("    purchaseLevel: ").append(toIndentedString(purchaseLevel)).append("\n");
    sb.append("    reportGroup: ").append(toIndentedString(reportGroup)).append("\n");
    sb.append("    visaCheckoutId: ").append(toIndentedString(visaCheckoutId)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    authorizationOptions: ").append(toIndentedString(authorizationOptions)).append("\n");
    sb.append("    captureOptions: ").append(toIndentedString(captureOptions)).append("\n");
    sb.append("    recurringOptions: ").append(toIndentedString(recurringOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

