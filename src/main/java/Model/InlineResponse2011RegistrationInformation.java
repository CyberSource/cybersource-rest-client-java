/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * InlineResponse2011RegistrationInformation
 */

public class InlineResponse2011RegistrationInformation {
  @SerializedName("boardingPackageId")
  private String boardingPackageId = null;

  /**
   * In case mode is not provided the API will use COMPLETE as default Possible Values:   - &#39;COMPLETE&#39;   - &#39;PARTIAL&#39; 
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    COMPLETE("COMPLETE"),
    
    PARTIAL("PARTIAL");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String text) {
      for (ModeEnum b : ModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("mode")
  private ModeEnum mode = null;

  @SerializedName("salesRepId")
  private String salesRepId = null;

   /**
   * Get boardingPackageId
   * @return boardingPackageId
  **/
  @ApiModelProperty(example = "1004001", value = "")
  public String getBoardingPackageId() {
    return boardingPackageId;
  }

  public InlineResponse2011RegistrationInformation mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * In case mode is not provided the API will use COMPLETE as default Possible Values:   - &#39;COMPLETE&#39;   - &#39;PARTIAL&#39; 
   * @return mode
  **/
  @ApiModelProperty(value = "In case mode is not provided the API will use COMPLETE as default Possible Values:   - 'COMPLETE'   - 'PARTIAL' ")
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }

  public InlineResponse2011RegistrationInformation salesRepId(String salesRepId) {
    this.salesRepId = salesRepId;
    return this;
  }

   /**
   * Get salesRepId
   * @return salesRepId
  **/
  @ApiModelProperty(example = "Rep1", value = "")
  public String getSalesRepId() {
    return salesRepId;
  }

  public void setSalesRepId(String salesRepId) {
    this.salesRepId = salesRepId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse2011RegistrationInformation inlineResponse2011RegistrationInformation = (InlineResponse2011RegistrationInformation) o;
    return Objects.equals(this.boardingPackageId, inlineResponse2011RegistrationInformation.boardingPackageId) &&
        Objects.equals(this.mode, inlineResponse2011RegistrationInformation.mode) &&
        Objects.equals(this.salesRepId, inlineResponse2011RegistrationInformation.salesRepId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boardingPackageId, mode, salesRepId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse2011RegistrationInformation {\n");
    
    sb.append("    boardingPackageId: ").append(toIndentedString(boardingPackageId)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    salesRepId: ").append(toIndentedString(salesRepId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

