/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Ptsv2intentsPaymentInformationTokenizedPaymentMethod
 */

public class Ptsv2intentsPaymentInformationTokenizedPaymentMethod {
  @SerializedName("description")
  private String description = null;

  @SerializedName("usagePattern")
  private String usagePattern = null;

  @SerializedName("usageType")
  private String usageType = null;

  @SerializedName("allowMultipleTokens")
  private String allowMultipleTokens = null;

  public Ptsv2intentsPaymentInformationTokenizedPaymentMethod description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the vaulted payment method shown to the buyer during checkout and in their PayPal account. 
   * @return description
  **/
  @ApiModelProperty(value = "Description of the vaulted payment method shown to the buyer during checkout and in their PayPal account. ")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Ptsv2intentsPaymentInformationTokenizedPaymentMethod usagePattern(String usagePattern) {
    this.usagePattern = usagePattern;
    return this;
  }

   /**
   * Indicates how the merchant will primarily use the vaulted payment method. Valid values: - \&quot;IMMEDIATE\&quot;: For on-demand, instant payments. These payments are variable in both amount and frequency and will be used to pay for goods or services before they are rendered to the buyer - \&quot;DEFERRED\&quot;: For post-pay payments; that is, payments for goods or services that have already been rendered to the buyer - \&quot;RECURRING_PREPAID\&quot;: For recurring payments before services are rendered. - \&quot;RECURRING_POSTPAID\&quot;: For recurring payments after services are rendered. - \&quot;THRESHOLD_PREPAID\&quot;: For payments when a pre-defined threshold is reached before services are rendered. - \&quot;THRESHOLD_POSTPAID\&quot;: For payments when a pre-defined threshold is reached after services are rendered. 
   * @return usagePattern
  **/
  @ApiModelProperty(value = "Indicates how the merchant will primarily use the vaulted payment method. Valid values: - \"IMMEDIATE\": For on-demand, instant payments. These payments are variable in both amount and frequency and will be used to pay for goods or services before they are rendered to the buyer - \"DEFERRED\": For post-pay payments; that is, payments for goods or services that have already been rendered to the buyer - \"RECURRING_PREPAID\": For recurring payments before services are rendered. - \"RECURRING_POSTPAID\": For recurring payments after services are rendered. - \"THRESHOLD_PREPAID\": For payments when a pre-defined threshold is reached before services are rendered. - \"THRESHOLD_POSTPAID\": For payments when a pre-defined threshold is reached after services are rendered. ")
  public String getUsagePattern() {
    return usagePattern;
  }

  public void setUsagePattern(String usagePattern) {
    this.usagePattern = usagePattern;
  }

  public Ptsv2intentsPaymentInformationTokenizedPaymentMethod usageType(String usageType) {
    this.usageType = usageType;
    return this;
  }

   /**
   * Indicates the type of vaulting relationship. Valid values: - \&quot;MERCHANT\&quot;: Single merchant relationship. - \&quot;PLATFORM\&quot;: Platform hosting multiple merchants. 
   * @return usageType
  **/
  @ApiModelProperty(value = "Indicates the type of vaulting relationship. Valid values: - \"MERCHANT\": Single merchant relationship. - \"PLATFORM\": Platform hosting multiple merchants. ")
  public String getUsageType() {
    return usageType;
  }

  public void setUsageType(String usageType) {
    this.usageType = usageType;
  }

  public Ptsv2intentsPaymentInformationTokenizedPaymentMethod allowMultipleTokens(String allowMultipleTokens) {
    this.allowMultipleTokens = allowMultipleTokens;
    return this;
  }

   /**
   * Create multiple payment tokens for the same payer, merchant/platform combination. This helps to identify customers distinctly even though they may share the same PayPal account. 
   * @return allowMultipleTokens
  **/
  @ApiModelProperty(value = "Create multiple payment tokens for the same payer, merchant/platform combination. This helps to identify customers distinctly even though they may share the same PayPal account. ")
  public String getAllowMultipleTokens() {
    return allowMultipleTokens;
  }

  public void setAllowMultipleTokens(String allowMultipleTokens) {
    this.allowMultipleTokens = allowMultipleTokens;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ptsv2intentsPaymentInformationTokenizedPaymentMethod ptsv2intentsPaymentInformationTokenizedPaymentMethod = (Ptsv2intentsPaymentInformationTokenizedPaymentMethod) o;
    return Objects.equals(this.description, ptsv2intentsPaymentInformationTokenizedPaymentMethod.description) &&
        Objects.equals(this.usagePattern, ptsv2intentsPaymentInformationTokenizedPaymentMethod.usagePattern) &&
        Objects.equals(this.usageType, ptsv2intentsPaymentInformationTokenizedPaymentMethod.usageType) &&
        Objects.equals(this.allowMultipleTokens, ptsv2intentsPaymentInformationTokenizedPaymentMethod.allowMultipleTokens);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, usagePattern, usageType, allowMultipleTokens);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ptsv2intentsPaymentInformationTokenizedPaymentMethod {\n");
    
    if (description != null) sb.append("    description: ").append(toIndentedString(description)).append("\n");
    if (usagePattern != null) sb.append("    usagePattern: ").append(toIndentedString(usagePattern)).append("\n");
    if (usageType != null) sb.append("    usageType: ").append(toIndentedString(usageType)).append("\n");
    if (allowMultipleTokens != null) sb.append("    allowMultipleTokens: ").append(toIndentedString(allowMultipleTokens)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      // return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

