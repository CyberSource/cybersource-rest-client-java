/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Ptsv2paymentsTokenInformationTokenProvisioningInformation
 */

public class Ptsv2paymentsTokenInformationTokenProvisioningInformation {
  @SerializedName("consumerConsentObtained")
  private Boolean consumerConsentObtained = null;

  @SerializedName("multiFactorAuthenticated")
  private Boolean multiFactorAuthenticated = null;

  public Ptsv2paymentsTokenInformationTokenProvisioningInformation consumerConsentObtained(Boolean consumerConsentObtained) {
    this.consumerConsentObtained = consumerConsentObtained;
    return this;
  }

   /**
   * Flag that indicates whether the user consented to the tokenization of their credentials. Required for card network tokenization in certain markets, such as India. Possible Values: - &#x60;true&#x60;: Consumer has consented to tokenization of their credentials. - &#x60;false&#x60;: Consumer has not consented to tokenization of their credentials. 
   * @return consumerConsentObtained
  **/
  @ApiModelProperty(value = "Flag that indicates whether the user consented to the tokenization of their credentials. Required for card network tokenization in certain markets, such as India. Possible Values: - `true`: Consumer has consented to tokenization of their credentials. - `false`: Consumer has not consented to tokenization of their credentials. ")
  public Boolean isConsumerConsentObtained() {
    return consumerConsentObtained;
  }

  public void setConsumerConsentObtained(Boolean consumerConsentObtained) {
    this.consumerConsentObtained = consumerConsentObtained;
  }

  public Ptsv2paymentsTokenInformationTokenProvisioningInformation multiFactorAuthenticated(Boolean multiFactorAuthenticated) {
    this.multiFactorAuthenticated = multiFactorAuthenticated;
    return this;
  }

   /**
   * Flag that indicates whether AFA (Additional Factor of Authentication) for the PAN was completed. Required for card network tokenization in certain markets, such as India. Possible Values: - &#x60;true&#x60;: Consumer has been authenticated by the issuer. - &#x60;false&#x60;: Consumer has not been authenticated by the issuer. 
   * @return multiFactorAuthenticated
  **/
  @ApiModelProperty(value = "Flag that indicates whether AFA (Additional Factor of Authentication) for the PAN was completed. Required for card network tokenization in certain markets, such as India. Possible Values: - `true`: Consumer has been authenticated by the issuer. - `false`: Consumer has not been authenticated by the issuer. ")
  public Boolean isMultiFactorAuthenticated() {
    return multiFactorAuthenticated;
  }

  public void setMultiFactorAuthenticated(Boolean multiFactorAuthenticated) {
    this.multiFactorAuthenticated = multiFactorAuthenticated;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ptsv2paymentsTokenInformationTokenProvisioningInformation ptsv2paymentsTokenInformationTokenProvisioningInformation = (Ptsv2paymentsTokenInformationTokenProvisioningInformation) o;
    return Objects.equals(this.consumerConsentObtained, ptsv2paymentsTokenInformationTokenProvisioningInformation.consumerConsentObtained) &&
        Objects.equals(this.multiFactorAuthenticated, ptsv2paymentsTokenInformationTokenProvisioningInformation.multiFactorAuthenticated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerConsentObtained, multiFactorAuthenticated);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ptsv2paymentsTokenInformationTokenProvisioningInformation {\n");
    
    sb.append("    consumerConsentObtained: ").append(toIndentedString(consumerConsentObtained)).append("\n");
    sb.append("    multiFactorAuthenticated: ").append(toIndentedString(multiFactorAuthenticated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

