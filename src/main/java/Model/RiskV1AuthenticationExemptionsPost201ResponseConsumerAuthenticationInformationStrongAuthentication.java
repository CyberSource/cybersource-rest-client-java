/*
 * CyberSource Merged Spec
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package Model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-03-26T01:49:30.319+05:30")
public class RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication {
  @SerializedName("acquirerReferenceFraudRateThresholdExceeded")
  private Boolean acquirerReferenceFraudRateThresholdExceeded = null;

  @SerializedName("issuerReferenceFraudRateThresholdExceeded")
  private Boolean issuerReferenceFraudRateThresholdExceeded = null;

  @SerializedName("issuerReferenceFraudRateExceeded")
  private Boolean issuerReferenceFraudRateExceeded = null;

  @SerializedName("totalAmountValueExceeded")
  private Boolean totalAmountValueExceeded = null;

  @SerializedName("eeaDomesticInd")
  private Boolean eeaDomesticInd = null;

  @SerializedName("acquirerReferenceFraudRateExceeded")
  private Boolean acquirerReferenceFraudRateExceeded = null;

  @SerializedName("riskAttributesPresent")
  private Boolean riskAttributesPresent = null;

  @SerializedName("authenticationExemptionsId")
  private String authenticationExemptionsId = null;

  public RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication acquirerReferenceFraudRateThresholdExceeded(Boolean acquirerReferenceFraudRateThresholdExceeded) {
    this.acquirerReferenceFraudRateThresholdExceeded = acquirerReferenceFraudRateThresholdExceeded;
    return this;
  }

   /**
   * Indicates if the Acquirer has exceeded the RFR for 180 consecutive days. (E.g. “true” if has exceeded, “false” otherwise). 
   * @return acquirerReferenceFraudRateThresholdExceeded
  **/
  @ApiModelProperty(value = "Indicates if the Acquirer has exceeded the RFR for 180 consecutive days. (E.g. “true” if has exceeded, “false” otherwise). ")
  public Boolean getAcquirerReferenceFraudRateThresholdExceeded() {
    return acquirerReferenceFraudRateThresholdExceeded;
  }

  public void setAcquirerReferenceFraudRateThresholdExceeded(Boolean acquirerReferenceFraudRateThresholdExceeded) {
    this.acquirerReferenceFraudRateThresholdExceeded = acquirerReferenceFraudRateThresholdExceeded;
  }

  public RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication issuerReferenceFraudRateThresholdExceeded(Boolean issuerReferenceFraudRateThresholdExceeded) {
    this.issuerReferenceFraudRateThresholdExceeded = issuerReferenceFraudRateThresholdExceeded;
    return this;
  }

   /**
   * Indicates if the Issuer has exceeded the RFR for 180 consecutive days. (E.g. “True” if has exceeded, “False” otherwise). 
   * @return issuerReferenceFraudRateThresholdExceeded
  **/
  @ApiModelProperty(value = "Indicates if the Issuer has exceeded the RFR for 180 consecutive days. (E.g. “True” if has exceeded, “False” otherwise). ")
  public Boolean getIssuerReferenceFraudRateThresholdExceeded() {
    return issuerReferenceFraudRateThresholdExceeded;
  }

  public void setIssuerReferenceFraudRateThresholdExceeded(Boolean issuerReferenceFraudRateThresholdExceeded) {
    this.issuerReferenceFraudRateThresholdExceeded = issuerReferenceFraudRateThresholdExceeded;
  }

  public RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication issuerReferenceFraudRateExceeded(Boolean issuerReferenceFraudRateExceeded) {
    this.issuerReferenceFraudRateExceeded = issuerReferenceFraudRateExceeded;
    return this;
  }

   /**
   * Indicates if the Issuer’s RFR exceeds the allowable level based on the amount in the request (E.g. “true” if has exceeded, “false” otherwise). 
   * @return issuerReferenceFraudRateExceeded
  **/
  @ApiModelProperty(value = "Indicates if the Issuer’s RFR exceeds the allowable level based on the amount in the request (E.g. “true” if has exceeded, “false” otherwise). ")
  public Boolean getIssuerReferenceFraudRateExceeded() {
    return issuerReferenceFraudRateExceeded;
  }

  public void setIssuerReferenceFraudRateExceeded(Boolean issuerReferenceFraudRateExceeded) {
    this.issuerReferenceFraudRateExceeded = issuerReferenceFraudRateExceeded;
  }

  public RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication totalAmountValueExceeded(Boolean totalAmountValueExceeded) {
    this.totalAmountValueExceeded = totalAmountValueExceeded;
    return this;
  }

   /**
   * Indicates if the request amount has exceeded the maximum ETV rate. (E.g. “true” if exceeded, “false” otherwise). 
   * @return totalAmountValueExceeded
  **/
  @ApiModelProperty(value = "Indicates if the request amount has exceeded the maximum ETV rate. (E.g. “true” if exceeded, “false” otherwise). ")
  public Boolean getTotalAmountValueExceeded() {
    return totalAmountValueExceeded;
  }

  public void setTotalAmountValueExceeded(Boolean totalAmountValueExceeded) {
    this.totalAmountValueExceeded = totalAmountValueExceeded;
  }

  public RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication eeaDomesticInd(Boolean eeaDomesticInd) {
    this.eeaDomesticInd = eeaDomesticInd;
    return this;
  }

   /**
   * Indicates if the input qualifies as an EEA domestic transaction where both the Acquirer Country and Issuer Country are located in the EEA. (E.g. “1” if transaction qualifies, “0” otherwise). 
   * @return eeaDomesticInd
  **/
  @ApiModelProperty(value = "Indicates if the input qualifies as an EEA domestic transaction where both the Acquirer Country and Issuer Country are located in the EEA. (E.g. “1” if transaction qualifies, “0” otherwise). ")
  public Boolean getEeaDomesticInd() {
    return eeaDomesticInd;
  }

  public void setEeaDomesticInd(Boolean eeaDomesticInd) {
    this.eeaDomesticInd = eeaDomesticInd;
  }

  public RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication acquirerReferenceFraudRateExceeded(Boolean acquirerReferenceFraudRateExceeded) {
    this.acquirerReferenceFraudRateExceeded = acquirerReferenceFraudRateExceeded;
    return this;
  }

   /**
   * Indicates if the Acquirer’s Reference Fraud Rate (RFR) exceeds the allowable level based on the amount in the request (E.g. “True” if has exceeded, “False” otherwise). 
   * @return acquirerReferenceFraudRateExceeded
  **/
  @ApiModelProperty(value = "Indicates if the Acquirer’s Reference Fraud Rate (RFR) exceeds the allowable level based on the amount in the request (E.g. “True” if has exceeded, “False” otherwise). ")
  public Boolean getAcquirerReferenceFraudRateExceeded() {
    return acquirerReferenceFraudRateExceeded;
  }

  public void setAcquirerReferenceFraudRateExceeded(Boolean acquirerReferenceFraudRateExceeded) {
    this.acquirerReferenceFraudRateExceeded = acquirerReferenceFraudRateExceeded;
  }

  public RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication riskAttributesPresent(Boolean riskAttributesPresent) {
    this.riskAttributesPresent = riskAttributesPresent;
    return this;
  }

   /**
   * Risk Attribute Indicator based on required elements from Articles 2 &amp; 18 of the European Banking Authority (EBA) Guidelines (E.g. “True” if risk attributes present, “False” otherwise). 
   * @return riskAttributesPresent
  **/
  @ApiModelProperty(value = "Risk Attribute Indicator based on required elements from Articles 2 & 18 of the European Banking Authority (EBA) Guidelines (E.g. “True” if risk attributes present, “False” otherwise). ")
  public Boolean getRiskAttributesPresent() {
    return riskAttributesPresent;
  }

  public void setRiskAttributesPresent(Boolean riskAttributesPresent) {
    this.riskAttributesPresent = riskAttributesPresent;
  }

  public RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication authenticationExemptionsId(String authenticationExemptionsId) {
    this.authenticationExemptionsId = authenticationExemptionsId;
    return this;
  }

   /**
   * CYBS generated UUID used to identify the transaction. Note: 36 with hashes. 
   * @return authenticationExemptionsId
  **/
  @ApiModelProperty(value = "CYBS generated UUID used to identify the transaction. Note: 36 with hashes. ")
  public String getAuthenticationExemptionsId() {
    return authenticationExemptionsId;
  }

  public void setAuthenticationExemptionsId(String authenticationExemptionsId) {
    this.authenticationExemptionsId = authenticationExemptionsId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication riskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication = (RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication) o;
    return Objects.equals(this.acquirerReferenceFraudRateThresholdExceeded, riskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication.acquirerReferenceFraudRateThresholdExceeded) &&
        Objects.equals(this.issuerReferenceFraudRateThresholdExceeded, riskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication.issuerReferenceFraudRateThresholdExceeded) &&
        Objects.equals(this.issuerReferenceFraudRateExceeded, riskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication.issuerReferenceFraudRateExceeded) &&
        Objects.equals(this.totalAmountValueExceeded, riskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication.totalAmountValueExceeded) &&
        Objects.equals(this.eeaDomesticInd, riskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication.eeaDomesticInd) &&
        Objects.equals(this.acquirerReferenceFraudRateExceeded, riskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication.acquirerReferenceFraudRateExceeded) &&
        Objects.equals(this.riskAttributesPresent, riskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication.riskAttributesPresent) &&
        Objects.equals(this.authenticationExemptionsId, riskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication.authenticationExemptionsId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquirerReferenceFraudRateThresholdExceeded, issuerReferenceFraudRateThresholdExceeded, issuerReferenceFraudRateExceeded, totalAmountValueExceeded, eeaDomesticInd, acquirerReferenceFraudRateExceeded, riskAttributesPresent, authenticationExemptionsId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RiskV1AuthenticationExemptionsPost201ResponseConsumerAuthenticationInformationStrongAuthentication {\n");
    
    sb.append("    acquirerReferenceFraudRateThresholdExceeded: ").append(toIndentedString(acquirerReferenceFraudRateThresholdExceeded)).append("\n");
    sb.append("    issuerReferenceFraudRateThresholdExceeded: ").append(toIndentedString(issuerReferenceFraudRateThresholdExceeded)).append("\n");
    sb.append("    issuerReferenceFraudRateExceeded: ").append(toIndentedString(issuerReferenceFraudRateExceeded)).append("\n");
    sb.append("    totalAmountValueExceeded: ").append(toIndentedString(totalAmountValueExceeded)).append("\n");
    sb.append("    eeaDomesticInd: ").append(toIndentedString(eeaDomesticInd)).append("\n");
    sb.append("    acquirerReferenceFraudRateExceeded: ").append(toIndentedString(acquirerReferenceFraudRateExceeded)).append("\n");
    sb.append("    riskAttributesPresent: ").append(toIndentedString(riskAttributesPresent)).append("\n");
    sb.append("    authenticationExemptionsId: ").append(toIndentedString(authenticationExemptionsId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

